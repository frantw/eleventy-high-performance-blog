<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Fran</title>
	<subtitle>一隻野生的前端工程師。相信每一行程式碼都是改變世界的力量。</subtitle>
	
	<link href="https://frannn.dev/feed/feed.xml" rel="self"/>
	<link href="https://frannn.dev"/>
	<updated>2017-03-31T00:00:00-00:00</updated>
	<id>https://frannn.dev</id>
	<author>
		<name>Fran</name>
		<email></email>
	</author>
	
	<entry>
		<title>離開 Hexo，使用 Eleventy 架設部落格</title>
		<link href="https://frannn.dev/posts/82901432/"/>
		<updated>2022-08-02T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/82901432/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;從今年年初便知道 &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt; 這樣的一套 Static Site Generator，經過一番評估之後，最近終於趁著空閒的空檔，選擇 &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt; 作為新的技術框架，並以 &lt;a href=&quot;https://github.com/google/eleventy-high-performance-blog&quot;&gt;eleventy-high-performance-blog&lt;/a&gt; 作為基底，架置了新的部落格，和過去所使用的 &lt;a href=&quot;https://hexo.io/zh-tw/&quot;&gt;Hexo&lt;/a&gt; 框架說掰掰。&lt;/p&gt;
&lt;p&gt;在這裡紀錄一些個人的使用心得，也讓其他想嘗試 &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt; 這套工具的人可以作為參考。&lt;/p&gt;
&lt;h2 id=&quot;%E7%82%BA%E4%BB%80%E9%BA%BC%E4%B8%8D%E7%94%A8-hexo%EF%BC%9F&quot;&gt;為什麼不用 Hexo？ &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%82%BA%E4%BB%80%E9%BA%BC%E4%B8%8D%E7%94%A8-hexo%EF%BC%9F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;過去我使用 &lt;a href=&quot;https://hexo.io/zh-tw/&quot;&gt;Hexo&lt;/a&gt; 架置部落格也有好幾年，事實上作為新手架置部落格的選擇來說，還是一個很不錯的選擇。&lt;/p&gt;
&lt;p&gt;我認為 &lt;a href=&quot;https://hexo.io/zh-tw/&quot;&gt;Hexo&lt;/a&gt; 有以下的優點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基於 Node.js 撰寫，在本地編譯建置靜態頁面，有一定 SEO 優勢&lt;/li&gt;
&lt;li&gt;開源社群十分活躍，你幾乎不需要自己重造輪子&lt;/li&gt;
&lt;li&gt;基於以上，有豐富的漂亮主題與外掛&lt;/li&gt;
&lt;li&gt;中文文件、網路資源多，學習成本低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是，基於以上的優點……菜鳥時期的我也犯下了一些錯誤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;套用了漂亮的主題，卻未著重效能&lt;/li&gt;
&lt;li&gt;使用第三方外掛，實際上未必需要那麼強大的自定義功能，增加程式複雜度&lt;/li&gt;
&lt;li&gt;使用第三方套件並未積極更新最新版本，間接導致損失了可能的效能改進或延伸出資安問題&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PgaB6fJ.png&quot; alt=&quot;舊桌機版網頁 Lighthouse 表現&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;過去我所使用的是 &lt;a href=&quot;https://github.com/ppoffice/hexo-theme-icarus&quot;&gt;hexo-theme-icarus&lt;/a&gt; 這個主題，利用 Lighthouse 量測，在桌機上的表現還不算太差，但還有改善空間&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/BD0Bwpm.png&quot; alt=&quot;舊手機版網頁 Lighthouse 表現&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;然而透過 Lighthouse 量測，在手機上的表現是顯而易見的差強人意&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其實後來想想，我真的需要這個主題之中的每一個功能嗎？答案當然是否定的。&lt;/p&gt;
&lt;p&gt;對於自己的部落格，我的要求也和以前的我有所不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;效能優化擺在第一順位考量，不需要太浮誇的功能，越簡潔越好&lt;/li&gt;
&lt;li&gt;比起過於笨重的第三方套件，還不如不要，我可以自己動手&lt;/li&gt;
&lt;li&gt;基於前者，要容易按照我自己的需求客製化，框架架構不要太複雜&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;釐清自己的需求與目的後，開始研究不同技術與工具評估，透過 Huli 的這篇文章（&lt;a href=&quot;https://blog.huli.tw/2021/08/22/eleventy-over-hexo/&quot;&gt;除了 hexo，也可以考慮用 eleventy 來寫技術部落格&lt;/a&gt;）我得知了 &lt;a href=&quot;https://github.com/google/eleventy-high-performance-blog&quot;&gt;eleventy-high-performance-blog&lt;/a&gt; 這個 template repo。&lt;/p&gt;
&lt;h2 id=&quot;%E9%97%9C%E6%96%BC-eleventy-high-performance-blog&quot;&gt;關於 eleventy-high-performance-blog &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%97%9C%E6%96%BC-eleventy-high-performance-blog&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/eleventy-high-performance-blog&quot;&gt;eleventy-high-performance-blog&lt;/a&gt; 是一套由 google 工程師所建置的開源部落格模板，以打造高速效能為重點，這個模板已經建構好一套相對完整的架構，包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;圖片最佳化&lt;/strong&gt;（響應式圖片、lazy load、轉換 webp / AVIF 等優化格式）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS / JS minify&lt;/strong&gt;（使用 &lt;a href=&quot;https://rollupjs.org/guide/en/&quot;&gt;rollup.js&lt;/a&gt;、&lt;a href=&quot;https://purgecss.com/&quot;&gt;PurgeCSS&lt;/a&gt; 等工具）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基本 SEO 建設&lt;/strong&gt;（HTML 語意化、meta tag、Sitemap 等等）&lt;/li&gt;
&lt;li&gt;考量 &lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility&quot;&gt;Web Accessibility（a11y）&lt;/a&gt;&lt;/strong&gt; 而實作&lt;/li&gt;
&lt;li&gt;導入了 &lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha&lt;/a&gt;，有一套&lt;strong&gt;基本的測試架構&lt;/strong&gt;，CI 階段可整合測試&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;專案架構也清晰精簡，易於改動維護，可以說是麻雀雖小，五臟俱全！&lt;/p&gt;
&lt;p&gt;非要雞蛋裡挑骨頭的話，這個模板未經修改、直接建置的 &lt;a href=&quot;https://eleventy-high-performance-blog-sample.industrialempathy.com/&quot;&gt;Demo site&lt;/a&gt; 看起來確實是比 Hexo 社群那些酷酷的主題要來得精簡許多……&lt;/p&gt;
&lt;p&gt;但是，正如這個專案的 README 所說：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Knock yourself out. This is a template repository.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/2v7qWrx.png&quot; alt=&quot;接受挑戰&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ok，我接受這個挑戰！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E5%8C%96%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84%E5%BF%83%E8%B7%AF%E5%88%86%E4%BA%AB&quot;&gt;架設個人化部落格的心路分享 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E5%8C%96%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84%E5%BF%83%E8%B7%AF%E5%88%86%E4%BA%AB&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;開始改造的第一步，首要之務當然是：&lt;strong&gt;確立風格，列出需求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以我的例子來說，參考了一些前輩和同事的技術部落格後，確立自己心有所屬的主題風格後，再將我心中的想像、這其中必備的功能一一列出來：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;留言功能是必備&lt;/li&gt;
&lt;li&gt;文章要有漂亮的封面圖片&lt;/li&gt;
&lt;li&gt;想要深色主題和淺色主題的切換功能&lt;/li&gt;
&lt;li&gt;要有頁面分頁功能（分頁邏輯要和舊站一致）&lt;/li&gt;
&lt;li&gt;文章 link url 的轉換規則需要調整，不直接使用 title 字串（邏輯要和舊站一致，方便我作 301 轉址）&lt;/li&gt;
&lt;li&gt;串接 Google Analytics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;……諸多調整和樣式有關，族繁不及備載。&lt;/p&gt;
&lt;p&gt;總而言之，事前確認越是具體，實作階段也就更明確，避免反覆修改。&lt;/p&gt;
&lt;h3 id=&quot;color-palette&quot;&gt;Color Palette &lt;a class=&quot;direct-link&quot; href=&quot;#color-palette&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Color Palette 的部分，我則是借助了 &lt;a href=&quot;http://colormind.io/bootstrap/&quot;&gt;Colormind&lt;/a&gt; 這個網站幫我配好合理的網頁配色，實務上再按需求作一些 darken &amp;amp; lighten 色彩轉換。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZB4faSz.png&quot; alt=&quot;Colormind&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只需要選好主色，點擊 Generate 便會自動產生合理的網頁配色。當然，你也可以設定副色等等，將其一併納入考量！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD---giscus&quot;&gt;留言功能 - &lt;a href=&quot;https://giscus.app/zh-TW&quot;&gt;Giscus&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD---giscus&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;至於留言功能的部分，本來是在 &lt;a href=&quot;https://utteranc.es/&quot;&gt;utterances&lt;/a&gt; 和 &lt;a href=&quot;https://jamcomments.com/&quot;&gt;JamComments&lt;/a&gt; 之間反覆猶豫，兩者對我來說各有優缺。&lt;/p&gt;
&lt;p&gt;我一直以來都不是很喜歡 &lt;a href=&quot;https://utteranc.es/&quot;&gt;utterances&lt;/a&gt; 這種相依於 GitHub issues 相關 API 的方式，其實使用上並不會造成什麼問題，但對我來說 ...Is this an issue for me?&lt;/p&gt;
&lt;p&gt;心裡總是有種彆扭的感覺在那裡，否則單以功能面來說，&lt;a href=&quot;https://utteranc.es/&quot;&gt;utterances&lt;/a&gt; 絕對是可以滿足我的需求。&lt;/p&gt;
&lt;p&gt;反過來說，&lt;a href=&quot;https://jamcomments.com/&quot;&gt;JamComments&lt;/a&gt; 這個第三方服務雖然看起來和 Eleventy 有不錯的支援性，甚至文件上也提供了&lt;a href=&quot;https://jamcomments.com/docs/integrations/eleventy/&quot;&gt;官方外掛&lt;/a&gt;，但是對我而言，網站所相依的第三方服務，當然還是能少一個是一個。&lt;/p&gt;
&lt;p&gt;直到我在 SNS 上偶然看見有人推薦 &lt;a href=&quot;https://giscus.app/zh-TW&quot;&gt;Giscus&lt;/a&gt; 這個工具，完美解除了我上述的疑慮！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://giscus.app/zh-TW&quot;&gt;Giscus&lt;/a&gt; 其實是受到 &lt;a href=&quot;https://utteranc.es/&quot;&gt;utterances&lt;/a&gt; 啟發，但不同的是，背後所使用的是 GitHub Discussions 相關 API。&lt;/p&gt;
&lt;p&gt;當然這套工具也支援多樣的主題樣式設定，支援多語言，還可以讓我透過 &lt;code&gt;window.postMessage&lt;/code&gt; 等方式對 giscus iframe 做更進一步的動態互動。&lt;/p&gt;
&lt;p&gt;文件很清楚，串接過程中也沒遇到什麼問題，是一套我會想強力推薦給大家的留言系統工具！&lt;/p&gt;
&lt;h3 id=&quot;ci%2Fcd&quot;&gt;CI/CD &lt;a class=&quot;direct-link&quot; href=&quot;#ci%2Fcd&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在本地環境弄得差不多了，下一步開始著手調整 CI/CD workflow。&lt;/p&gt;
&lt;p&gt;Deploy 部分我就直接使用 GitHub Actions 一口氣處理掉了，覺得自己不太需要用到 &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; 服務，需要作轉址或是 SSL 憑證則是透過熟悉的 &lt;a href=&quot;https://www.cloudflare.com/zh-tw/&quot;&gt;Cloudflare&lt;/a&gt; 幫忙處理。&lt;/p&gt;
&lt;h4 id=&quot;ci%2Fcd-flow-%E8%AA%AA%E6%98%8E&quot;&gt;CI/CD flow 說明 &lt;a class=&quot;direct-link&quot; href=&quot;#ci%2Fcd-flow-%E8%AA%AA%E6%98%8E&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;基本上常駐的就是三支 branch：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/strong&gt;：主要開發與測試使用，有異動便會觸發 &lt;code&gt;build &amp;amp; test&lt;/code&gt; CI 流程，沒問題再人工手動進 code 到 &lt;code&gt;main&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;main&lt;/code&gt;&lt;/strong&gt;：有異動便會觸發 &lt;code&gt;build &amp;amp; deploy&lt;/code&gt; CD 流程，將建置產生的異動自動推上 &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;gh-pages&lt;/code&gt;&lt;/strong&gt;：不直接對這個 branch 操作，有異動就會直接觸發 Github 預設的 &lt;code&gt;pages build and deployment&lt;/code&gt; workflow，我什麼都不用做 😆&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;build-%26-deploy-workflow-%E8%A8%AD%E5%AE%9A%E6%AA%94%E7%AF%84%E4%BE%8B&quot;&gt;&lt;code&gt;build &amp;amp; deploy&lt;/code&gt; workflow 設定檔範例 &lt;a class=&quot;direct-link&quot; href=&quot;#build-%26-deploy-workflow-%E8%A8%AD%E5%AE%9A%E6%AA%94%E7%AF%84%E4%BE%8B&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; build &amp;amp; deploy&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;main&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;pull_request&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;main&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token key atrule&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;14.x&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v2&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Use Node.js $&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v1&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Install dependencies and build&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; npm install &lt;span class=&quot;token important&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run build&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;ci&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; JamesIves/github&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;deploy&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;action@v4&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;ssh-key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gh&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;pages&lt;br&gt;          &lt;span class=&quot;token key atrule&quot;&gt;folder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; _site&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Deploy job 使用了 &lt;a href=&quot;https://github.com/JamesIves/github-pages-deploy-action&quot;&gt;JamesIves/github-pages-deploy-action&lt;/a&gt; 代勞，記得按照&lt;a href=&quot;https://github.com/JamesIves/github-pages-deploy-action#using-an-ssh-deploy-key-&quot;&gt;文件說明&lt;/a&gt;去 Repo Settings 設定 &lt;strong&gt;Deploy key&lt;/strong&gt; 和 &lt;strong&gt;Repository secrets&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;%E8%B3%BC%E8%B2%B7%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%9F%9F%E5%90%8D%EF%BC%8C%E8%A8%AD%E5%AE%9A-cloudflare-%E4%BB%A3%E7%AE%A1-dns&quot;&gt;購買自定義域名，設定 Cloudflare 代管 DNS &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%B3%BC%E8%B2%B7%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%9F%9F%E5%90%8D%EF%BC%8C%E8%A8%AD%E5%AE%9A-cloudflare-%E4%BB%A3%E7%AE%A1-dns&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;不詳述如何設定自定義域名了，總之買完之後要去域名服務商調整設定，使用 &lt;a href=&quot;https://www.cloudflare.com/zh-tw/&quot;&gt;Cloudflare&lt;/a&gt; 代管 DNS。&lt;/p&gt;
&lt;p&gt;可以參考我過去的這篇文章：&lt;a href=&quot;https://frannn.dev/posts/d22e4c38/#%E7%94%A8-cloudflare-%E5%8A%A0%E4%B8%8A-ssl-%E6%86%91%E8%AD%89&quot;&gt;什麼是 SSL？透過 Cloudflare 來啟用 HTTPS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;光是 &lt;a href=&quot;https://www.cloudflare.com/zh-tw/&quot;&gt;Cloudflare&lt;/a&gt; 的免費方案就提供了許多網站加速、安全防禦服務，我重點設定的項目有這些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SSL/TLS 憑證&lt;/strong&gt;（一律使用 HTTPS，同時自動改寫）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caching&lt;/strong&gt;（調整瀏覽器快取 TTL 時間）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/200168196-Using-Cloudflare-Auto-Minify&quot;&gt;Auto Minify&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;啟用 Brotli 壓縮&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;啟用 &lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/200168056-Understanding-Rocket-Loader&quot;&gt;Rocket Loader&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E6%88%90%E6%9E%9C&quot;&gt;成果 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%88%90%E6%9E%9C&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最後，你現在眼前所看到的這個 blog 便是一切的成果！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/KyKloTT.png&quot; alt=&quot;新桌機版網頁 Lighthouse 表現&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用 Lighthouse 量測，同一篇文章在桌機上的表現&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/N1hTyGZ.png&quot; alt=&quot;新手機版網頁 Lighthouse 表現&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;利用 Lighthouse 量測，同一篇文章在手機上的表現&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到，雖然加了一些雜七雜八客製化功能和樣式（甚至是串上了 Google Analytics），但 Lighthouse 還是有很亮眼的表現。&lt;/p&gt;
&lt;p&gt;再進一步比較修改前和修改後，手機版網頁上的各個指標所耗費時間：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/szsJ4v3.png&quot; alt=&quot;舊手機版網頁的 Performance&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before：&lt;strong&gt;FCP&lt;/strong&gt; 時間高達 3.1 秒，&lt;strong&gt;LCP&lt;/strong&gt; 時間更需要 9.4 秒，完全就是不合格。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bcn8AYg.png&quot; alt=&quot;新手機版網頁的 Performance&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;After：&lt;strong&gt;FCP&lt;/strong&gt; 時間降至 1.0 秒，&lt;strong&gt;LCP&lt;/strong&gt; 時間只需要 1.3 秒，指標一切綠燈！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;對於這樣的復仇成果，我個人可以說是相當滿意。&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;總結 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;感謝前人指路，讓我發現了一套這麼棒的模板工具！&lt;/p&gt;
&lt;p&gt;過去我是懶人起手，直接交給了 Hexo 社群提供的主題來包辦一切，但是無形之中也因個人掌握不足，間接導致一些額外的效能問題。&lt;/p&gt;
&lt;p&gt;這次基於簡潔的 &lt;a href=&quot;https://github.com/google/eleventy-high-performance-blog&quot;&gt;eleventy-high-performance-blog&lt;/a&gt; 模板工具來開發，客製化個人功能的過程中，每告一段落、完成了一個較大規模的異動調整，我就會停下來檢查一下剛才完成的部分有沒有什麼地方可以再優化。（我個人是花了點心力在確認資源載入的 &lt;code&gt;preload&lt;/code&gt; 設定等等）&lt;/p&gt;
&lt;p&gt;與日常的專案開發不同，受限於頻繁的功能迭代有時候很難落實這件事情──然而&lt;strong&gt;頻繁量測，不斷地調整與測試，是提升網頁效能的必經之路&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不排斥自己動手來的話，我是很推薦 &lt;a href=&quot;https://github.com/google/eleventy-high-performance-blog&quot;&gt;eleventy-high-performance-blog&lt;/a&gt; 這個模板工具的，還收穫了滿滿的成就感！&lt;/p&gt;
&lt;p&gt;這個部落格的原始碼放在 &lt;a href=&quot;https://github.com/frantw/eleventy-high-performance-blog&quot;&gt;GitHub&lt;/a&gt; 上，如有疑問歡迎在這篇文章底下留言。&lt;/p&gt;
&lt;h3 id=&quot;%E5%85%B6%E4%BB%96%E5%8F%83%E8%80%83&quot;&gt;其他參考 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%85%B6%E4%BB%96%E5%8F%83%E8%80%83&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.huli.tw/2021/08/22/eleventy-over-hexo/&quot;&gt;除了 hexo，也可以考慮用 eleventy 來寫技術部落格&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jason-memo.dev/posts/why-i-leave-medium-and-build-blog-with-eleventy/&quot;&gt;為什麼我離開 Medium 用 eleventy 做一個 blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

		</content>
	</entry>
	
	<entry>
		<title>macOS 打造前端開發環境</title>
		<link href="https://frannn.dev/posts/56efe959/"/>
		<updated>2021-02-27T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/56efe959/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最近剛拿到新的 MacBook Pro，早忘了幾年前安裝環境究竟處理過什麼細節&lt;br&gt;
有些參考資料又比較過時，因此決定把這次安裝的程序和設定的細節記錄下來&lt;/p&gt;
&lt;p&gt;以下所使用的是 macOS Big Sur 11.2.1 的 MacBook Pro (13-inch, 2020)&lt;/p&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-homebrew&quot;&gt;安裝 Homebrew &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-homebrew&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://brew.sh/index_zh-tw.html&quot;&gt;Homebrew&lt;/a&gt; 是 Mac 系統中的套件管理工具&lt;br&gt;
利用 Homebrew 能讓我們不必藉由 App Store 或官網下載安裝檔就能取得許多軟體&lt;/p&gt;
&lt;p&gt;在終端機輸入&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;/bin/bash -c &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;後面會盡可能利用 &lt;code&gt;brew&lt;/code&gt; 指令來安裝軟體，加快效率&lt;/p&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-xcode-command-line-tool&quot;&gt;安裝 Xcode Command Line Tool &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-xcode-command-line-tool&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Command Line Tools 是在 Xcode 中的一款工具，在 macOS 中，有許多的工具或是語言都會依賴這個命令列開發者工具&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;xcode-select --install&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-nvm&quot;&gt;安裝 NVM &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-nvm&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在安裝開發前端必備的 &lt;strong&gt;Node.js&lt;/strong&gt; 以前，先讓我們來安裝 &lt;a href=&quot;https://github.com/nvm-sh/nvm&quot;&gt;NVM&lt;/a&gt;，英文全名是 Node Version Manager&lt;/p&gt;
&lt;p&gt;NVM 的用途如同英文全名，便是用來管理 Node 版本的工具。因為在不同的專案之間，我們可能必須要切換不同版本的運行環境，這時 NVM 便能幫助我們輕鬆切換&lt;/p&gt;
&lt;p&gt;在終端機輸入以下指令來安裝&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安裝完再輸入下面的指令&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;NVM_DIR&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/.nvm&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; -s &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$NVM_DIR&lt;/span&gt;/nvm.sh&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;. &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$NVM_DIR&lt;/span&gt;/nvm.sh&quot;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# This loads nvm&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這會把 NVM 的 Repo 資料夾複製到 &lt;code&gt;~/.nvm&lt;/code&gt;&lt;br&gt;
然後將 source line 加進 profile 設定檔中（ &lt;code&gt;~/.bash_profile&lt;/code&gt; 、 &lt;code&gt;~/.zshrc&lt;/code&gt; 、 &lt;code&gt;~/.profile&lt;/code&gt; 或 &lt;code&gt;~/.bashrc&lt;/code&gt; ）&lt;/p&gt;
&lt;h2 id=&quot;%E9%80%8F%E9%81%8E-nvm-%E5%AE%89%E8%A3%9D-node.js&quot;&gt;透過 NVM 安裝 Node.js &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%80%8F%E9%81%8E-nvm-%E5%AE%89%E8%A3%9D-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript 通常是執行在瀏覽器的環境中，而 &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; 能讓我們在後端（脫離瀏覽器環境的情況）中建立起能執行 JavaScript 的環境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用 NVM 安裝最新版本的 Node.js&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或安裝最新 LTS 版本的 Node.js&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --lts&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或安裝指定的 Node.js 版本&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12.16&lt;/span&gt;.3&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要切換當前使用版本&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm use &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要查看目前是使用哪個版本&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nvm current&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-npm&quot;&gt;安裝 NPM &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-npm&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;其實在我們安裝 Node.js 時，通常都會附帶安裝 &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt;，英文全名為 Node Package Manager&lt;/p&gt;
&lt;p&gt;NPM 是套件管理工具，能幫助我們管理專案的安裝套件，做到自動下載和版本控制等等的事情&lt;/p&gt;
&lt;p&gt;雖然剛才已經順帶安裝了，但我想指定使用特定版本的 NPM&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i -g npm@6.14.4&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這裡使用了縮寫 &lt;code&gt;i&lt;/code&gt; 表示 &lt;code&gt;install&lt;/code&gt;，&lt;code&gt;-g&lt;/code&gt; 則是 &lt;code&gt;--global&lt;/code&gt; 的縮寫，代表全域安裝，而不只是安裝在目前的專案目錄裡&lt;/p&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-wget&quot;&gt;安裝 wget &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-wget&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gnu.org/software/wget/&quot;&gt;wget&lt;/a&gt; 和前面我們所用到的 curl 指令，兩者都是 Linux 中用來下載檔案的&lt;br&gt;
只不過在 macOS 中並沒有預設安裝 wget，但未來我們可能還是有機會用上&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-git&quot;&gt;安裝 Git &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-git&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; 是一種版本控制系統&lt;br&gt;
其實 MacOS 預設是有安裝 Git 的，只是有版本過舊的可能&lt;/p&gt;
&lt;p&gt;確認目前的 Git 版本&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; --version &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要的話，重新安裝 Git 來取得最新版本&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone https://github.com/git/git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;記得設定 &lt;code&gt;git config&lt;/code&gt; 的識別資料，這樣每次 Git 的提交才會標註上你的資訊&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global user.name &lt;span class=&quot;token string&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --global user.email johndoe@example.com&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;確認 &lt;code&gt;git config&lt;/code&gt; 的資訊&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; config --list&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-iterm2&quot;&gt;安裝 iTerm2 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-iterm2&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;比起原生終端機，我個人還是喜歡使用 &lt;a href=&quot;https://iterm2.com/&quot;&gt;iTerm2&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; iterm2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下來設定顏色樣式，到 &lt;a href=&quot;https://iterm2colorschemes.com/&quot;&gt;Iterm2-color-schemes&lt;/a&gt; 挑一個喜歡的顏色組合吧！&lt;/p&gt;
&lt;p&gt;滑鼠右鍵、另存連結，存下 &lt;code&gt;.itermcolors&lt;/code&gt; 檔案，再回到 iTerm2 中依序點擊&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Preferences → Profiles → Colors → Color Presets... → Import...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;選擇剛才下載的 &lt;code&gt;.itermcolors&lt;/code&gt; 檔案（我使用的是 &lt;a href=&quot;https://raw.githubusercontent.com/mbadolato/iTerm2-Color-Schemes/master/schemes/Brogrammer.itermcolors&quot;&gt;Brogrammer&lt;/a&gt;）&lt;/p&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-zsh&quot;&gt;安裝 zsh &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-zsh&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Zsh 又稱為 Z shell，和常聽到的 Bash 類似，都是一種 shell 工具&lt;br&gt;
從 macOS Catalina（10.15）版本後，是使用 Zsh 作為預設 shell&lt;/p&gt;
&lt;p&gt;如果是以前的系統版本，會需要再手動安裝&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;zsh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;確認是否安裝成功&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;zsh&lt;/span&gt; --version&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-zimfw&quot;&gt;安裝 zimfw &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-zimfw&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zimfw.sh/&quot;&gt;Zim&lt;/a&gt; 是一個管理 zsh 組態設定的框架&lt;/p&gt;
&lt;p&gt;以前我使用的其實是另一個叫做 &lt;a href=&quot;https://ohmyz.sh/&quot;&gt;oh-my-zsh&lt;/a&gt; 的老牌框架，但是 oh-my-zsh 比較肥一些&lt;/p&gt;
&lt;p&gt;直到後來我發現了 Zim，一些我常用的功能在 Zim 之中也都有，&lt;a href=&quot;https://github.com/zimfw/zimfw/wiki/Speed&quot;&gt;速度&lt;/a&gt;又相較 oh-my-zsh 快上不少，所以就改用這個&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;zsh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-powerlevel10k&quot;&gt;安裝 Powerlevel10k &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-powerlevel10k&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/romkatv/powerlevel10k&quot;&gt;Powerlevel10k&lt;/a&gt; 是一個 Zsh 外觀主題，還有方便的自動設定介面&lt;/p&gt;
&lt;p&gt;要搭配 Zim 安裝，可以輸入&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;vi&lt;/span&gt; ~/.zimrc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把 &lt;code&gt;zmodule steeef&lt;/code&gt; 這行改成 &lt;code&gt;zmodule romkatv/powerlevel10k&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;儲存退出後，回到終端機輸入&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;zimfw &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; ~/.zshrc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;source ~/.zshrc&lt;/code&gt; 會重新載入配置文件，當然也能直接重新啟動終端機重載&lt;/p&gt;
&lt;p&gt;重載後便會進入 Powerlevel10k 的自動設定介面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nPErbkB.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果沒有的話，先重開終端機，再輸入設定指令&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;p10k configure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;理論上在過程中會自動安裝我們所需要的 powerline 字體 - Meslo Nerd Font&lt;/p&gt;
&lt;p&gt;要回到 iTerm2 中確認字型是 &lt;code&gt;MesloLGS NF&lt;/code&gt; 並設定字體大小，依序點選&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Preferences → Profiles → Text&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-vscode&quot;&gt;安裝 VSCode &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-vscode&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;程式碼編輯器 &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;，吃飯工具相信不用多做解釋&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --cask visual-studio-code&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再打開 VSCode 按下 Command + Shift + P，安裝 Shell 指令 &lt;code&gt;code&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Install &lt;span class=&quot;token string&quot;&gt;&#39;code&#39;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;code&lt;/code&gt; 指令能讓我們在終端機快速用 VSCode 打開檔案或資料夾&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;code file_or_folder_name&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;設定預設終端機和字體，在 VSCode 依序點擊&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Preferences → Settings → Features → Terminal &lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;將 &lt;code&gt;OsxExec&lt;/code&gt; 的欄位設定成 &lt;code&gt;iTerm.app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;將 &lt;code&gt;Font Family&lt;/code&gt; 的欄位設定成 &lt;code&gt;MesloLGS NF&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D%E5%85%B6%E4%BB%96%E7%A8%8B%E5%BC%8F&quot;&gt;安裝其他程式 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D%E5%85%B6%E4%BB%96%E7%A8%8B%E5%BC%8F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;到這裡為止，其實已經能滿足大部分的開發需求了&lt;br&gt;
再來就是安裝一些瀏覽器或是其他工作上可能需要的工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://www.google.com/chrome/&quot;&gt;Google Chrome&lt;/a&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --cask google-chrome&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://www.mozilla.org/firefox/&quot;&gt;Mozilla Firefox&lt;/a&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --cask firefox&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://www.microsoft.com/edge&quot;&gt;Microsoft Edge&lt;/a&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --cask microsoft-edge&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --cask &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://tmux.github.io/&quot;&gt;tmux&lt;/a&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; tmux&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://github.com/sharkdp/bat&quot;&gt;bat&lt;/a&gt;，記得在 &lt;code&gt;~/.zshrc&lt;/code&gt; 中加入 &lt;code&gt;alias cat=&amp;quot;bat&amp;quot;&lt;/code&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; bat&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://the.exa.website/&quot;&gt;exa&lt;/a&gt;，記得在 &lt;code&gt;~/.zshrc&lt;/code&gt; 中加入 &lt;code&gt;alias ls=&amp;quot;exa&amp;quot;&lt;/code&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; exa&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://folivora.ai/&quot;&gt;BetterTouchTool&lt;/a&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --cask bettertouchtool&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://git-fork.com/&quot;&gt;Fork&lt;/a&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --cask fork&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://github.com/jinfeihan57/p7zip&quot;&gt;p7zip（7-Zip）&lt;/a&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; p7zip&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;安裝 &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;（順便一提，我使用的是 &lt;a href=&quot;https://slackthemes.net/#/convoy&quot;&gt;Convoy&lt;/a&gt; 這個顏色主題）&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --cask slack&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AA%9E&quot;&gt;結語 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AA%9E&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;雖然上面洋洋灑灑列了一大篇，但其實還有其他的眉眉角角，比如說&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;設定 SSH 金鑰，可以參考我之前寫的另一篇&lt;a href=&quot;https://blog.wjhuang.com/posts/83ff426e/#%E5%9C%A8-OSX-%E8%88%87-Linux-%E7%92%B0%E5%A2%83%E4%B8%8B%E7%94%A2%E7%94%9F-SSH-key&quot;&gt;文章&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安裝 VSCode 的擴充套件&lt;/li&gt;
&lt;li&gt;安裝 Chrome 的擴充功能&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;還有許多小工具能幫助開發體驗更加美好，這些就留待未來有機會再補充囉！&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>如何修改 GitHub 上已存在之 Repo 名稱</title>
		<link href="https://frannn.dev/posts/27fd8f25/"/>
		<updated>2021-02-14T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/27fd8f25/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 GitHub 上已有遠端 Repository 時，也許會事後反悔、想修改 Repo 名稱&lt;/p&gt;
&lt;p&gt;在這裡筆記一下這種情形下的標準做法，避免影響到既有存在於遠端上的專案&lt;/p&gt;
&lt;h2 id=&quot;%E4%BF%AE%E6%94%B9%E9%81%A0%E7%AB%AF-repo-%E5%90%8D%E7%A8%B1&quot;&gt;修改遠端 Repo 名稱 &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BF%AE%E6%94%B9%E9%81%A0%E7%AB%AF-repo-%E5%90%8D%E7%A8%B1&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;以 GitHub 為例，先進入遠端 Repo 的設定頁面：&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;https://github.com/&lt;github 帳號=&quot;&quot;&gt;/&lt;repo 名稱=&quot;&quot;&gt;/settings&lt;/repo&gt;&lt;/github&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lwnPIZC.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 &lt;strong&gt;Repository name&lt;/strong&gt; 欄位改成新的 Repo 名稱&lt;/li&gt;
&lt;li&gt;確認新名稱可以使用，會跳出 &lt;code&gt;&amp;lt;新名稱&amp;gt; is available&lt;/code&gt; 的訊息&lt;/li&gt;
&lt;li&gt;點擊 &lt;strong&gt;Rename&lt;/strong&gt; 更新 Repo 名稱&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E7%AB%AF%E7%9A%84%E9%81%A0%E7%AB%AF-repo-%E4%BD%8D%E7%BD%AE&quot;&gt;更新本地端的遠端 Repo 位置 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E7%AB%AF%E7%9A%84%E9%81%A0%E7%AB%AF-repo-%E4%BD%8D%E7%BD%AE&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;GitHub 更新 Repo 名稱後，複製新的遠端伺服器網址，格式如下：&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git@github.com:&lt;github 帳號=&quot;&quot;&gt;/&lt;repo 名稱=&quot;&quot;&gt;.git&lt;/repo&gt;&lt;/github&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/3GvHuQr.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;切換到本地端資料夾，打開終端機輸入指令&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;strong&gt;&lt;code&gt;git remote set-url&lt;/code&gt;&lt;/strong&gt; 指令，更改遠端伺服器網址&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote set-url origin git@github.com:&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;github 帳號&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;repo 名稱&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;.git&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;使用 &lt;strong&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/strong&gt; 指令，確認遠端伺服器網址&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote -v&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如此一來便大功告成&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>2021 年初前端工程師求職心得</title>
		<link href="https://frannn.dev/posts/f6df526e/"/>
		<updated>2021-02-08T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/f6df526e/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;去年九月，我離開了人生的第一份工作。&lt;/p&gt;
&lt;p&gt;趁著這幾個月好好休息充電、去考汽車駕照、寫些自己喜歡的 project、靜下來思考未來職涯規劃等等。&lt;br&gt;
直到十二月多開始閒得有些發慌，才又打定主意回歸求職市場。&lt;/p&gt;
&lt;p&gt;實際上這是我第一次如此認真準備面試，總體來說我很喜歡這種「費盡心思去爭取機會」的過程，也想寫下現在的自己在求職方面是如何思考。&lt;/p&gt;
&lt;h2 id=&quot;%E5%80%8B%E4%BA%BA%E8%83%8C%E6%99%AF&quot;&gt;個人背景 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%80%8B%E4%BA%BA%E8%83%8C%E6%99%AF&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;本科系學士&lt;/strong&gt;畢業，上一份（也是第一份）工作經歷三年&lt;br&gt;
公司規模偏小，我主要負責產品維護、程式碼重構&lt;br&gt;
在職期間也為團隊導入新技術框架，主導過大型專案&lt;/p&gt;
&lt;p&gt;想換工作的最大推力當然是想脫離舒適圈&lt;br&gt;
&lt;strong&gt;比起追求漂亮的薪資，我比較在意新的工作能帶給自己什麼&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99&quot;&gt;事前準備 &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;投履歷前最好瞭解一下這間公司在做什麼產業&lt;br&gt;
（順便一提，如果找不到什麼資訊那大概就是博弈了）&lt;/p&gt;
&lt;p&gt;再多方瞭解一下各式各樣的資訊，無論是面試心得或工作心得等等&lt;br&gt;
我自己比較常透過這幾個網站汲取資訊：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.qollie.com/&quot;&gt;求職天眼通: ಠ_ಠ Qollie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.goodjob.life/&quot;&gt;GoodJob 職場透明化運動&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://interview.tw/&quot;&gt;面試趣: 找工作前的第一站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何準備技術問題在此不多談&lt;br&gt;
這部分我主要參考網路上的面試心得和問題集，一些參考連結放在最後&lt;/p&gt;
&lt;p&gt;原則上&lt;strong&gt;不建議硬背答案，最好去思考如何用自己的話解釋概念&lt;/strong&gt;&lt;br&gt;
實際面試時才不會一時卡詞，忘記自己說到哪裡，直接當在原地&lt;/p&gt;
&lt;h3 id=&quot;%E8%87%AA%E6%88%91%E5%88%86%E6%9E%90-%26-%E5%BC%B1%E9%BB%9E%E6%87%89%E5%B0%8D&quot;&gt;自我分析 &amp;amp; 弱點應對 &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%87%AA%E6%88%91%E5%88%86%E6%9E%90-%26-%E5%BC%B1%E9%BB%9E%E6%87%89%E5%B0%8D&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;除此之外我評估自己大概有幾點弱項，或說是可能被其他人比下去的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;沒什麼在寫 Side project&lt;/li&gt;
&lt;li&gt;沒什麼在刷題&lt;/li&gt;
&lt;li&gt;議程或技術研討會的參與次數不多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再進一步分析，如何利用自己的優勢個別擊破&lt;/p&gt;
&lt;h4 id=&quot;%E6%B2%92%E4%BB%80%E9%BA%BC%E5%9C%A8%E5%AF%AB-side-project&quot;&gt;沒什麼在寫 Side project &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%B2%92%E4%BB%80%E9%BA%BC%E5%9C%A8%E5%AF%AB-side-project&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;儘管下班後我還是會寫程式，但都屬於自娛娛人或是揣摩新技術的摸索居多，我對於這些專案的完成度能不能為自己的能力加分是比較存疑的&lt;/p&gt;
&lt;p&gt;既然如此，&lt;strong&gt;我採取的方針是用工作上的實際成果去說服面試官&lt;/strong&gt;&lt;br&gt;
拿出大型專案說明自己是如何設計與實作，引導對方往預想的方向進一步提問，就成功一半了&lt;/p&gt;
&lt;p&gt;以我個人經驗來說，最常被詢問的果然是「你怎麼去重構」、「怎麼樣設計架構」、「過程中解決什麼困難」諸如此類的問題&lt;/p&gt;
&lt;p&gt;但作品集留白實在就太難看了！&lt;br&gt;
所以我自己還是花了點時間做好一個完成度比較高的專案&lt;/p&gt;
&lt;h4 id=&quot;%E6%B2%92%E4%BB%80%E9%BA%BC%E5%9C%A8%E5%88%B7%E9%A1%8C&quot;&gt;沒什麼在刷題 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%B2%92%E4%BB%80%E9%BA%BC%E5%9C%A8%E5%88%B7%E9%A1%8C&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;現在面試有 Codility 測驗的公司越來越多了&lt;br&gt;
這部分說真的讓我很挫折，缺乏刷題的經驗真的是硬傷&lt;br&gt;
短期間之內也不太可能大量刷題，彌補弱勢&lt;br&gt;
&lt;strong&gt;想嘗試大公司的話，建議把經典題目都刷過會比較好&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是時光不能倒流，也只能掌握基本的解題模式，臨機應變&lt;br&gt;
&lt;strong&gt;看懂題目後，我會先審視 edge cases 再構思如何撰寫&lt;/strong&gt;&lt;br&gt;
枚舉 test case 檢查自己的思路有無疏漏是很重要的一部分&lt;/p&gt;
&lt;h4 id=&quot;%E8%AD%B0%E7%A8%8B%E6%88%96%E6%8A%80%E8%A1%93%E7%A0%94%E8%A8%8E%E6%9C%83%E7%9A%84%E5%8F%83%E8%88%87%E6%AC%A1%E6%95%B8%E4%B8%8D%E5%A4%9A&quot;&gt;議程或技術研討會的參與次數不多 &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%AD%B0%E7%A8%8B%E6%88%96%E6%8A%80%E8%A1%93%E7%A0%94%E8%A8%8E%E6%9C%83%E7%9A%84%E5%8F%83%E8%88%87%E6%AC%A1%E6%95%B8%E4%B8%8D%E5%A4%9A&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;或許是疫情的關係，這部分大概不會列為扣分項，只是滿足條件會成為加分項&lt;br&gt;
雖然就我個人情況而言也是疫情衝擊和荷包考量才降低誘因……&lt;/p&gt;
&lt;p&gt;無論如何，只要&lt;strong&gt;證明給面試官看自己是有在注意新技術趨勢&lt;/strong&gt;就好&lt;br&gt;
不管是透過各種自學管道、參與線上的技術社團的討論，或是撰寫技術部落格&lt;br&gt;
面試官真正在意的還是對方是否願意自學，展現出充沛的好奇心&lt;/p&gt;
&lt;h2 id=&quot;%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97&quot;&gt;面試心得 &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我應該是屬於面試比較密集的類型（跟身邊的人相比）&lt;br&gt;
找工作的時間也很緊湊，我在一月中放出履歷，後面兩個禮拜密集安排面試，到第三個禮拜只剩下一些公司的二面流程，並且做出最後的決定&lt;/p&gt;
&lt;p&gt;最後去的公司從第一次面試到二次面談，收到錄取通知並回覆，這之間的時間甚至不超過一星期，仔細想想還真是挺倉促的&lt;/p&gt;
&lt;p&gt;這段時間我大概投了二十間公司上下，還有一些是透過求職網主動聯繫的&lt;br&gt;
實際面試的公司有 9 間，其中 7 間 offer get，1 間婉拒二面，1 間感謝信&lt;/p&gt;
&lt;p&gt;每天都要面試，甚至上下午要趕場真的超級累！&lt;br&gt;
&lt;strong&gt;建議安排面試最多一面一休&lt;/strong&gt;，比較好補足前一天自己面試不足的部分&lt;br&gt;
最好把自己最嚮往的公司面試往後安排，就能利用這之前的機會練習&lt;/p&gt;
&lt;p&gt;一開始面試當然多少會緊張，但到了後期心裡都會有個答案&lt;br&gt;
我就算遇到沒想過的問題，也還是會思考一下、先告訴對方我的猜想&lt;br&gt;
如果能和對方進行更深入的討論，那就再好不過了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面試是雙向往來，不光是公司面試求職者，求職者也在面試公司&lt;/strong&gt;&lt;br&gt;
對方是如何思考、過程中討論什麼技術、技術詢問的深度到哪、團隊工作流程如何進行等諸如此類，就是場雙方互相打量的角力賽&lt;/p&gt;
&lt;p&gt;瞭解公司文化，談完工作內容，那麼就剩下討論薪水問題了&lt;br&gt;
根據我自己的經驗，倒是沒什麼遇到開出預期薪資，對方下殺的情況&lt;br&gt;
如果職缺預期就是不給這麼高的薪資，那也只會直接打槍你，不會再特別多談&lt;/p&gt;
&lt;p&gt;而要如何求出求職市場給自己的價位，也只能在面試過程中慢慢摸索──&lt;br&gt;
&lt;strong&gt;薪水真的是靠人談出來的&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C&quot;&gt;常見問題 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h4 id=&quot;%E6%8A%80%E8%A1%93%E9%83%A8%E5%88%86&quot;&gt;技術部分 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%8A%80%E8%A1%93%E9%83%A8%E5%88%86&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;我主要參考了這些&lt;br&gt;
也不用翻太久以前的文章，否則參考價值不大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://h5bp.org/Front-end-Developer-Interview-Questions/translations/chinese-traditional/&quot;&gt;前端工程師面試問題集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@emmashih/2019%E5%B9%B4-%E9%9D%9E%E6%9C%AC%E7%A7%91%E8%BD%89%E8%81%B7%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB-862feac4734a&quot;&gt;2019年非本科轉職前端工程師經驗分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@innie902/2020-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97-e9f25211cc14&quot;&gt;2020 前端工程師面試心得&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@indigoichigo2019/2020%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6%E5%B0%8F%E8%A8%98-d24747ae284f&quot;&gt;2020前端工程師面試小記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@wei30172/2020%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6%E5%95%8F%E9%A1%8C%E5%BD%99%E6%95%B4%E5%8F%8A%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB-a1cb9fa504ca&quot;&gt;2020前端工程師面試問題彙整及心得分享&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.php.cn/toutiao-415463.html&quot;&gt;2021 前端面試題匯總（主要為 Vue）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其實看來看去就會發現都是類似的題型&lt;br&gt;
重點還是要去真正深入理解問題背後的觀念&lt;br&gt;
如果能搭配實際上工作情境碰到的問題去深入討論會更好&lt;/p&gt;
&lt;h4 id=&quot;%E4%BA%BA%E6%A0%BC%E7%89%B9%E8%B3%AA-%26-%E5%B7%A5%E4%BD%9C%E7%B6%93%E9%A9%97&quot;&gt;人格特質 &amp;amp; 工作經驗 &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BA%BA%E6%A0%BC%E7%89%B9%E8%B3%AA-%26-%E5%B7%A5%E4%BD%9C%E7%B6%93%E9%A9%97&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;我自己常遇到的大概是這些問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自我介紹&lt;/li&gt;
&lt;li&gt;有什麼優缺點&lt;/li&gt;
&lt;li&gt;為什麼要換工作&lt;/li&gt;
&lt;li&gt;之前的工作內容 / 工作流程&lt;/li&gt;
&lt;li&gt;開發上遇過的難題 / 最後如何解決&lt;/li&gt;
&lt;li&gt;為什麼會知道這間公司 / 怎麼會想來&lt;/li&gt;
&lt;li&gt;對新工作有什麼期望&lt;/li&gt;
&lt;li&gt;未來職涯規劃 / 對自己有什麼想像&lt;/li&gt;
&lt;li&gt;對這間公司有什麼問題&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想像自己就是個推銷員，你本身同時又是產品&lt;br&gt;
去思考要如何好好說一個故事包裝自己，同時展現自信與良好溝通能力&lt;/p&gt;
&lt;p&gt;不過也別太浮誇，誠實回答，臨機應變即可&lt;br&gt;
在這個階段尋求共識，確認雙方價值觀才是最重要的&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;總結 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;回顧這段時間以來的面試，從一開始每天心情都像是在坐雲霄飛車，到最後放寬心，能冷靜地同時與好幾個資歷深厚的主管交談。自己真的是最能體會到自己的成長的人。&lt;/p&gt;
&lt;p&gt;如果要用一句話說明我這段時間以來的體悟，只能說：&lt;br&gt;
&lt;strong&gt;過去的積累或許當下感受不出什麼，也許會在意想不到的時候反饋而來。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;像是被不同的面試官誇獎 Side project 成果，或是被同齡層的工程師說了：我有看你的技術部落格喔！本來都只是一個人默默苦幹，一回頭卻無意間收穫他人的肯定，這感覺真的很奇妙。&lt;/p&gt;
&lt;p&gt;但我還是有很多的不足之處。&lt;br&gt;
如果時光能倒退，我肯定會想&lt;strong&gt;更用心經營技術部落格，更認真刷題&lt;/strong&gt;。&lt;br&gt;
或許走在技術路上，永遠也不會覺得自己是準備好的，或是真正足夠的。&lt;/p&gt;
&lt;p&gt;新工作報到，這才是迎來新挑戰啊。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>什麼是 SSL？透過 Cloudflare 來啟用 HTTPS</title>
		<link href="https://frannn.dev/posts/d22e4c38/"/>
		<updated>2019-12-23T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/d22e4c38/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;當你使用 Chrome 瀏覽器時，是否曾留意過網址列出現的「&lt;strong&gt;不安全&lt;/strong&gt;」？&lt;/p&gt;
&lt;p&gt;尤其辛辛苦苦架好網站，甚至加上自訂域名，卻看到那幾個字，顯得格外刺眼——為什麼會出現所謂的不安全警示呢？&lt;/p&gt;
&lt;p&gt;這是因為 Google 鼓勵網站加上 SSL 憑證，那些能以 HTTPS 加密通訊協定存取的網站，就會加上綠色鎖頭字樣！甚至還列入了搜尋演算法的指標中，影響 SEO 排名。&lt;/p&gt;
&lt;p&gt;重點來了，所謂的 SSL 憑證到底是什麼？&lt;/p&gt;
&lt;h2 id=&quot;ssl---secure-sockets-layer%EF%BC%88%E9%80%9A%E8%A8%8A%E5%AE%89%E5%85%A8%E5%8D%94%E5%AE%9A%EF%BC%89&quot;&gt;SSL - Secure Sockets Layer（通訊安全協定） &lt;a class=&quot;direct-link&quot; href=&quot;#ssl---secure-sockets-layer%EF%BC%88%E9%80%9A%E8%A8%8A%E5%AE%89%E5%85%A8%E5%8D%94%E5%AE%9A%EF%BC%89&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SSL 的原文是 &lt;strong&gt;Secure Sockets Layer&lt;/strong&gt;，聽起來好像很複雜，其實本意是為了保護使用者的個人資料、聯絡方式、付款資訊不被第三方所攔截的技術。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DLeBOxF.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;運作原理就是在瀏覽器拜訪網站時，會向對應的伺服器要求建立安全連線，這部分會協議使用的加密演算法或是密鑰交換演算法等機制，協議出一份密鑰來認證。&lt;/p&gt;
&lt;p&gt;同時為了真正確保協議過程中的安全，除了協議的內容，伺服器還要回傳 &lt;strong&gt;CA（Certificate Authority，數位憑證）&lt;/strong&gt;，這是第三方的認證，來讓使用者端確認不是冒用身分。&lt;/p&gt;
&lt;p&gt;協議完成後，就可以按照協議進行加密、傳送資料了！經過加密的資料，即使第三方有心人士竊取到資料，也會因為缺少解密金鑰而無法得到正確訊息，只能看到亂碼。&lt;/p&gt;
&lt;p&gt;在原本的 HTTP 協定中加入 SSL 憑證的通訊安全協定，就是 HTTPS 協定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0gXpLaO.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E7%94%A8-cloudflare-%E5%8A%A0%E4%B8%8A-ssl-%E6%86%91%E8%AD%89&quot;&gt;用 Cloudflare 加上 SSL 憑證 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%94%A8-cloudflare-%E5%8A%A0%E4%B8%8A-ssl-%E6%86%91%E8%AD%89&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我們可以使用 Cloudflare 的 DNS 代管服務，來免費使用 SSL 憑證。&lt;br&gt;
只要將網域設為代管後，就能掛上 SSL 加密連線，擁有綠色鎖頭。&lt;/p&gt;
&lt;p&gt;讓我們先申請 Cloudflare 服務吧！首先要讓 Cloudflare 來解析域名。&lt;/p&gt;
&lt;h3 id=&quot;%E7%94%B3%E8%AB%8B-dns-%E8%A8%97%E7%AE%A1&quot;&gt;申請 DNS 託管 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%94%B3%E8%AB%8B-dns-%E8%A8%97%E7%AE%A1&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;註冊/登入後，點選 &lt;strong&gt;Add Site&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/h8u5R9K.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;選擇免費方案，就可以使用 SSL 憑證囉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/7J9KkvS.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;解析後可能會有一些錯誤訊息，這部分通常與域名服務商中的 DNS 設定有關。&lt;br&gt;
我的域名服務商是 &lt;strong&gt;Google Domains&lt;/strong&gt;，後面會以 Google Domains 作為操作示範。&lt;/p&gt;
&lt;p&gt;幾個常見錯誤訊息如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An MX record was not found for your root domain. An MX record is required for mail to reach &lt;code&gt;@自訂域名&lt;/code&gt; addresses.&lt;br&gt;
如果有設定自訂電子郵件地址，自訂紀錄就必須設定 MX，沒設定可忽略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An A, AAAA or CNAME record was not found for the www subdomain. The &lt;code&gt;自訂域名&lt;/code&gt; subdomain will not resolve.&lt;br&gt;
代表沒設定 A 或 CNAME，必須填齊。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/AkGyFNQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由於我是使用 Github Pages，所以指向的 IP 是以下四組。&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;185.199.108.153&lt;br&gt;185.199.109.153&lt;br&gt;185.199.110.153&lt;br&gt;185.199.111.153&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E8%A8%AD%E5%AE%9A%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8&quot;&gt;設定名稱伺服器 &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%A8%AD%E5%AE%9A%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;接下來要把域名服務商的名稱伺服器，改成&lt;strong&gt;使用自訂名稱伺服器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/FWNNm2g.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;填上 Cloudflare 所給的兩組名稱伺服器，儲存後回到 Cloudflare 去 Re-check。&lt;/p&gt;
&lt;p&gt;更新可能要很久，過一段時間再回來確認吧。&lt;br&gt;
生效後，就會看到出現啟用狀態，代表 DNS 託管設定完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/pCic5BS.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%95%9F%E7%94%A8-ssl-%E6%86%91%E8%AD%89&quot;&gt;啟用 SSL 憑證 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%95%9F%E7%94%A8-ssl-%E6%86%91%E8%AD%89&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;接下來終於可以使用 SSL 憑證了！點開 &lt;strong&gt;SSL/TLS&lt;/strong&gt; 來確認吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/faoEwGd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Cloudflare 通常會自動使用 SSL 憑證，設定是 Fiexible，代表確實運作中，看見網址列出現鎖頭就完成了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Off&lt;/strong&gt;&lt;br&gt;
未啟用 SSL&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;&lt;br&gt;
Cloudflare 會透過 HTTP 存取伺服器，再透過 HTTPS 跟使用者連線，所以使用者可以透過 HTTPS 連線到網站&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Full&lt;/strong&gt;&lt;br&gt;
Cloudflare 會透過 HTTPS 存取伺服器，同時也透過 HTTPS 跟使用者連線&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Full (Strict)&lt;/strong&gt;&lt;br&gt;
強制使用 HTTPS 連線，但 Cloudflare 會檢查第三方是不是信任憑證（不可自簽）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lZKA0k5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E8%A8%AD%E5%AE%9A%E8%87%AA%E5%8B%95%E8%B7%B3%E8%BD%89&quot;&gt;設定自動跳轉 &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%A8%AD%E5%AE%9A%E8%87%AA%E5%8B%95%E8%B7%B3%E8%BD%89&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最後要確保網站的所有訪問都是基於 HTTPS 協定，所以要讓 HTTP 自動跳轉到 HTTPS。&lt;/p&gt;
&lt;p&gt;點開 &lt;strong&gt;SSL/TLS&lt;/strong&gt; 底下的 &lt;strong&gt;Edge Certificates&lt;/strong&gt; 分頁，找到 &lt;strong&gt;Always Use HTTPS&lt;/strong&gt; 並打開。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/GjEQVnW.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;這樣即使使用者在網址列輸入的是 HTTP，也會自動跳轉囉！&lt;/p&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AA%9E&quot;&gt;結語 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AA%9E&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;現在網站擁有 SSL 憑證了，原理是透過握手技術（&lt;strong&gt;Handshake&lt;/strong&gt;）以及&lt;strong&gt;公私鑰加密&lt;/strong&gt;，來達成資料加密的連線。不僅是安全，對於 SEO 也有優勢。&lt;/p&gt;
&lt;p&gt;這之中利用了 &lt;strong&gt;Cloudflare&lt;/strong&gt; 代管 DNS，提供免費的 &lt;strong&gt;SSL 憑證服務&lt;/strong&gt;。&lt;br&gt;
事實上 Cloudflare 能做到的可不只這樣，光是免費方案就提供了基本的&lt;strong&gt;安全防護&lt;/strong&gt;、&lt;strong&gt;網站加速&lt;/strong&gt;等其他功能，日後也可按需求付費升級。&lt;/p&gt;
&lt;p&gt;我自己比較常用到的是這些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Analytics&lt;/strong&gt; 以檢視網站分析&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt; 啟用 &lt;strong&gt;Auto Minify&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Page Rules&lt;/strong&gt; 自訂頁面規則&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你的網站還沒有 SSL 憑證嗎？不如現在就試試看吧！&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>Hexo + GitHub Actions 打造自動部署</title>
		<link href="https://frannn.dev/posts/350dd70b/"/>
		<updated>2019-12-22T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/350dd70b/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;這篇文章的出現，要從兩年前開始說起，那時候的我才剛開始摸 &lt;a href=&quot;https://hexo.io/zh-tw/index.html&quot;&gt;Hexo&lt;/a&gt;。&lt;br&gt;
當時的我比起其他平台，像是 Wordpress / Medium / Logdown 等等諸如此類，更喜歡 markdown 寫作方式，所以興致沖沖地架了個部落格。&lt;/p&gt;
&lt;p&gt;但是理想很豐滿，現實總是骨感——很快地，過了大約一年左右便很少更新，敵擋不過自己的惰性。&lt;/p&gt;
&lt;p&gt;畢竟靜態網頁的佈署步驟太麻煩，必須滿足本地端有 Hexo 檔案的前提，我偏偏又喜歡用 &lt;a href=&quot;https://hackmd.io/&quot;&gt;HackMD&lt;/a&gt; 撰寫，一來一往之間步驟太過繁複。久而久之，這段時間我傾向於使用 HackMD 整理個人筆記，懶得發表技術文章到 blog 上。&lt;/p&gt;
&lt;p&gt;直到我注意到 GitHub 推出 &lt;strong&gt;CI/CD 服務&lt;/strong&gt;，能幫助我解決這個麻煩！趁這個機會我打算順便打理 Hexo 架構，把菜鳥時期我搭建的部落格重新打掉，在 2020 前夕超進化！&lt;/p&gt;
&lt;h2 id=&quot;%E4%BB%80%E9%BA%BC%E6%98%AF-hexo&quot;&gt;什麼是 Hexo &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BB%80%E9%BA%BC%E6%98%AF-hexo&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;想進一步瞭解更多，可以看看中文的 &lt;a href=&quot;https://hexo.io/zh-tw/docs/&quot;&gt;Hexo官方文件&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown（或其他渲染引擎）解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hexo 使用 Node.js 搭建，速度快且免費，操作也相對簡單，更是支持 Markdown ，也有不少第三方外掛系統。&lt;/p&gt;
&lt;h2 id=&quot;%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8-hexo&quot;&gt;開始使用 Hexo &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8-hexo&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;%E6%BA%96%E5%82%99%E5%B7%A5%E4%BD%9C-for-windows&quot;&gt;準備工作 for Windows &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%BA%96%E5%82%99%E5%B7%A5%E4%BD%9C-for-windows&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;事前需要先安裝以下軟體&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://desktop.github.com/&quot;&gt;Github&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;當然你必須先擁有屬於自己的 github 帳號&lt;/li&gt;
&lt;li&gt;登入 Github 之後，點選右上角 Create repository&lt;br&gt;
Repository name 必須是 &lt;code&gt;github帳號.github.io&lt;/code&gt; 並選擇 Public&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安裝好上述軟體後，就可以打開 Shell 鍵入&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g hexo-cli&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;透過 npm 就可以順利完成 Hexo 的安裝了&lt;/p&gt;
&lt;h3 id=&quot;%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%AE%89%E8%A3%9D&quot;&gt;初始化和安裝 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%AE%89%E8%A3%9D&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;接下來，我們要進行初始化和安裝，在 Shell 鍵入&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;hexo init&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;跑完後，會在該資料夾底下新增所需要的檔案：&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;.&lt;br&gt;├── _config.yml&lt;br&gt;├── package.json&lt;br&gt;├── scaffolds&lt;br&gt;├── source&lt;br&gt;|   ├── _drafts&lt;br&gt;|   └── _posts&lt;br&gt;└── themes&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等它跑完就可以開始寫新文章、架 blog 了，初步的建置就是如此簡單！&lt;/p&gt;
&lt;h3 id=&quot;%E5%BB%BA%E7%AB%8B%E6%96%B0%E6%96%87%E7%AB%A0&quot;&gt;建立新文章 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%BA%E7%AB%8B%E6%96%B0%E6%96%87%E7%AB%A0&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 Shell 鍵入以下訊息&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;hexo new &lt;span class=&quot;token string&quot;&gt;&quot;postName&quot;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 建立一個新的文章&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新文章的格式是 markdown，可以到 &lt;code&gt;source/_post/postName.md&lt;/code&gt; 去修改&lt;/p&gt;
&lt;h3 id=&quot;%E9%A0%90%E8%A6%BD-blog&quot;&gt;預覽 blog &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%A0%90%E8%A6%BD-blog&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 Shell 鍵入&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;hexo g &lt;span class=&quot;token comment&quot;&gt;# (也可以打 hexo generate) 產生 blog&lt;/span&gt;&lt;br&gt;hexo s &lt;span class=&quot;token comment&quot;&gt;# (也可以打 hexo server)   讓 blog 可在 local 端檢視&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;http://localhost:4000&lt;/code&gt; 就可以看見剛剛建好的 blog&lt;/p&gt;
&lt;h3 id=&quot;%E4%BD%BF%E7%94%A8-hexo-deploy-%E9%83%A8%E7%BD%B2&quot;&gt;使用 Hexo Deploy 部署 &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BD%BF%E7%94%A8-hexo-deploy-%E9%83%A8%E7%BD%B2&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;先安裝 hexo-deployer-git&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; hexo-deployer-git --save&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下來打開資料夾中的 &lt;code&gt;_config.yml&lt;/code&gt; 編輯 &lt;code&gt;deploy:&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;deploy:&lt;br&gt;  type: &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt;&lt;br&gt;  repo: https://github.com/你的 github 帳號/你的專案名稱.git&lt;br&gt;  branch: master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完成設定以後，就可以發佈 blog 了&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;hexo deploy &lt;span class=&quot;token comment&quot;&gt;# (也可以打 hexo d) 發佈 blog&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;發布之後，到專案的 &lt;strong&gt;Settings&lt;/strong&gt; 啟用 &lt;strong&gt;GitHub Pages&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Source&lt;/strong&gt; 的欄位就選剛才填的 deploy branch&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wp4Qu8P.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;等一段時間後，就會顯示啟用，就可以從 &lt;code&gt;http://github帳號.github.io&lt;/code&gt; 連上 blog，完成初步工作！&lt;/p&gt;
&lt;p&gt;到這個階段其實已經可以利用 &lt;code&gt;hexo&lt;/code&gt; 基本指令在本地端架 blog 了，只是為了完成自動化部署，我又加入了 CI/CD 流程！&lt;/p&gt;
&lt;h2 id=&quot;%E4%BD%BF%E7%94%A8-github-actions-%E5%AF%A6%E7%8F%BE-ci%2Fcd&quot;&gt;使用 GitHub Actions 實現 CI/CD &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BD%BF%E7%94%A8-github-actions-%E5%AF%A6%E7%8F%BE-ci%2Fcd&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;%E4%BB%80%E9%BA%BC%E6%98%AF-ci%2Fcd&quot;&gt;什麼是 CI/CD &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BB%80%E9%BA%BC%E6%98%AF-ci%2Fcd&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;CI（Continuous integration）為「持續性整合」，目的是讓專案能夠在每一次的變動中都能通過一些檢驗來確保專案品質。 CD（Continuous Deployment）則為「自動化部署」，讓專案能夠自動在每次變動後能以最新版本呈現。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事實上在業界應用中，可做的多了，像是：環境建置、單元測試、日誌紀錄、產品部署，可以簡化開發流程。&lt;br&gt;
而在 Hexo 的 blog 架設過程中，我們也能用它來達成自動部署！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitHub Actions&lt;/strong&gt; 是由 GitHub 提供的 CI/CD 服務，用於在 GitHub 建置、測試、封裝、發佈或部署任何專案。並可藉此建置端對端（end-to-end）CI/CD 功能。&lt;/p&gt;
&lt;p&gt;Hexo 所提供的指令 &lt;code&gt;hexo generate&lt;/code&gt; 其實是幫我們產生靜態網頁檔案，也就是 &lt;code&gt;public&lt;/code&gt; 資料夾的內容。&lt;br&gt;
同時 &lt;code&gt;hexo deploy&lt;/code&gt; 則將 &lt;code&gt;public&lt;/code&gt; 資料夾中的內容推送到 &lt;code&gt;_config.yml&lt;/code&gt; 中指定的遠端專案的分支中，並 &lt;strong&gt;完全覆蓋&lt;/strong&gt; 當下分支的已有內容。&lt;/p&gt;
&lt;p&gt;因此我們的目的其實是要把這份運用 Hexo 框架的原始碼資料夾推送到 GitHub 的另一個專案分支上，並藉由 GitHub 所提供的 CI/CD 服務幫我們進行產生靜態網頁檔案，再推送到指定專案分支，也就是我們現在建立起 GitHub Pages 的專案上。&lt;/p&gt;
&lt;h3 id=&quot;%E6%8A%8A-hexo-%E5%8E%9F%E5%A7%8B%E7%A2%BC%E6%8E%A8%E9%80%81%E5%88%B0-github&quot;&gt;把 Hexo 原始碼推送到 GitHub &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%8A%8A-hexo-%E5%8E%9F%E5%A7%8B%E7%A2%BC%E6%8E%A8%E9%80%81%E5%88%B0-github&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先要把 Hexo 真正的 source code 推送到 GitHub 上建立一個新專案。&lt;br&gt;
記得將這個專案設為 &lt;strong&gt;Private&lt;/strong&gt;，不公開他人瀏覽。&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; init&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; --all&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit -m &lt;span class=&quot;token string&quot;&gt;&quot;First commit&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; origin https://github.com/你的 github 帳號/新專案名稱.git&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push -u origin master&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E5%BB%BA%E7%AB%8B-ssh-key&quot;&gt;建立 SSH Key &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%BA%E7%AB%8B-ssh-key&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在執行 Github Actions 的過程中，為了讓這段程式也可以把靜態網頁推送到原先我們所建立的專案上，必須建立一個 SSH Key 給它使用。&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ssh-keygen -f github-deploy-key &lt;span class=&quot;token comment&quot;&gt;# 然後三次 Enter&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原始碼專案&lt;br&gt;
到 &lt;strong&gt;Settings&lt;/strong&gt; 的 &lt;strong&gt;Secrets&lt;/strong&gt; 去 Add a new secret&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Name 輸入 &lt;code&gt;HEXO_DEPLOY_PRI&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Value 填上私鑰 &lt;code&gt;github-actions-deploy&lt;/code&gt; 的內容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;靜態網頁專案&lt;br&gt;
到 &lt;strong&gt;Settings&lt;/strong&gt; 的 &lt;strong&gt;Deploy keys&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Title 輸入 &lt;code&gt;HEXO_DEPLOY_PUB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Key 填上公鑰 &lt;code&gt;github-actions-deploy.pub&lt;/code&gt; 的內容&lt;/li&gt;
&lt;li&gt;勾選 Allow write access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再打開資料夾中的 &lt;code&gt;_config.yml&lt;/code&gt; 編輯 &lt;code&gt;deploy:&lt;/code&gt;，要改成 ssh 連線才可以順利部署&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;deploy:&lt;br&gt;  type: &lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt;&lt;br&gt;  repo: git@github.com:你的github帳號/你的靜態網頁專案名稱.git&lt;br&gt;  branch: master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;記得要 commit 後推送到專案上&lt;/p&gt;
&lt;h3 id=&quot;%E8%A8%AD%E5%AE%9A-github-actions&quot;&gt;設定 GitHub Actions &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%A8%AD%E5%AE%9A-github-actions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;回到原始碼專案，到 &lt;strong&gt;Actions&lt;/strong&gt; 右上角選擇 &lt;strong&gt;Set up a workflow yourself&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我的 &lt;code&gt;main.yml&lt;/code&gt; 設定如下&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy Blog&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;push&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token key atrule&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token key atrule&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ubuntu&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;latest&lt;br&gt;&lt;br&gt;    &lt;span class=&quot;token key atrule&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Checkout&lt;br&gt;      &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/checkout@v1&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Use Node.js 10.x&lt;br&gt;      &lt;span class=&quot;token key atrule&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; actions/setup&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;node@v1&lt;br&gt;      &lt;span class=&quot;token key atrule&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;node-version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;10.x&quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Setup Hexo env&lt;br&gt;      &lt;span class=&quot;token key atrule&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token key atrule&quot;&gt;HEXO_DEPLOY_PRI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $&lt;br&gt;      &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;&lt;br&gt;        # set up private key for deploy&lt;br&gt;        mkdir -p ~/.ssh/&lt;br&gt;        echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa&lt;br&gt;        chmod 600 ~/.ssh/id_rsa&lt;br&gt;        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts&lt;br&gt;        git config --global user.name &#39;使用者帳號&#39;&lt;br&gt;        git config --global user.email &#39;使用者信箱&#39;&lt;br&gt;        # install dependencies&lt;br&gt;        npm i -g hexo-cli&lt;br&gt;        npm i&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Deploy&lt;br&gt;      &lt;span class=&quot;token key atrule&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token scalar string&quot;&gt;&lt;br&gt;        # generate and depoly&lt;br&gt;        hexo g -d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把 &lt;code&gt;main.yml&lt;/code&gt; 推上 &lt;code&gt;workflows/&lt;/code&gt; 後，再一次回到 Actions 確認 workflows&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/BVXrSPn.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本地端檔案也要記得同步 &lt;code&gt;main.yml&lt;/code&gt; 建立時推上去的 commit&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; remote update&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; pull&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;blog-%E8%AE%8A%E6%9B%B4%E7%94%9F%E6%95%88&quot;&gt;blog 變更生效 &lt;a class=&quot;direct-link&quot; href=&quot;#blog-%E8%AE%8A%E6%9B%B4%E7%94%9F%E6%95%88&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;每次要更動 blog 內容，像是發文或更改佈景等操作都要記得推上去&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit -m &lt;span class=&quot;token string&quot;&gt;&quot;變更內容&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push origin master&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Github Actions 就會幫我們自動執行後續動作&lt;/p&gt;
&lt;h3 id=&quot;%E5%82%99%E4%BB%BD%E5%8E%9F%E5%A7%8B%E7%A2%BC&quot;&gt;備份原始碼 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%82%99%E4%BB%BD%E5%8E%9F%E5%A7%8B%E7%A2%BC&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;既然都把原始碼 git 上去了，以後如果要在其他電腦架 blog，只需要&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone git@github.com:你的github帳號/你的原始碼專案名稱.git&lt;br&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; 你的原始碼專案名稱&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;順手完成了備份動作，是不是一石二鳥呢！&lt;/p&gt;
&lt;h3 id=&quot;%E7%B7%9A%E4%B8%8A%E7%99%BC%E6%96%87&quot;&gt;線上發文 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B7%9A%E4%B8%8A%E7%99%BC%E6%96%87&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;現在讓我們試著用 GitHub 直接線上發文&lt;br&gt;
到專案原始碼底下的 &lt;code&gt;source/_posts&lt;/code&gt; 選擇右上角 &lt;strong&gt;Create new file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/snIwAWC.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;file name&lt;/code&gt; 即為&lt;code&gt;文章標題.md&lt;/code&gt;，內容要調整成 hexo 文章格式&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aB8fkjX.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然後選擇 &lt;strong&gt;Commit new file&lt;/strong&gt;&lt;br&gt;
如此以來就真正實現我想要的線上發布功能了！大功告成！&lt;/p&gt;
&lt;h2 id=&quot;%E8%B8%A9%E5%9D%91%E7%B6%93%E6%AD%B7&quot;&gt;踩坑經歷 &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%B8%A9%E5%9D%91%E7%B6%93%E6%AD%B7&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;%E6%9B%B4%E6%94%B9%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C&quot;&gt;更改佈景主題 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%9B%B4%E6%94%B9%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 &lt;a href=&quot;https://hexo.io/themes/&quot;&gt;Hexo Themes&lt;/a&gt; 中尋找你喜歡的佈景主題並保存到 &lt;code&gt;themes&lt;/code&gt; 下&lt;br&gt;
之後打開 &lt;code&gt;_config.yml&lt;/code&gt;，找到 &lt;code&gt;theme:&lt;/code&gt; 修改成佈景名稱，也就是資料夾的對應名稱&lt;/p&gt;
&lt;p&gt;如果是 git clone 下來的主題&lt;br&gt;
為了得以順利執行 actions，必須先將 &lt;code&gt;themes&lt;/code&gt; 底下的 &lt;code&gt;/.git&lt;/code&gt; 刪除，然後加入&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; .&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;themes&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;主題名稱&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; -f .&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;themes&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;主題名稱&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;_config.yml&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E8%A8%AD%E5%AE%9A%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%9F%9F%E5%90%8D&quot;&gt;設定自定義域名 &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%A8%AD%E5%AE%9A%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%9F%9F%E5%90%8D&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;重點同樣是域名服務商的設定，設定好之後記得要在 &lt;code&gt;source&lt;/code&gt; 底下保存一個 &lt;code&gt;CNAME&lt;/code&gt; 推上去&lt;br&gt;
才不會每次 push 後自訂域名設定都被覆蓋&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>正則表達式 Regular Expression 與深入應用</title>
		<link href="https://frannn.dev/posts/f1f89997/"/>
		<updated>2018-06-20T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/f1f89997/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在資料驗證時，常常必須進行字串比對的工作，我們能藉由 &lt;strong&gt;正則表達式（Regular Expression）&lt;/strong&gt; 來判斷是否字串具有符合的格式。&lt;/p&gt;
&lt;p&gt;善用&lt;strong&gt;正則表達式&lt;/strong&gt;能幫助我們用更加簡潔的程式碼去驗證字串，再利用 String 中的 &lt;code&gt;match()&lt;/code&gt; 或 &lt;code&gt;replace()&lt;/code&gt; 等方法對字串做更進一步的處理。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%BA%E7%AB%8B%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F&quot;&gt;建立正則表達式 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%BA%E7%AB%8B%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 JavaScript 中，我們有兩種方式可以建立正則表達式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立字面值&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;JavaScript&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;建立 RegExp 物件&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;JavaScript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果是不變的值，使用字面值來建立會具有較好的效能。&lt;/p&gt;
&lt;h2 id=&quot;%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E5%85%83&quot;&gt;正則表達式中的特殊字元 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E5%85%83&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;正則表達式由數個簡易字元組成，下面列出在正則表達式中個人比較常利用的特殊字元。&lt;/p&gt;
&lt;h3 id=&quot;%E4%B8%80%E8%88%AC%E5%B8%B8%E8%A6%8B&quot;&gt;一般常見 &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%B8%80%E8%88%AC%E5%B8%B8%E8%A6%8B&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\&lt;/code&gt;：跳脫特殊字元（如 &lt;code&gt;\.&lt;/code&gt; 找 &amp;quot;.&amp;quot; 或是 &lt;code&gt;\/&lt;/code&gt; 找 &amp;quot;/&amp;quot;）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt;：任意字元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt;：字元的開頭&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;：字元的結尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[abc]&lt;/code&gt; ：比對是否為中括號中的 a 或 b 或 c&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^abc]&lt;/code&gt;：不是中括號中的 a 或 b 或 c 的任何字元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-z]&lt;/code&gt; ：抓任何小寫 a-z 之間的字元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-zA-Z]&lt;/code&gt; ：抓任何小寫 a-z 和大寫 A-Z 之間字元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9]&lt;/code&gt;：數字字元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt;：OR&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt;：群組&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E6%8C%87%E5%AE%9A%E5%8C%B9%E9%85%8D%E5%AD%97%E5%85%83&quot;&gt;指定匹配字元 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%8C%87%E5%AE%9A%E5%8C%B9%E9%85%8D%E5%AD%97%E5%85%83&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;前面我們曾提及一種特殊字元，也就是反斜線。&lt;br&gt;
反斜線 &lt;code&gt;\&lt;/code&gt; 在前可表示&lt;strong&gt;轉義&lt;/strong&gt; (escaping) ，將其後的特殊字元視為一般字元。&lt;br&gt;
如果要表示的字串中含有 &lt;code&gt;/&lt;/code&gt; 字元時，就必須寫作 &lt;code&gt;/\//&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但別把跳脫字元和下面這類型的特殊字元混淆了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt;：匹配任何數字字元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\D&lt;/code&gt;：匹配任何不是數字字元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\w&lt;/code&gt; ：匹配所有文字字元 + 底線，其實等於 &lt;code&gt;[a-z\dA-Z_]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\W&lt;/code&gt;：匹配所有非文字字元（標點符號、特殊字元等）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\s&lt;/code&gt;：匹配空格字元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\S&lt;/code&gt;：匹配任何&lt;strong&gt;非空格字元&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\b&lt;/code&gt;：在邊界的字元, 如 &lt;code&gt;hello&lt;/code&gt; 會得到 [&amp;quot;h&amp;quot;, &amp;quot;o&amp;quot;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E6%8C%87%E5%AE%9A%E5%8C%B9%E9%85%8D%E6%AC%A1%E6%95%B8&quot;&gt;指定匹配次數 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%8C%87%E5%AE%9A%E5%8C%B9%E9%85%8D%E6%AC%A1%E6%95%B8&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下字元&lt;strong&gt;只會針對前一個位置的匹配規則作用&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;：0 或更多&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;：1 或更多&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;：0 或 1 次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{m}&lt;/code&gt;：m 次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,}&lt;/code&gt;：最少 n 次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{m,n}&lt;/code&gt;：m 到 n 次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{m, n}?&lt;/code&gt;：從 m 號到 n 次，取匹配最少次的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;flags-%E6%97%97%E6%A8%99&quot;&gt;flags 旗標 &lt;a class=&quot;direct-link&quot; href=&quot;#flags-%E6%97%97%E6%A8%99&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;正則表達式可以設定不同的甚至是多個 &lt;strong&gt;flag&lt;/strong&gt; 來改變預設規則。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/.../i&lt;/code&gt;：不區分大小寫&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/.../g&lt;/code&gt;：&lt;strong&gt;全局匹配模式&lt;/strong&gt;，得以重複匹配多次，否則預設固定回傳第一個結果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%AF%A6%E9%9A%9B%E6%92%B0%E5%AF%AB%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F&quot;&gt;實際撰寫正則表達式 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AF%A6%E9%9A%9B%E6%92%B0%E5%AF%AB%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;下面以幾個例子說明該如何撰寫正則表達式。&lt;/p&gt;
&lt;h3 id=&quot;%E7%AF%84%E4%BE%8B%E4%B8%80%EF%BC%9A%E6%89%8B%E6%A9%9F%E8%99%9F%E7%A2%BC&quot;&gt;範例一：手機號碼 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AF%84%E4%BE%8B%E4%B8%80%EF%BC%9A%E6%89%8B%E6%A9%9F%E8%99%9F%E7%A2%BC&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;撰寫思維：判斷是不是十位數數字所組成&lt;/li&gt;
&lt;li&gt;正則表達式：&lt;code&gt;[0-9]{10}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E7%AF%84%E4%BE%8B%E4%BA%8C%EF%BC%9Aemail&quot;&gt;範例二：email &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AF%84%E4%BE%8B%E4%BA%8C%EF%BC%9Aemail&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;撰寫思維：以 &lt;code&gt;@&lt;/code&gt; 為中點，可以把字串切分成前半部和後半部
&lt;ul&gt;
&lt;li&gt;前半部以任意文字字元和 &lt;code&gt;-&lt;/code&gt; 組成任意長度&lt;/li&gt;
&lt;li&gt;後半部以任意文字字元和 &lt;code&gt;.&lt;/code&gt; 組成任意長度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;正則表達式：
&lt;ol&gt;
&lt;li&gt;先以 &lt;code&gt;[\w\-]&lt;/code&gt; 表達任意文字字元或 &lt;code&gt;-&lt;/code&gt; 的字元&lt;/li&gt;
&lt;li&gt;加上加號 &lt;code&gt;[\w\-]+&lt;/code&gt; 取取符合規則的一個或多個字元&lt;/li&gt;
&lt;li&gt;後半部如法炮製出 &lt;code&gt;[\w\-].&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;最後加上中間的 &lt;code&gt;@&lt;/code&gt; 並以括號包成群組，得到 &lt;code&gt;([\w\-]+@[\w\.]+)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E7%AF%84%E4%BE%8B%E4%B8%89%EF%BC%9A%E4%B8%8D%E7%A2%BA%E5%AE%9A%E5%A6%82%E4%BD%95%E5%88%86%E9%9A%94%E7%9A%84%E6%89%8B%E6%A9%9F%E8%99%9F%E7%A2%BC&quot;&gt;範例三：不確定如何分隔的手機號碼 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%AF%84%E4%BE%8B%E4%B8%89%EF%BC%9A%E4%B8%8D%E7%A2%BA%E5%AE%9A%E5%A6%82%E4%BD%95%E5%88%86%E9%9A%94%E7%9A%84%E6%89%8B%E6%A9%9F%E8%99%9F%E7%A2%BC&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;撰寫思維：手機號碼可能以分隔線 &lt;code&gt;-&lt;/code&gt; 或是空白字元分隔&lt;br&gt;
一樣先拆成三個部分，各自檢查是否符合規則&lt;/li&gt;
&lt;li&gt;正則表達式：
&lt;ol&gt;
&lt;li&gt;先以 &lt;code&gt;\d{4}&lt;/code&gt; 表達四位數字字元如 &lt;code&gt;0912&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;後面可能用空格或是 &lt;code&gt;-&lt;/code&gt; 隔開，所以變成 &lt;code&gt;\d{4}[\s\-]?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如法炮製其他部分，得到 &lt;code&gt;\d{4}[\s\-]?\d{3}[\s\-]?\d{3}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E5%85%B6%E4%BB%96%E5%B8%B8%E8%A6%8B%E5%AF%A6%E4%BE%8B&quot;&gt;其他常見實例 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%85%B6%E4%BB%96%E5%B8%B8%E8%A6%8B%E5%AF%A6%E4%BE%8B&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;以下實例會以字面值，也就是兩個 &lt;code&gt;/&lt;/code&gt; 包裹字元的形式來表示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;RegExp&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;th&gt;範例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/^\d{4}-\d{2}-\d{2}$/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;西元生日格式&lt;/td&gt;
&lt;td&gt;&amp;quot;1996-08-06&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/^[A-Z]\d{9}$/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;身分證字號&lt;/td&gt;
&lt;td&gt;&amp;quot;A123456789&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/^09\d{8}$/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;手機號碼&lt;/td&gt;
&lt;td&gt;&amp;quot;0912345678&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/^[^aeiou]*$/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不包含小寫母音的字串&lt;/td&gt;
&lt;td&gt;&amp;quot;hEllO&amp;quot;,&amp;quot;ApplE&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/^.*@gmail\.com$/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;gmail 信箱&lt;/td&gt;
&lt;td&gt;&amp;quot;&lt;a href=&quot;mailto:test@gmail.com&quot;&gt;test@gmail.com&lt;/a&gt;&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/^[0-9\+\-\*\/]*$/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;四則運算算式&lt;/td&gt;
&lt;td&gt;&amp;quot;1+2*3&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;%E5%AF%A6%E9%9A%9B%E6%87%89%E7%94%A8&quot;&gt;實際應用 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AF%A6%E9%9A%9B%E6%87%89%E7%94%A8&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接下來介紹一些常用的方法，如 RegExp 的 &lt;code&gt;test()&lt;/code&gt; 和 &lt;code&gt;exec()&lt;/code&gt; 方法，或是 String 的 &lt;code&gt;match()&lt;/code&gt; 和 &lt;code&gt;replace()&lt;/code&gt; 方法。&lt;/p&gt;
&lt;p&gt;這些只是個人比較常用到的，實際上還有其他可搭配應用的方法，有興趣可以再參閱其他技術文件。&lt;/p&gt;
&lt;h3 id=&quot;regexp.prototype.test()&quot;&gt;RegExp.prototype.test() &lt;a class=&quot;direct-link&quot; href=&quot;#regexp.prototype.test()&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;語法形如 &lt;code&gt;regexObj.test(str)&lt;/code&gt;&lt;br&gt;
對正則表達式檢查某個字串是否匹配其規則，並回傳 &lt;code&gt;true&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; result1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;han&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hannah1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; result2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;nan&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hannah1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;regexp.prototype.exec()&quot;&gt;RegExp.prototype.exec() &lt;a class=&quot;direct-link&quot; href=&quot;#regexp.prototype.exec()&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;語法形如 &lt;code&gt;regexObj.exec(str)&lt;/code&gt;&lt;br&gt;
對正則表達式連續檢查字串的匹配結果，回傳符合結果的陣列或是 &lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;每次執行會把成功匹配的末位紀錄在 &lt;code&gt;regexObj.lastIndex&lt;/code&gt; 中，做為下一次匹配開始的位置。並且可搭配&lt;strong&gt;全局匹配模式&lt;/strong&gt;和 &lt;code&gt;()&lt;/code&gt; &lt;strong&gt;群組&lt;/strong&gt;的特殊字元來使用，能得到更進一步分組的結果陣列。&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;(foo)([\w]+)&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;table football, foosball&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lastIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Array [&quot;football&quot;, &quot;foo&quot;, &quot;tball&quot;] 14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Array [&quot;foosball&quot;, &quot;foo&quot;, &quot;sball&quot;] 24&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以第一次 &lt;code&gt;console.log&lt;/code&gt; 的結果陣列 &lt;code&gt;array&lt;/code&gt; 為例，這個結果陣列會有以下屬性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;屬性&lt;/th&gt;
&lt;th&gt;說明&lt;/th&gt;
&lt;th&gt;實例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[0]&lt;/td&gt;
&lt;td&gt;匹配的全部字串&lt;/td&gt;
&lt;td&gt;&amp;quot;football&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[1], ..., [n]&lt;/td&gt;
&lt;td&gt;括號中的分組匹配字串&lt;/td&gt;
&lt;td&gt;[1] = &amp;quot;foo&amp;quot; &lt;br&gt; [2] = &amp;quot;tball&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;index&lt;/td&gt;
&lt;td&gt;匹配到的字串起點位於原始字串的索引值&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input&lt;/td&gt;
&lt;td&gt;原始字串值&lt;/td&gt;
&lt;td&gt;&amp;quot;table football, foosball&amp;quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;string.prototype.match()&quot;&gt;String.prototype.match() &lt;a class=&quot;direct-link&quot; href=&quot;#string.prototype.match()&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;語法形如 &lt;code&gt;str.match(regexp)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;對一個字串判斷是否符合正則表達式的結果，會回傳匹配字串或 &lt;code&gt;null&lt;/code&gt;。&lt;br&gt;
如果是&lt;strong&gt;全局匹配模式&lt;/strong&gt;，則會回傳匹配字串之結果陣列。此結果陣列的格式與 &lt;code&gt;RegExp.prototype.exec()&lt;/code&gt; 相同。&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[ABC]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;gi&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;re&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; regex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;[\d]&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;regex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// null&lt;/span&gt;&lt;br&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [&quot;&quot;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;string.prototype.replace()&quot;&gt;String.prototype.replace() &lt;a class=&quot;direct-link&quot; href=&quot;#string.prototype.replace()&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;語法形如 &lt;code&gt;str.replace(regexp|substr, newSubstr|function)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;對一個字串與 &lt;code&gt;pattern&lt;/code&gt; 比對，這個 &lt;code&gt;pattern&lt;/code&gt; 可以是字串也可以是正則表達式，再以 &lt;code&gt;replacement&lt;/code&gt; 取代吻合處，此處的 &lt;code&gt;replacement&lt;/code&gt; 則可以是字串或函式。&lt;br&gt;
並且可搭配&lt;strong&gt;群組&lt;/strong&gt;的特殊字元來使用，能指定一個字串為參數，形如 &lt;code&gt;$n&lt;/code&gt;，代表第 &lt;code&gt;n&lt;/code&gt; 項的分組匹配字串。&lt;/p&gt;
&lt;p&gt;必須注意的是，&lt;strong&gt;&lt;code&gt;replace()&lt;/code&gt; 方法並不會改變原有字串&lt;/strong&gt;。&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;We wish you a merry xmas! We wish you a merry xmas!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;xmas&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Christmas&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// We wish you a merry Christmas! We wish you a merry xmas!&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Smith&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;(\w+)\s(\w+)&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;$2, $1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// Smith, John&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E7%B5%90%E8%AA%9E&quot;&gt;結語 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B5%90%E8%AA%9E&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;字串比對和資料驗證等問題算是很容易接觸到的狀況，利用正則表達式我們就能夠更簡單去驗證其格式的正確性。&lt;/p&gt;
&lt;p&gt;初次接觸確實會讓人覺得簡直像是無字天書，但實際搞懂每個特殊字元的對應意義，日後無論是要自己撰寫規則還是檢閱他人的驗證規則，其實也不是這麼困難的事。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>Vue.js 新手上路</title>
		<link href="https://frannn.dev/posts/7694b685/"/>
		<updated>2018-02-03T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/7694b685/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在開始學習今天的主題之前，我們要來先討論一下：&lt;strong&gt;為什麼要學框架（Framework）？&lt;/strong&gt;&lt;br&gt;
因為很潮正夯特流行嗎？因為業界好找工作嗎？又有什麼是只用 jQuery 辦不到的事情嗎？&lt;/p&gt;
&lt;p&gt;簡單來說，&lt;strong&gt;jQuery&lt;/strong&gt; 是&lt;strong&gt;以 DOM 元素來觸發功能&lt;/strong&gt;，能幫助我們更簡單的實現網頁上的資料互動及事件處理方法，同時也簡化了許多 AJAX 的操作方法，是設計動畫效果的絕佳利器。&lt;/p&gt;
&lt;p&gt;然而 &lt;strong&gt;框架（Framework）&lt;/strong&gt; 包括你聽過的三神獸 &lt;strong&gt;Vue&lt;/strong&gt;, &lt;strong&gt;Angular&lt;/strong&gt;, &lt;strong&gt;React&lt;/strong&gt;，都是&lt;strong&gt;以資料來驅動功能&lt;/strong&gt;，適合用來撰寫一些以資料為主體的網頁以及 SPA，能幫助我們更加簡潔地去處理資料邏輯。&lt;/p&gt;
&lt;h2 id=&quot;%E9%80%B2%E5%85%A5-vue.js-%E4%B8%96%E7%95%8C&quot;&gt;進入 Vue.js 世界 &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%80%B2%E5%85%A5-vue.js-%E4%B8%96%E7%95%8C&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;讓我們先寫一個簡單的  &lt;strong&gt;Vue 建構式（Vue Vonstructor）&lt;/strong&gt; 來建立 view model ：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;.app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 要綁定的 DOM element，即作用範圍&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 資料綁定&lt;/span&gt;&lt;br&gt;  	&lt;span class=&quot;token literal-property property&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br&gt;  	&lt;span class=&quot;token literal-property property&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;male&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Alice&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;female&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 當資料改變時，對應更新的變動值&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 可以定義在元件或樣板內使用的 method&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E8%B3%87%E6%96%99%E7%B6%81%E5%AE%9A-data-binding&quot;&gt;資料綁定 Data Binding &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%B3%87%E6%96%99%E7%B6%81%E5%AE%9A-data-binding&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h4 id=&quot;data-%E7%9A%84%E4%BD%9C%E7%94%A8&quot;&gt;data 的作用 &lt;a class=&quot;direct-link&quot; href=&quot;#data-%E7%9A%84%E4%BD%9C%E7%94%A8&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;儲存元件內部狀態或資料&lt;/li&gt;
&lt;li&gt;和 v-model 合作實現雙向綁定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;利用 Mustache 的雙括號語法以及 &lt;strong&gt;模板語法&lt;/strong&gt; 可以直接將 data 的值置入&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;v-bind&quot;&gt;v-bind &lt;a class=&quot;direct-link&quot; href=&quot;#v-bind&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;雙括號語法不能直接寫入 html 的屬性之中，需使用 &lt;code&gt;v-bind&lt;/code&gt; 語法作屬性綁定，縮寫為 &lt;code&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;userList&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;:class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{ active: isActive }&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;userItem&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;item in users&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;:key&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;item.id&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;%E5%85%B6%E4%BB%96%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95&quot;&gt;其他模板語法 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%85%B6%E4%BB%96%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;v-if&lt;/strong&gt; , &lt;strong&gt;v-else-if&lt;/strong&gt;, &lt;strong&gt;v-else&lt;/strong&gt;&lt;br&gt;
形如 &lt;code&gt;v-if=&amp;quot;boolean&amp;quot;&lt;/code&gt; ,  &lt;code&gt;v-else-if=&amp;quot;boolean&amp;quot;&lt;/code&gt;  ,  &lt;code&gt;v-else&lt;/code&gt;&lt;br&gt;
類似 &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars.js&lt;/a&gt; 中的 {{#if boolean}} ,  {{else}}&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v-show&lt;/strong&gt;&lt;br&gt;
形如 &lt;code&gt;v-show=&amp;quot;boolean&amp;quot;&lt;/code&gt;&lt;br&gt;
類似 &lt;code&gt;v-if&lt;/code&gt;，不過會保留 DOM 元素本身，只是改變 &lt;code&gt;display: none&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v-for&lt;/strong&gt;&lt;br&gt;
形如 &lt;code&gt;v-for=&amp;quot;item in array&amp;quot;&lt;/code&gt;&lt;br&gt;
類似 &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars.js&lt;/a&gt; 中的 {{#each item}}&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%B1%AC%E6%80%A7%E8%A8%88%E7%AE%97-computed-propertries&quot;&gt;屬性計算 Computed Propertries &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%B1%AC%E6%80%A7%E8%A8%88%E7%AE%97-computed-propertries&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我們可以直接利用 &lt;strong&gt;computed&lt;/strong&gt; 來幫助我們 &lt;strong&gt;處理雙括號表達式的資料邏輯&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// 當資料改變時，對應更新的變動值&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;userNum&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;computed&lt;/strong&gt; 有以下特點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;function 本身無法帶入外部參數&lt;/li&gt;
&lt;li&gt;具有資料緩存的功能，不會每次都重新渲染&lt;br&gt;
當使用的 data 中的對應值變動，&lt;strong&gt;computed&lt;/strong&gt; 裡的值&lt;strong&gt;才會自動更新&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;methods-%E8%88%87%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86&quot;&gt;Methods 與事件處理 &lt;a class=&quot;direct-link&quot; href=&quot;#methods-%E8%88%87%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h4 id=&quot;methods&quot;&gt;methods &lt;a class=&quot;direct-link&quot; href=&quot;#methods&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;我們可以在 &lt;strong&gt;methods&lt;/strong&gt; 裡面定義可被 vue 物件呼叫的 function&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 可以定義在元件或樣板內使用的 method&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;addFollow&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而在 function 裡呼叫的 this 會自動綁定為呼叫這個 function 的物件&lt;br&gt;
同時必須注意的是，也就&lt;strong&gt;不能使用 ES6 中的箭頭函數&lt;/strong&gt;來定義 method function&lt;/p&gt;
&lt;h4 id=&quot;v-on&quot;&gt;v-on &lt;a class=&quot;direct-link&quot; href=&quot;#v-on&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;v-on&lt;/code&gt; 語法作事件處理的綁定，縮寫為 &lt;code&gt;@&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;userList&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;:class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{ active: isActive }&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;userItem&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;item in users&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;:key&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;item.id&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;@click&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;setFollow(item)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Follow&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再去呼叫我們在 &lt;strong&gt;methods&lt;/strong&gt; 中所定義的 function&lt;/p&gt;
&lt;h2 id=&quot;%E9%9B%99%E5%90%91%E7%B6%81%E5%AE%9A&quot;&gt;雙向綁定 &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%9B%99%E5%90%91%E7%B6%81%E5%AE%9A&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h4 id=&quot;v-model&quot;&gt;v-model &lt;a class=&quot;direct-link&quot; href=&quot;#v-model&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;v-model&lt;/code&gt; 可以幫助我們實現雙向綁定，也就是說&lt;strong&gt;去動態同步更改 data 的資料&lt;/strong&gt;，在表單呈現上特別好用&lt;br&gt;
限用於&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-model&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;todos-with-vue.js&quot;&gt;Todos with Vue.js &lt;a class=&quot;direct-link&quot; href=&quot;#todos-with-vue.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;利用前面所提及的各種方法，實作出一個簡單的 todo list&lt;/p&gt;
&lt;iframe height=&quot;400&quot; scrolling=&quot;no&quot; title=&quot;todos with vue.js&quot; src=&quot;https://codepen.io/veru/embed/JMMXxQ/?height=400&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot; style=&quot;width: 100%;&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/veru/pen/JMMXxQ/&quot;&gt;todos with vue.js&lt;/a&gt; by Veru (&lt;a href=&quot;https://codepen.io/veru&quot;&gt;@veru&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;ul&gt;
&lt;li&gt;實作功能
&lt;ul&gt;
&lt;li&gt;可新增/刪除 todo&lt;/li&gt;
&lt;li&gt;可將 todo 標示完成&lt;/li&gt;
&lt;li&gt;顯示未完成的 todo 數量&lt;/li&gt;
&lt;li&gt;可切換不同分頁：全部/未完成/已完成&lt;/li&gt;
&lt;li&gt;快捷鍵：完成所有 todo/刪除已完成 todo&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;參考資料 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/&quot;&gt;Vue.js 官方文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/kurotanshi/vuejs-62131923&quot;&gt;第一次用 Vue.js 就愛上&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cythilya.github.io/2017/05/21/vue-study-note/&quot;&gt;Summer 的 Vue.js 學習筆記總整理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

		</content>
	</entry>
	
	<entry>
		<title>淺談 AMP (Accelerated Mobile Pages)</title>
		<link href="https://frannn.dev/posts/dc7de635/"/>
		<updated>2017-12-10T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/dc7de635/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;網站速度、內容品質，這些都是 SEO的排名因素，同時也跟用戶體驗息息相關。而 Google 在&lt;a href=&quot;https://googleblog.blogspot.tw/2015/10/introducing-accelerated-mobile-pages.html&quot;&gt;2015 年正式發佈&lt;/a&gt;其獨有的 &lt;strong&gt;AMP&lt;/strong&gt; 框架，中文為 &lt;strong&gt;加速版行動網頁&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;AMP是 Google 獨有的網頁框架，用來使行動裝置網頁能快速載入。如果你有架設 AMP框架，促進使用者體驗優化，也許會讓該頁面的 rankng 提升 ，同時這個框架也能夠非常有效的提升用戶體驗，未來 AMP將有可能會越來越被重視、且也有可能在搜尋排名中佔有更強的影響力。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ampproject.org/docs/tutorials/create&quot;&gt;Google 官方網站&lt;/a&gt;上也一步步演示了要如何架設 AMP 網站，主要可分為三大部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AMP HTML&lt;/li&gt;
&lt;li&gt;AMP JS&lt;/li&gt;
&lt;li&gt;AMP Cache&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;amp-html&quot;&gt;AMP HTML &lt;a class=&quot;direct-link&quot; href=&quot;#amp-html&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;必須按照其規格撰寫：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以 &lt;code&gt;&amp;lt;!doctype html&amp;gt;&lt;/code&gt; 開頭&lt;/li&gt;
&lt;li&gt;其中第一個  tag 須為 &lt;code&gt;&amp;lt;html ⚡&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;html amp&amp;gt;&lt;/code&gt; 表示為 AMP 網頁&lt;/li&gt;
&lt;li&gt;必須包含 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 與 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 內必須以 &lt;code&gt;&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/code&gt; 作為第一個 tag&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 內必須包含 &lt;code&gt;&amp;lt;script async src=&amp;quot;https://cdn.ampproject.org/v0.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tag 以引入 AMP JS&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 內必須包含 &lt;code&gt;&amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;$SOME_URL&amp;quot;&amp;gt;&lt;/code&gt; 其中 &lt;code&gt;$SOME_URL&lt;/code&gt; 指向原本的非 AMP 網頁&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 內必須包含 &lt;code&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,minimum-scale=1&amp;quot;&amp;gt;&lt;/code&gt; 並且建議加入 &lt;code&gt;initial-scale=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 內必須包含 &lt;a href=&quot;https://www.ampproject.org/docs/reference/spec/amp-boilerplate&quot;&gt;AMP Boilerplate Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一個頁面可使用唯一一個 &lt;code&gt;&amp;lt;style amp-custom&amp;gt;&lt;/code&gt; tag 來自訂 style，然而有些 css 屬性是禁用的，但更加上了一些額外的屬性幫助我們排版，可見&lt;a href=&quot;https://www.ampproject.org/docs/guides/responsive_amp&quot;&gt;相關規範&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;而 HTML tags 也多以 AMP HTML tags 予以取代，像是 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 以 &lt;code&gt;&amp;lt;amp-img&amp;gt;&lt;/code&gt; 替代，等等&lt;a href=&quot;https://www.ampproject.org/zh_cn/docs/reference/components&quot;&gt;其他 component&lt;/a&gt;，這部分在下個段落會再細談。&lt;/p&gt;
&lt;h2 id=&quot;amp-js&quot;&gt;AMP JS &lt;a class=&quot;direct-link&quot; href=&quot;#amp-js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;為了有效管理資源載入並提供客製化標籤，所以僅能使用 AMP 的元件，不允許使用任何第三方的外連 js file 或是 inline script，也就是說你只能使用 AMP 規範提供的 &lt;a href=&quot;https://www.ampproject.org/zh_cn/docs/reference/components&quot;&gt;Component 元件&lt;/a&gt; 去完成網頁的行為，或者 iframe 一個非 AMP 頁面進來。&lt;/p&gt;
&lt;p&gt;AMP 規範所提供 Component 大略可分為以下數類：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ampproject.org/docs/reference/components#ads-and-analytics&quot;&gt;Ads &amp;amp; analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ampproject.org/docs/reference/components#dynamic-content&quot;&gt;Dynamic content&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ampproject.org/docs/reference/components#layout&quot;&gt;Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ampproject.org/docs/reference/components#media&quot;&gt;Media&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ampproject.org/docs/reference/components#presentation&quot;&gt;Presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ampproject.org/docs/reference/components#social&quot;&gt;Social&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;amp-cache&quot;&gt;AMP Cache &lt;a class=&quot;direct-link&quot; href=&quot;#amp-cache&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google AMP Cache 會驗證你的網站是否為 AMP 網頁，如果網站符合其規範，Search Result 便會出現 AMP Cache 的結果，提供快取好的 AMP HTML 網頁。&lt;/p&gt;
&lt;p&gt;同時這個搜尋結果會出現在一個新的區塊 &lt;strong&gt;Top Stories 版位&lt;/strong&gt;，只有支援 AMP 的網頁才會出現，所以支援 AMP 網站等同於讓你的網頁多了一次機會出現在 Google search result 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.thesempost.com/wp-content/uploads/2016/02/amp-demo2-576x1024.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E7%B8%BD%E7%B5%90&quot;&gt;總結 &lt;a class=&quot;direct-link&quot; href=&quot;#%E7%B8%BD%E7%B5%90&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AMP 最大優點當然就是頁面的加載速度的顯著提升，在 Google 的搜尋結果更會多出一個 Top Stories 版位。&lt;/p&gt;
&lt;p&gt;然而其諸多限制也帶來一些困擾，例如廣告投放、外站圖源、用戶登入問題，這些都只能依賴 AMP 規範提供的 Component 去完成，當然也不能設計一些太過複雜的介面。基於這些限制，開發者是否要引入該框架技術，就勢必得再多加思量了。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;參考資料 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.lalacube.com/archives/2101/accelerated-mobile-pages-amp-%E5%AF%A6%E6%88%B0%E5%AE%88%E5%89%87&quot;&gt;Accelerated Mobile Pages (AMP) 實戰守則&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tedshd.logdown.com/posts/1460247-amp-accelerated-mobile-pages&quot;&gt;AMP - Accelerated Mobile Pages 研究筆記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

		</content>
	</entry>
	
	<entry>
		<title>善用 Rebase 的 Git 工作流程</title>
		<link href="https://frannn.dev/posts/9d63e457/"/>
		<updated>2017-11-01T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/9d63e457/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;簡單介紹了 Merge 和 Rebase 的差異，並且以合併後的結果線圖來作比較。&lt;br&gt;
在多人協作的專案場景，能好好善用 Rebase 的話，絕對能省去不少麻煩事！&lt;/p&gt;
&lt;h2 id=&quot;%E5%88%86%E6%94%AF%E7%9A%84%E5%90%88%E4%BD%B5&quot;&gt;分支的合併 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%86%E6%94%AF%E7%9A%84%E5%90%88%E4%BD%B5&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;完成作業的 Topic 分支，最終都會合併到 Integration 分支。&lt;br&gt;
合併分支有兩種方法：使用 &lt;strong&gt;merge&lt;/strong&gt; 或 &lt;strong&gt;rebase&lt;/strong&gt;。&lt;br&gt;
兩者都是合併歷史記錄，但是根據使用的方法合併後的分支歷史記錄有很大的差別。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/MucvWQq.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;merge&quot;&gt;Merge &lt;a class=&quot;direct-link&quot; href=&quot;#merge&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;修改內容的歷史記錄會維持原狀，但是合併後的歷史紀錄會變得更複雜。&lt;br&gt;
&lt;img src=&quot;https://i.imgur.com/fZnV9YR.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Git 在做 merge 時，會自動判斷現在的狀況是否適合是使用 &lt;strong&gt;fast-forward&lt;/strong&gt;，或是我們可以透過加上 &lt;code&gt;--ff&lt;/code&gt; 或是 &lt;code&gt;--no-ff&lt;/code&gt; 來強制設定是否使用 fast-forward，差別如下：&lt;br&gt;
&lt;img src=&quot;https://i.imgur.com/vjc4D9q.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--no-ff&lt;/code&gt; 會多出一個 merge commit，而 &lt;code&gt;--ff&lt;/code&gt; 會直接視為 master 分支上多出的 commit。&lt;br&gt;
可視需求決定要使用哪種。&lt;/p&gt;
&lt;h3 id=&quot;rebase&quot;&gt;Rebase &lt;a class=&quot;direct-link&quot; href=&quot;#rebase&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;修改內容的歷史記錄會接在要合併的分支後面，合併後的歷史記錄會比較清楚簡單，但是，會比使用 merge 更容易發生衝突。&lt;br&gt;
&lt;img src=&quot;https://i.imgur.com/XXoH6Nr.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8NqcY1V.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%A4%9A%E4%BA%BA%E5%8D%94%E4%BD%9C%E7%9A%84-git-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B&quot;&gt;多人協作的 Git 工作流程 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A4%9A%E4%BA%BA%E5%8D%94%E4%BD%9C%E7%9A%84-git-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;具體來說，如果我們要將 feature branch 合併進 master&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;先切換到 feature branch，update 之後把遠端的 master 分支 rebase 進來&lt;br&gt;
&lt;code&gt;git checkout branch-name&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git remote update&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git rebase origin/master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切換到本地 master，當然要先確認本地 master 與遠端同步&lt;br&gt;
&lt;code&gt;git checkout master&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git merge --ff origin/master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把 feature branch 給 merge 進來 master，同時要保留新增功能用的commit&lt;br&gt;
&lt;code&gt;git merge --no-ff branch-name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將本地 master 推上遠端&lt;br&gt;
&lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原理其實並不難，但是在多人協作的專案開發時，如果能善用 Rebase 的話，有時候能幫助你省去一些意想不到的麻煩！&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>資工系學士畢業新鮮人的自白</title>
		<link href="https://frannn.dev/posts/cb4a7f47/"/>
		<updated>2017-10-19T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/cb4a7f47/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;當初應屆推本校資工所都沒上&lt;br&gt;
我很煩惱是不是該繼續往資工這條路走 -- by young60509&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上週在批踢踢軟體版看到網友  young60509 發表的文章，&lt;a href=&quot;https://www.ptt.cc/bbs/Soft_Job/M.1507876000.A.433.html&quot;&gt;[請益] 該不該往資工走下去...&lt;/a&gt; 作為同屆畢業生我看了也難免有感而發。&lt;/p&gt;
&lt;p&gt;本文並不會告訴大家，我在資工系修過什麼課、做了什麼事、遇到什麼人、學到什麼樣的東西，主要是想說說就讀資工系的我，甫畢業之初的一些看法。&lt;/p&gt;
&lt;h2 id=&quot;%E9%97%9C%E6%96%BC%E7%A0%94%E7%A9%B6%E6%89%80%E6%88%96%E5%B0%B1%E6%A5%AD&quot;&gt;關於研究所或就業 &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%97%9C%E6%96%BC%E7%A0%94%E7%A9%B6%E6%89%80%E6%88%96%E5%B0%B1%E6%A5%AD&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;應該很多人畢業之後都會考慮要不要繼續往研究所進修，或是乾脆地投入職場。雖然我在校內也看過許多不假思索、二話不說就直接推甄研究所的人，你問他日後要往哪個領域走，選這個領域跟你日後職涯規劃有什麼關聯，他可能也回答不出所以然，不過我還是鼓勵大家在校時期多發掘自己的興趣。&lt;/p&gt;
&lt;p&gt;瞭解自己的興趣，你才能更加具體去考量自己的職涯規劃。&lt;br&gt;
如果想做&lt;strong&gt;演算法&lt;/strong&gt;或&lt;strong&gt;圖學&lt;/strong&gt;等偏重理論的領域，那當然要唸研究所。但如果你是想要走強調業界實務應用的領域，像是網頁工程師好了，那就要想一想是要做&lt;strong&gt;應用系統研究&lt;/strong&gt;、&lt;strong&gt;使用者經驗&lt;/strong&gt;還是別的什麼相關領域，才能對你的職涯規劃有幫助。&lt;/p&gt;
&lt;p&gt;事實上，我看到的學長姐還是有很大部分畢業之後的職位與在校研究領域完全無關的，晉升台積電、聯發科等等電子大廠居多。當然，我一點也不否定向錢看齊的想法，只是如此一來相當於在研究所的經驗變成一種純粹的職前訓練，訓練吸收知識跟解決問題的邏輯能力，但你的研究本身卻不見得能幫助掌握日後工作的相關技術，這是比較可惜的一點。&lt;/p&gt;
&lt;p&gt;另外作為應屆畢業生，我也驗證一下&lt;strong&gt;校內推甄資工所要成績30%會不會上&lt;/strong&gt;這個說法，答案是&lt;strong&gt;不一定&lt;/strong&gt;，3X% 落榜的大有人在，而更加具體來說：&lt;strong&gt;更加注重業外表現&lt;/strong&gt;，只有成績達標是有些勉強的。&lt;/p&gt;
&lt;h2 id=&quot;%E9%97%9C%E6%96%BC%E8%87%AA%E5%AD%B8%E8%83%BD%E5%8A%9B%E4%BB%A5%E5%8F%8A%E8%88%88%E8%B6%A3&quot;&gt;關於自學能力以及興趣 &lt;a class=&quot;direct-link&quot; href=&quot;#%E9%97%9C%E6%96%BC%E8%87%AA%E5%AD%B8%E8%83%BD%E5%8A%9B%E4%BB%A5%E5%8F%8A%E8%88%88%E8%B6%A3&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.ptt.cc/bbs/Soft_Job/M.1507876000.A.433.html&quot;&gt;[請益] 該不該往資工走下去...&lt;/a&gt;  這篇文章中樓主自己提到覺得自學能力差，不適合往資工領域發展，我認為更加精確的說法是：&lt;strong&gt;自主學習程式語言差&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;無論就讀研究所或是直接就業，求財求生存的能力都跟你該領域的自學能力脫不了關係。這又回到了上面提到的興趣問題，如果在大學時期其實就能找到自己的興趣，並且在相關技術鑽研、做點 side project，我覺得是非常很有幫助的。也許你當時的興趣在日後無法學以致用，但以這份熱情去推動自身能力還是相當管用的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ku399999: 學得慢又如何 是不是真慢都不知道 人生是長跑 持續學習努力絕對強過一狗票人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文中網友 ku399999 這句話我也相當認同。自學這件事情不管是不是要走軟體業，都會一輩子跟著你。這不是難不難的問題，只是你願不願意花心力去適應而已。不怕做不好，先做再說吧！&lt;/p&gt;
&lt;p&gt;最後的最後，想記錄一句我最近也很喜歡的話。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;I&#39;m a slow walker, but I never walk backwards.&amp;quot; - Abragam Lincoln&lt;/p&gt;
&lt;/blockquote&gt;

		</content>
	</entry>
	
	<entry>
		<title>我在社群網路公司實習的日子</title>
		<link href="https://frannn.dev/posts/20d7c148/"/>
		<updated>2017-09-24T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/20d7c148/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今年四月，我投遞出人生的第一份履歷。&lt;/p&gt;
&lt;p&gt;我使用該公司的社群網路服務已有近七年之久，於是當他們釋出前端工程師的實習職位，考慮不過半天、回過神來我已將履歷投至對方信箱——也很幸運地，在經過篩選與面試後，我獲得了暑期實習的合作機會。&lt;/p&gt;
&lt;p&gt;經過一段時間沈澱之後，我想我是該好好寫篇文章，分享我在短短兩個月的實習過程之中的所見所學。&lt;/p&gt;
&lt;h2 id=&quot;%E6%83%B3%E5%83%8F%E8%88%87%E7%8F%BE%E5%AF%A6&quot;&gt;想像與現實 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%83%B3%E5%83%8F%E8%88%87%E7%8F%BE%E5%AF%A6&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我所期望的實習型態是圍繞著特定專案的核心概念，再以實踐專案中的每個功能、使用者經驗優化為目標，去摸索與學習。&lt;/p&gt;
&lt;p&gt;學生時代比較多是個人專案的獨立作業，專案規模較小型、缺乏有制度的組織規劃，所以希望能在實習期間更加瞭解或是涉身經歷這些大型專案的開發流程，增加大型專案前後端的合作經驗。技術層面則希望能先紮穩原生 JavaScript 的觀念再學習 Webpack、ES6 或其他現代框架，以理解背後目的和提升品質為前提去精進自我能力。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上是我在實習前對工作型態的期許，然而在面試時前輩也跟我大致做了說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新技術如 Webpack / ES6 等等，公司在三年內大概都不會考慮投入專案
&lt;ul&gt;
&lt;li&gt;考量瀏覽器相容性問題&lt;/li&gt;
&lt;li&gt;團隊人力不足以兼顧專案的重構與維護&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;撇開新技術不談，由於公司的專案已發展九年之久，可能會遇到以下情形
&lt;ul&gt;
&lt;li&gt;開發初期不是非常注重 software engineering principles，導致專案結構有些鬆散&lt;/li&gt;
&lt;li&gt;當然也有些 legacy code 和稀泥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;公司在這段實習期間可以提供
&lt;ul&gt;
&lt;li&gt;前端部分今年初做了許多 refactoring，可以給予 follow up / study&lt;/li&gt;
&lt;li&gt;能直接投入大型專案的開發流程，累積經驗與學習&lt;/li&gt;
&lt;li&gt;由於從事社群網路服務，公司與用戶間的交流相當直接開放，團隊也對於使用者經驗也有扎實的心得&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E6%AD%A3%E5%BC%8F%E4%B8%8A%E8%B7%AF&quot;&gt;正式上路 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%AD%A3%E5%BC%8F%E4%B8%8A%E8%B7%AF&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我所負責的工作內容是與團隊中另一位後端實習工程師，一同開發 &lt;strong&gt;Bookmark feature&lt;/strong&gt;，也就是讓使用者可以自由儲存他感興趣的 post 內容，提供更加便利的方式以再次瀏覽，同時也必須整合原有的專案結構去增加新 UI 、加入整個新功能。&lt;/p&gt;
&lt;p&gt;實習初期主要花了一些時間去瞭解網站的專案架構，有些頭緒後才開始涉身投入開發過程。&lt;/p&gt;
&lt;h4 id=&quot;%E6%8E%A5%E8%A7%B8%E7%9A%84%E6%96%B0%E4%BA%8B%E7%89%A9&quot;&gt;接觸的新事物 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%8E%A5%E8%A7%B8%E7%9A%84%E6%96%B0%E4%BA%8B%E7%89%A9&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;MVC 架構
&lt;ul&gt;
&lt;li&gt;Mako&lt;br&gt;
Python 模板&lt;/li&gt;
&lt;li&gt;LESS&lt;br&gt;
CSS 預處理器（寫過 SASS 所以上手很快）&lt;/li&gt;
&lt;li&gt;Handlebars.js&lt;br&gt;
JavaScript 模板引擎&lt;/li&gt;
&lt;li&gt;RESTful API&lt;br&gt;
與後端工程師溝通、分工合作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Git&lt;br&gt;
雖用過 github 此類遠端儲存庫，然而在這之前並沒有多人開發的版本控制經驗&lt;br&gt;
有些情況下可以下一些特別的 git 指令，只能說真的沒用過不會知道啊XD&lt;/li&gt;
&lt;li&gt;i18n&lt;br&gt;
作為一個國際化的社群網站，多國語言翻譯是一定要的啦&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E6%80%9D%E6%83%B3%E8%A1%9D%E6%93%8A&quot;&gt;思想衝擊 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%80%9D%E6%83%B3%E8%A1%9D%E6%93%8A&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;作為一個新鮮人，在實際投入業界以後，我開始對於過去在學校的所見所聞有了更加深刻的體會，同時也接收了一些未曾想過的開發新觀點。&lt;/p&gt;
&lt;h4 id=&quot;%E5%BE%9E%E4%BD%9C%E6%A5%AD%E5%88%B0%E7%94%A2%E5%93%81&quot;&gt;從作業到產品 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BE%9E%E4%BD%9C%E6%A5%AD%E5%88%B0%E7%94%A2%E5%93%81&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;在校作業往往有明確的要求與規範，然而實際開發新產品、新功能時，一切都從零開始。&lt;/p&gt;
&lt;p&gt;成為開發者的同時，讓我比以前更加在意程式效能。雖然我不是後端、不負責資料庫的架構設計，但是掌握過去所學的核心科目（資料結構、演算法），確實對於寫好程式碼有極大幫助，至少會養成習慣去分析並且選擇最佳解決方法。&lt;/p&gt;
&lt;p&gt;僅僅是功能寫好是遠遠不夠的，其中一個感受深刻的部分是&lt;strong&gt;資訊安全層面&lt;/strong&gt;的考量，這次開發新功能我也對 CSRF、XSS 等攻擊手法做了不少功課，這些也都是在校時期較少接觸的部分。&lt;/p&gt;
&lt;h4 id=&quot;%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E6%9E%B6%E6%A7%8B%E5%8F%AF%E8%AE%80%E6%80%A7&quot;&gt;提高程式碼的架構可讀性 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E6%9E%B6%E6%A7%8B%E5%8F%AF%E8%AE%80%E6%80%A7&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;實習之中隨著元件越加越多，程式碼也被我越改越亂，當我意識到的同時已然變成了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Spaghetti_code&quot;&gt;Spaghetti code&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;只好捧著程式碼去向前輩討教，也好好重新檢視了自己的 coding style——主要是疏於注意重複性程式碼，導致寫出維護性與可讀性不佳的程式碼。在撰寫起初也許不認為這段 code 包成 function 會有多大的效益，但是隨著程式越改越長，如果能好好管理、組織程式結構，積少成多下來會帶來可觀的影響。&lt;/p&gt;
&lt;h4 id=&quot;%E6%89%93%E9%80%A0%E6%9C%80%E4%BD%B3%E7%9A%84%E4%BD%BF%E7%94%A8%E8%80%85%E9%AB%94%E9%A9%97&quot;&gt;打造最佳的使用者體驗 &lt;a class=&quot;direct-link&quot; href=&quot;#%E6%89%93%E9%80%A0%E6%9C%80%E4%BD%B3%E7%9A%84%E4%BD%BF%E7%94%A8%E8%80%85%E9%AB%94%E9%A9%97&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;就如同前面所說的，僅僅是功能寫好是遠遠不夠的，尤其前端工程師必須扛起整個網頁與使用者互動的門面，也開始讓我更常思考——要怎麼樣設計界面和規劃每個元件的事件，才能讓使用者容易上手、便於使用。我想這個部分我還需要多加琢磨。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BE%8C%E8%A8%98&quot;&gt;後記 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BE%8C%E8%A8%98&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Tell me and I forget, Teach me and I remember, Involve me and I learn.&amp;quot; - Benjamin Franklin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;這段話可作為我這段日子以來的最佳寫照。兩個月的實習過得比想像中快，我也學到超乎原先預期的東西和觀念。&lt;/p&gt;
&lt;p&gt;同時我也有感於一天只有二十四小時真的好不夠，開始工作的每一天，往往覺得自己越是學習越是不足，還有好多新事物在等著我去探索，也是和這個部落格的標題有所呼應吧。&lt;/p&gt;
&lt;p&gt;最後很幸運地，原先團隊並沒有打算招收新的正職工程師，然而在這段期間經過公司的評估後，卻開給了我正職&lt;strong&gt;前端工程師&lt;/strong&gt;的 offer。很高興獲得團隊的肯定，期許自己能在工作過程中學習更多，未來我也會好好全力以赴。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>什麼是 SSH？設定 Sublime 同步遠端檔案</title>
		<link href="https://frannn.dev/posts/3b1c3cbc/"/>
		<updated>2017-08-23T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/3b1c3cbc/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在開始介紹 SFTP 以前，我們要先聊聊 &lt;strong&gt;SSH (Secure Shell)&lt;/strong&gt; 協定。沒聽過 SSH 嗎？&lt;/p&gt;
&lt;p&gt;那你或許有聽過 &lt;strong&gt;Telnet&lt;/strong&gt;，沒錯！就是廣大鄉民們平常用來上 PTT 的連線協定。&lt;br&gt;
Telnet 易用，速度又快，只要執行 Telnet 程式來連線到遠端伺服器，使用者輸入帳密後便可以遠端控制主機。&lt;/p&gt;
&lt;p&gt;但是由於 Telnet 傳輸的資料並未加密，所以容易遭到竊取，後來 SSH 橫空出世，SSH 預設是以金鑰為基礎來驗證及加密傳輸，也可以省去輸入帳號密碼的步驟，大家也就多改用較為安全的 SSH。&lt;/p&gt;
&lt;h2 id=&quot;ssh%EF%BC%88secure-shell%EF%BC%89&quot;&gt;SSH（Secure Shell） &lt;a class=&quot;direct-link&quot; href=&quot;#ssh%EF%BC%88secure-shell%EF%BC%89&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接下來我們進一步介紹 SSH 協定的運作原理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;靠加密編碼的演算法，產生一組很長又混亂的字串及檔案&lt;/li&gt;
&lt;li&gt;這組資料分別為&lt;strong&gt;私鑰 (private key)&lt;/strong&gt; 與&lt;strong&gt;公鑰 (public key)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;接著&lt;strong&gt;將公鑰傳至想要可以免帳號密碼登入的主機上&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;登入主機進行驗證後，主機就會認為你是經過驗證的使用者，就可以登入囉。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E5%9C%A8-osx-%E8%88%87-linux-%E7%92%B0%E5%A2%83%E4%B8%8B%E7%94%A2%E7%94%9F-ssh-key&quot;&gt;在 OSX 與 Linux 環境下產生 SSH key &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%9C%A8-osx-%E8%88%87-linux-%E7%92%B0%E5%A2%83%E4%B8%8B%E7%94%A2%E7%94%9F-ssh-key&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;由於 OS X 跟 Linux 都是 Unix-Like 系統，所以產生的方式都一樣。&lt;br&gt;
步驟如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用內建的終端機&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh-keygen&lt;/code&gt; 建立 ssh key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls -al&lt;/code&gt; 會看到生成了兩個檔案：&lt;code&gt;id_rsa.pub&lt;/code&gt; &lt;code&gt;id_rsa&lt;/code&gt;&lt;br&gt;
也就是你所持有的公鑰與私鑰&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;id_rsa.pub&lt;/code&gt; 的內容加入 server 端的 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;建立連線 &lt;code&gt;ssh USER@SSH_SERVER&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E5%9C%A8-windows-%E7%92%B0%E5%A2%83%E4%B8%8B%E7%94%A2%E7%94%9F-ssh-key&quot;&gt;在 Windows 環境下產生 SSH key &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%9C%A8-windows-%E7%92%B0%E5%A2%83%E4%B8%8B%E7%94%A2%E7%94%9F-ssh-key&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 Windows 中有兩種類型的程式可以支援 SSH：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OpenSSH&lt;/strong&gt; - 安裝完 git 會自動安裝&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PuTTY&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;strong&gt;OpenSSH&lt;/strong&gt; 的步驟如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 PowerShell&lt;/li&gt;
&lt;li&gt;安裝 git 會順便安裝 OpenSSH&lt;/li&gt;
&lt;li&gt;先建立 .ssh 的資料夾&lt;br&gt;
通常安裝 git 的時候在產生 github_rsa 的時候就已經建好了&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh-keygen&lt;/code&gt; 建立 ssh key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt; 會看到生成了兩個檔案：&lt;code&gt;id_rsa.pub&lt;/code&gt; &lt;code&gt;id_rsa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;id_rsa.pub&lt;/code&gt; 的內容加入 server 端的 &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;建立連線 &lt;code&gt;ssh USER@SSH_SERVER&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;雖然可以順利的手動連線，但是很遺憾的，&lt;strong&gt;OpenSSH&lt;/strong&gt; 的公鑰/私鑰的格式和 Linux 環境之下是不同的，由於我們之後還想要使用 &lt;strong&gt;SFTP&lt;/strong&gt;，為了避免在後續操作會導致 &lt;code&gt;Sublime SFTP Connection timeout&lt;/code&gt;，那就必須利用 &lt;strong&gt;puttygen.exe&lt;/strong&gt; 對公鑰/私鑰進行格式轉換。&lt;/p&gt;
&lt;p&gt;這樣做實在太麻煩了，不如我們就直接使用 &lt;strong&gt;puttygen.exe&lt;/strong&gt; 來生成金鑰吧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 PowerShell&lt;/li&gt;
&lt;li&gt;下載 &lt;strong&gt;puttygen.exe&lt;/strong&gt;，打開之後點選 Generate&lt;br&gt;
滑鼠在 key 區空白位置晃動，可加快生成隨機數&lt;/li&gt;
&lt;li&gt;在 key comment 填寫備註&lt;/li&gt;
&lt;li&gt;在 key passphras 填寫 key 的密碼，如同前面步驟，也可以選擇不設置&lt;/li&gt;
&lt;li&gt;把上方框框中的內容，也就是公鑰複製到 server 端的 &lt;code&gt;/.ssh/authorized_keys&lt;/code&gt; 之中&lt;/li&gt;
&lt;li&gt;點擊 puttygen.exe 中的 Save private key，保存私鑰 &lt;strong&gt;id_rsa.ppk&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;建立連線 &lt;code&gt;ssh USER@SSH_SERVER&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E4%BD%BF%E7%94%A8-sublime-sftp-%E5%90%8C%E6%AD%A5%E6%AA%94%E6%A1%88&quot;&gt;使用 Sublime SFTP 同步檔案 &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BD%BF%E7%94%A8-sublime-sftp-%E5%90%8C%E6%AD%A5%E6%AA%94%E6%A1%88&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;註：本文撰寫於 2017/08，我後來跳槽使用 VSCode。&lt;br&gt;
官方直接支援 SSH 連線到伺服器進行開發，我認為方便多了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;來到本文的正題，也就是如何在 &lt;a href=&quot;https://www.sublimetext.com/3&quot;&gt;Sublime Text3&lt;/a&gt; 上借助 &lt;a href=&quot;https://wbond.net/sublime_packages/sftp&quot;&gt;SFTP&lt;/a&gt; 這個套件來幫助我們更加快速與便利地去建立 SSH 連線和管理檔案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安裝 SFTP&lt;/strong&gt;&lt;br&gt;
如同其他套件，利用 &lt;code&gt;package control install package&lt;/code&gt; 輸入 &lt;code&gt;sftp&lt;/code&gt; 後就會自動下載&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置文件&lt;/strong&gt;&lt;br&gt;
在第一次執行之前，我們必須設定配置文件 &lt;code&gt;sftp-sonfig.json&lt;/code&gt;&lt;br&gt;
簡單介紹幾個選項&lt;/li&gt;
&lt;li&gt;連線設定
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; 有 sftp, ftp, ftps 等連線可選，在這裡我們選擇 &lt;code&gt;sftp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt; SSH_SERVER&lt;/li&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt; USER&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt; 預設沒有使用的話，註解就好&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt; 沒有指定的話，註解就好&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh_key_file&lt;/code&gt; 在 windows 環境中，設定成剛才儲存的 &lt;strong&gt;id_rsa.ppk&lt;/strong&gt; 的路徑，&lt;br&gt;
例如 &lt;code&gt;&amp;quot;C:\/Users\/username\/.ssh\/id_rsa.ppk&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步設定
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;save_before_upload&lt;/code&gt; 上傳前，local 自動存檔&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sync_down_on_open&lt;/code&gt; local 開啟檔案時，自動從遠端同步（保留 local 原 code）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sync_skip_deletes&lt;/code&gt; 同步時，跳過刪除的檔案&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sync_same_age&lt;/code&gt; 時間戳相同的檔案一併同步&lt;/li&gt;
&lt;li&gt;&lt;code&gt;confirm_downloads&lt;/code&gt; 下載時不要詢問&lt;/li&gt;
&lt;li&gt;&lt;code&gt;confirm_sync&lt;/code&gt; 同步時不要詢問&lt;/li&gt;
&lt;li&gt;&lt;code&gt;confirm_overwrite_newer&lt;/code&gt; 覆寫時不要詢問&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步檔案
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;remote_path&lt;/code&gt; 遠端同步的資料夾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ignore_regexes&lt;/code&gt; 同步資料夾下忽略的檔案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;進行連線&lt;/strong&gt;&lt;br&gt;
儲存配置文件後，即可在目錄按下滑鼠右鍵直接操作&lt;br&gt;
&lt;img src=&quot;http://i.imgur.com/6iF3MY7.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;參考資料 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.itist.tw/2015/03/login-ssh-server-without-username-and-password.html&quot;&gt;別讓 MIS 不開心，免密碼直接登入遠端的 SSH Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kknews.cc/other/y8k2a2k.html&quot;&gt;SublimeText3中使用SFTP編輯遠程伺服器文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

		</content>
	</entry>
	
	<entry>
		<title>淺談 Polling, Comet, Websocket</title>
		<link href="https://frannn.dev/posts/2b10bcfa/"/>
		<updated>2017-07-31T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/2b10bcfa/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;現在需要做即時回應與更新的網站已是愈來愈多，大至 Facebook、Twitter，小至即時聊天室的實作等等，在以前使用者只能靠著重新載入網頁才能獲得最新的資訊，但是這樣不但很浪費時間，也會佔用很多不必要的網路資源，並不是一個好的方式。&lt;/p&gt;
&lt;p&gt;現在要實作這樣的功能，當然不能不知道一些&lt;strong&gt;網路推播技術 Internet Push technology&lt;/strong&gt;——對這個名詞很陌生嗎？讓我們來看看&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF&quot;&gt;維基百科&lt;/a&gt;的說明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;推播技術&lt;/strong&gt;，是一種基於 Internet 通訊方式的伺服器推播，其中要求通訊的請求是由發布者或中央伺服器發起。與 pull/get 形成對比，資訊傳輸的相應一般由接收者或用戶端發起。&lt;br&gt;
推動服務通常是基於提前的資訊預設定上。也就是所謂的 publish/subscribe 模型，客戶通過訂閱由伺服器提供各種資訊的頻道，不論何時都可以在其中一個頻道得到新的內容，同樣伺服器通過推播把資訊傳遞給相應的用戶端。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;polling-%E8%BC%AA%E8%A9%A2&quot;&gt;Polling 輪詢 &lt;a class=&quot;direct-link&quot; href=&quot;#polling-%E8%BC%AA%E8%A9%A2&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;先來談談傳統的 &lt;strong&gt;Polling 輪詢技術&lt;/strong&gt;，基本上原理很簡單，就是每隔一段固定時間就自動送出 Request 給伺服器，去跟伺服器要資料就對了！&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;   &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;      $&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Do something to update your view&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&quot;token comment&quot;&gt;// Setup the next poll recursively&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token function&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;它有以下幾個特點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容易實作&lt;/li&gt;
&lt;li&gt;沒有跨瀏覽器的問題&lt;/li&gt;
&lt;li&gt;不需要特殊伺服器做配合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但也有致命的缺點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;沒效率&lt;/li&gt;
&lt;li&gt;浪費頻寬&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這個做法是最老舊的方式，如果你已經事先知道伺服器上資料更新的頻率或時間，那麼也許用這樣的方式去做資料的同步更新。&lt;br&gt;
但現在許多的網頁應用程式上並不是這樣，你通常不會知道伺服器上的資料何時會更新，在伺服器沒有新資料時，瀏覽器如果也送出 Request，就會造成浪費網路資源的狀況。而 Comet 的出現解決了 Polling 這樣的弊端。&lt;/p&gt;
&lt;h2 id=&quot;comet&quot;&gt;Comet &lt;a class=&quot;direct-link&quot; href=&quot;#comet&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Comet&lt;/strong&gt; 在英文中也就是彗星的意思，顧名思義發出的 Request 會像彗星的尾巴般，將 Request 拉長，讓伺服器可以想傳資料就傳，不需要等客戶端先送請求伺服器再回傳，&lt;strong&gt;讓伺服器實時地將更新的資訊傳送到用戶端&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Comet 原先的精神是發出 Request 後不馬上結束，但這種做法卻引申出另一個問題那就是他會把傳統的 Web 伺服器（例如 Apache）的連線給佔住。所以 Comet 的技術得配合 &lt;strong&gt;Non-Blocking IO&lt;/strong&gt; 的 Web 伺服器才能非同步處理。&lt;/p&gt;
&lt;p&gt;後來發展出改良式的 Comet，伺服器會發一個長時間等待的 Request、當伺服器有資料 Response 時立刻斷掉、接著再發一個新的 Request。&lt;/p&gt;
&lt;p&gt;這種改良式的 Comet 主要有兩種實作方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Long Polling 長時間輪詢&lt;/strong&gt;&lt;br&gt;
Long Polling 的原理是瀏覽器發出一個 Request，而伺服器讓這個 Request 持續開啟一段時間，若在這時間間隔內伺服器有資料就會回傳給客戶端，如果沒有則超時後伺服器會關上 Request。瀏覽器收到回應後，才會再重新發出一個 Request。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/bijGnVj.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;與 Polling 的不同之處就在於它是比較有效率的、可以等到 timeout 或拿到資料時再重新發、因此減少不必要的流量浪費。但是，這種情況下當傳送的訊息相當龐大時，可能會造成傳送不完全，使得控制失靈。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Streaming 串流&lt;/strong&gt;&lt;br&gt;
Streaming 的原理則是讓伺服器與客戶端建立起一條持續的連線，為了使連線不中斷，伺服器每隔一段時間會發送 Response 給客戶端，確保連線不中斷，在 Streaming 中使用隱藏的 &lt;strong&gt;iframe tag&lt;/strong&gt;，伺服器將資料傳入 iframe，交給其中的 javascript 去執行頁面的更新。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/GzYQEuM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用 Streaming 有一些缺點，由於他是建立在 HTTP 協定上的一種傳輸機制，訊息會被包裝起來，所以可能會因為 &lt;strong&gt;代理伺服器（proxy）&lt;/strong&gt; 或 &lt;strong&gt;防火牆（firewall）&lt;/strong&gt; 將其中的資料存放在 &lt;strong&gt;緩衝區 （Buffer）&lt;/strong&gt; 中，造成傳送上的延遲，因此許多使用串流的 Comet 實作會在偵測到有代理伺服器的狀況時，改用長時間輪詢的方式處理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/t6HiEi8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;瞭解 Comet 的原理後，我們其實可以發現 Comet 的最大瓶頸在於控制連線生命週期上需要反覆發出請求，而導致效能會較差，然而 &lt;strong&gt;WebSocket&lt;/strong&gt; 的出現卻解決了這個問題，讓效能不會卡在連線生命週期，增強了資料傳輸的效率。&lt;/p&gt;
&lt;h2 id=&quot;websocket&quot;&gt;WebSocket &lt;a class=&quot;direct-link&quot; href=&quot;#websocket&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;WebSocket&lt;/strong&gt; 是定義在 HTML5 標準中的一個新的網頁傳輸方式，可在一條連線上提供&lt;strong&gt;全雙工、雙向的資料傳輸&lt;/strong&gt;。在這樣的標準下你可以很容易實作一個兼具可擴充性與即時性的網頁應用程式。&lt;/p&gt;
&lt;p&gt;同時因為 WebSocket 提供瀏覽器一個 &lt;strong&gt;原生（native）&lt;/strong&gt; 的 socket，所以直接解決了 Comet 架構很容易出錯的問題，而在整個架構的複雜度上也會比傳統的做法簡單很多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.ruanyifeng.com/blogimg/asset/2017/bg2017051502.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;簡單來說就是利用了新的協定建立了雙向的通道：當通道建立起來之後，Browser 可以隨時丟訊息給 Server、Server 可以隨時丟訊息給瀏覽器。唯一的小缺點就是可能有一些瀏覽器相容性的問題必須要解決，IE10 以前的版本並不支援。&lt;/p&gt;
&lt;p&gt;在使用前，需要建立一個 WebSocket 物件。&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ws &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ws://server&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;ws&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello WebSocket.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;WebSocket 可以選擇 &lt;strong&gt;ws&lt;/strong&gt; 或是 &lt;strong&gt;wss&lt;/strong&gt; 通訊協定。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ws 就相當於一般的 http&lt;/li&gt;
&lt;li&gt;wss 則相當於 https，需要伺服器可以支援&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作上十分單純，以 &lt;code&gt;send()&lt;/code&gt; 送出訊息，而以 &lt;code&gt;onmessage&lt;/code&gt; 事件接收訊息。&lt;br&gt;
呼叫 &lt;code&gt;close()&lt;/code&gt; 即可結束連線。這中間無法改變通訊的 url。&lt;/p&gt;
&lt;p&gt;比起前端的使用操作，在後端、伺服器上實作 WebSocket Protocol 倒是複雜多了。這部分就不多贅述。&lt;/p&gt;
&lt;p&gt;總而言之，透過 WebSocket 建立永久連線，這種開放式連線可以讓客戶端和伺服器端之間隨時雙向交換資料，因此可降低延遲時間，改善資源使用效率，必定會是未來的潮流和趨勢。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>HTML5 的資料屬性 (data-* attribute)</title>
		<link href="https://frannn.dev/posts/2bb3134/"/>
		<updated>2017-07-08T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/2bb3134/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;常常在 html 之中看到形如 &lt;code&gt;data-* attribute &lt;/code&gt; 的資料屬性，以下面這段程式碼為例：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;controls&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;  &lt;span class=&quot;token attr-name&quot;&gt;data-uid&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;${session_user.id}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;like_post&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;s_${post.favorite}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;do pif-like&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-function&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;like&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;${_(&quot;like&quot;)}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;undo pif-like&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-function&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;unlike&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;${_(&quot;unlike&quot;)}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這段程式碼之中，有的元素被賦予了 &lt;code&gt;data-uid&lt;/code&gt; 的屬性，有的則是被賦予了 &lt;code&gt;data-function&lt;/code&gt; 的屬性。&lt;/p&gt;
&lt;p&gt;然而如果你直接 google  &lt;code&gt;data-uid&lt;/code&gt; 或是 &lt;code&gt;data-function&lt;/code&gt; 卻也查不太到這個屬性，這到底是什麼？又有什麼意義或用途呢？&lt;/p&gt;
&lt;h2 id=&quot;html5-%E4%B8%AD%E7%9A%84-data-*-attribute&quot;&gt;HTML5 中的 data-* attribute &lt;a class=&quot;direct-link&quot; href=&quot;#html5-%E4%B8%AD%E7%9A%84-data-*-attribute&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;HTML5&lt;/strong&gt; 中的 &lt;strong&gt;&lt;code&gt;data-* attribute&lt;/code&gt;&lt;/strong&gt; 事實上是一種自定義的屬性，讓我們可以上所有 HTML 元素之中嵌入自定義的屬性，而之所以會有這個自定義屬性的出現，不只是為了方便 programer 能理解，同時最後也能再經由 JavaScript / jQuery 去存取。&lt;/p&gt;
&lt;p&gt;data-* attribute 屬性包含兩個部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;屬性名稱不能包含任何大寫字母，同時在前綴字 &lt;strong&gt;data-&lt;/strong&gt; 之後則必須至少要有一個字&lt;/li&gt;
&lt;li&gt;屬性值則可以是任何的字串&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由於這是一個自定義名稱，所以當我們想去 google  &lt;code&gt;data-uid&lt;/code&gt; 或是 &lt;code&gt;data-function&lt;/code&gt; 也就會找不到答案。&lt;/p&gt;
&lt;h2 id=&quot;%E5%88%A9%E7%94%A8-javascript-%E4%BE%86%E5%8F%96%E5%80%BC&quot;&gt;利用 JavaScript 來取值 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%A9%E7%94%A8-javascript-%E4%BE%86%E5%8F%96%E5%80%BC&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;當我們想取得 data-* attribute 的屬性值時，我們可以利用 JavaScript 的 &lt;code&gt;dataset&lt;/code&gt; 物件來存取。&lt;/p&gt;
&lt;p&gt;以前面的程式碼為例，假如我們想取得 &lt;code&gt;#like_post&lt;/code&gt; 之中的 &lt;code&gt;data-function&lt;/code&gt; ，可以寫成這樣：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ele &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;like_post&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; func &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ele&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dataset&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;function&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果考慮瀏覽器相容性，也可以利用 &lt;code&gt;getAttribute&lt;/code&gt; 去操作，然而速度與可讀性上還是 &lt;code&gt;dataset&lt;/code&gt; 較佳。&lt;/p&gt;
&lt;h2 id=&quot;%E5%88%A9%E7%94%A8-jquery-%E4%BE%86%E5%8F%96%E5%80%BC&quot;&gt;利用 jQuery 來取值 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%A9%E7%94%A8-jquery-%E4%BE%86%E5%8F%96%E5%80%BC&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;利用 jQuery 更是方便，使用內建的 &lt;code&gt;.data()&lt;/code&gt; 就能夠存取我們想要的屬性值了，能寫成這樣：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ele &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;like_post&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; func &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ele&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;function&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;是不是相當的方便呢？只要能善用 &lt;strong&gt;&lt;code&gt;data-* attribute &lt;/code&gt;&lt;/strong&gt; ，就能夠幫助我們更有效率地去存取這些值。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>Gulp 建立自己的自動化程序</title>
		<link href="https://frannn.dev/posts/c606cc8a/"/>
		<updated>2017-04-15T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/c606cc8a/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在進行網頁開發的時候，過程中可能有許多問題需要處理，以我的開發習慣來舉例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;編譯 SASS, Pug&lt;/li&gt;
&lt;li&gt;壓縮 &lt;code&gt;.css&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt; 或圖檔&lt;/li&gt;
&lt;li&gt;修改完成之後要不斷 F5 重整頁面&lt;/li&gt;
&lt;li&gt;諸如此類…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;雖然很多工具都可以完成各別的功能，但這樣在開發的過程中反而顯得相當沒效率，這時候我們就可以利用 &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt; 來協助我們建立自己的自動化程序。&lt;/p&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D%E5%85%A8%E5%9F%9F-gulp&quot;&gt;安裝全域 Gulp &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D%E5%85%A8%E5%9F%9F-gulp&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Gulp 是 Node.js 的套件，所以必須先安裝 Node.js 才可以安裝。&lt;/p&gt;
&lt;p&gt;檢查 npm 版本，3.0.2 以上才可順利安裝 Gulp&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; --version&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安裝全域 Gulp&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; gulp --global&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%AE%89%E8%A3%9D-gulp-%E5%A5%97%E4%BB%B6&quot;&gt;安裝 Gulp 套件 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%AE%89%E8%A3%9D-gulp-%E5%A5%97%E4%BB%B6&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先要進行專案初始化，在專案資料夾底下輸入&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安裝所要使用的套件，會產生一個 &lt;code&gt;node_modules&lt;/code&gt; 資料來存放所有套件&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; gulp gulp-sass gulp-pug gulp-uglify gulp-imagemin gulp-connect gulp-livereload -save-dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我個人常用的套件有下面這些：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gulp-sass：CSS preprocessor，內建 CSS 檔案壓縮&lt;/li&gt;
&lt;li&gt;gulp-pug：HTML 的模板，原名是 Jade&lt;/li&gt;
&lt;li&gt;gulp-uglify：JavaScript 混淆與檔案壓縮&lt;/li&gt;
&lt;li&gt;gulp-imagemin：自動壓縮圖檔，支援 PNG, JPEG, GIF 和 SVG&lt;/li&gt;
&lt;li&gt;gulp-connect：在本地建立起網頁伺服器&lt;/li&gt;
&lt;li&gt;gulp-livereload：以伺服器方式打開網頁，搭配 &lt;a href=&quot;https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei&quot;&gt;chrome 插件&lt;/a&gt;自動刷新頁面&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B&quot;&gt;資料夾結構 &lt;a class=&quot;direct-link&quot; href=&quot;#%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在使用 Gulp 時，資料夾結構會影響到 Gulp 配置檔（&lt;code&gt;gulpfile.js&lt;/code&gt;）的部分。&lt;/p&gt;
&lt;p&gt;以下是我的資料夾結構配置：&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;|- src/    #開發時的專案檔案資料夾&lt;br&gt;    |- images/&lt;br&gt;    |- index.js&lt;br&gt;    |- style.sass&lt;br&gt;    |- index.pug&lt;br&gt;|- dist/    #最終專案匯出的資料夾&lt;br&gt;    |- images/&lt;br&gt;    |- index.js&lt;br&gt;    |- style.css&lt;br&gt;    |- index.html&lt;br&gt;|- gulpfile.js&lt;br&gt;|- package.json&lt;br&gt;|- node_modules/&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%BB%BA%E7%AB%8B-gulpfile.js&quot;&gt;建立 gulpfile.js &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%BA%E7%AB%8B-gulpfile.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接下來在專案目錄下建立 &lt;code&gt;gulpfile.js&lt;/code&gt;，這裡就不贅述細節，直接附上程式碼。&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// import plugin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; gulp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    sass &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp-sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    pug &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp-pug&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    uglify &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    imagemin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp-imagemin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    connect &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp-connect&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    livereload &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;gulp-livereload&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// file paths&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stylePath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;src/*.sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dist&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; htmlPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;src/*.pug&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dist&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; scriptPath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;src/*.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dist&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; imagePath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;src/images/**&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;dist/images&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// default&lt;/span&gt;&lt;br&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;pug&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;images&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;server&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;watch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// gulp-connect&lt;/span&gt;&lt;br&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;server&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  connect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;livereload&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// gulp-sass&lt;/span&gt;&lt;br&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stylePath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// compile sass into CSS&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stylePath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;connect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// gulp-pug&lt;/span&gt;&lt;br&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;pug&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;htmlPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pug&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// compile pug into HTML&lt;/span&gt;&lt;br&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;pretty&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;htmlPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;connect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// gulp-uglify&lt;/span&gt;&lt;br&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scriptPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;uglify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// minify JavaScript&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scriptPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;connect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// gulp-imagemin  &lt;/span&gt;&lt;br&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;images&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imagePath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;imagemin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// minify images&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imagePath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token comment&quot;&gt;// watch&lt;/span&gt;&lt;br&gt;gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;watch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;htmlPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;pug&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stylePath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scriptPath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  gulp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;watch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;imagePath&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;images&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%9F%B7%E8%A1%8C-gulp&quot;&gt;執行 gulp &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%9F%B7%E8%A1%8C-gulp&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;輸入 &lt;code&gt;gulp&lt;/code&gt; 就可以開始執行我們的自動化流程了！&lt;/p&gt;
&lt;p&gt;每當有新專案時，只要複製前個專案的 &lt;code&gt;package.json&lt;/code&gt; 和 &lt;code&gt;gulpfile.js&lt;/code&gt; 再執行 &lt;code&gt;npm install&lt;/code&gt; 就可以了。&lt;/p&gt;
&lt;p&gt;我也把模板放上了 &lt;a href=&quot;https://github.com/frantw/GulpTemplate&quot;&gt;Github&lt;/a&gt;，日後也可以直接 fork 下來。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;參考資料 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/kejyuntw/gulp-learning-notes/details&quot;&gt;gulp 學習筆記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qq7886.gitbooks.io/gulp-beginner/content/&quot;&gt;Gulp 基礎入門 - 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.oxxostudio.tw/articles/201503/gulp-4-scss-sass.html&quot;&gt;Gulp 學習 - 建立 SCSS/SASS 編輯環境&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

		</content>
	</entry>
	
	<entry>
		<title>JSON &amp; AJAX 基本觀念與實作</title>
		<link href="https://frannn.dev/posts/6468559b/"/>
		<updated>2017-03-31T00:00:00-00:00</updated>
		<id>https://frannn.dev/posts/6468559b/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E8%A8%80&quot;&gt;前言 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E8%A8%80&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;之前在學校課程中實作資料庫內容的呈現時，是利用 PHP + MySQL 做資料的傳遞，然而在前後端分離的工作模式之中，只要前端從後端 API 那裡接到產出的資料，就可以直接執行頁面上的資料呈現與處理。&lt;/p&gt;
&lt;p&gt;本文所要實作的內容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建構 &lt;strong&gt;JSON data file&lt;/strong&gt; 存放預設資料&lt;/li&gt;
&lt;li&gt;透過 &lt;strong&gt;jQuery 語法 ( Ajax )&lt;/strong&gt; 讀取資料&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是說著重在前端接取資料並呈現的部分，不包含後端產生 JSON data file 的工作。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BB%80%E9%BA%BC%E6%98%AF-json&quot;&gt;什麼是 JSON &lt;a class=&quot;direct-link&quot; href=&quot;#%E4%BB%80%E9%BA%BC%E6%98%AF-json&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/N4d8OPG.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
&lt;strong&gt;JSON（JavaScript Object Notation）&lt;/strong&gt; 是一種輕量級的資料交換語言，後端透過資料庫整理成線上 JSON 格式 ，提供給前端使用，我們可以再經由 jQuery 去存取。&lt;/p&gt;
&lt;p&gt;JSON 支援的資料型態有 string, number, array, object 等等，主要的宣告與 Javascript 無異，只是有些細節要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名稱為字串，必須用成對雙引號 “” 包括&lt;/li&gt;
&lt;li&gt;值可以是雙引號包括的字串、數字、true、false、null、物件或者是陣列。&lt;/li&gt;
&lt;li&gt;不支援 JavaScript 的 Date、Error、規則表示式或函式表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%BB%BA%E7%AB%8B-json-data-file&quot;&gt;建立 JSON data file &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%BB%BA%E7%AB%8B-json-data-file&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;首先，我想建立一個存有餐廳名稱的物件陣列，可以每次自動讀取我喜歡的餐廳。&lt;br&gt;
所以我準備了一個 JSON 檔案&lt;code&gt;data.json&lt;/code&gt;，其內容如下：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;西堤牛排&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;欣葉日本料理&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;屯京拉麵&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;一番地壽喜燒&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;銀湯匙&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;原燒&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在我們開始著手讀取 JSON data file 之前，還有兩個不可不知的函數：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JSON.stringify()&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSON.parse()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;javascript-variable-to-json-string&quot;&gt;JavaScript variable to JSON string &lt;a class=&quot;direct-link&quot; href=&quot;#javascript-variable-to-json-string&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;利用 &lt;code&gt;JSON.stringify()&lt;/code&gt; 函數，我們可以把 JavaScript variable 轉換成 JSON 所表示的 string，範例如下：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rlist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;西堤牛排&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;欣葉日本料理&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;屯京拉麵&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;一番地壽喜燒&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;銀湯匙&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;原燒&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; jsonText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rlist&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; jsonText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// string&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;json-string-to-javascript-variable&quot;&gt;JSON string to JavaScript variable &lt;a class=&quot;direct-link&quot; href=&quot;#json-string-to-javascript-variable&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;利用 &lt;code&gt;JSON.parse()&lt;/code&gt; 函數，我們可以把 JSON string 轉換成 JavaScript 中可以運用的物件，範例如下：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; jsonText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;[{&quot;name&quot;:&quot;西堤牛排&quot;},{&quot;name&quot;:&quot;欣葉日本料理&quot;},{&quot;name&quot;:&quot;屯京拉麵&quot;},{&quot;name&quot;:&quot;一番地壽喜燒&quot;},{&quot;name&quot;:&quot;銀湯匙&quot;},{&quot;name&quot;:&quot;原燒&quot;}]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; rlist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jsonText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; rlist&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ajax-%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%BC%89%E5%85%A5%E6%8A%80%E8%A1%93&quot;&gt;Ajax 非同步載入技術 &lt;a class=&quot;direct-link&quot; href=&quot;#ajax-%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%BC%89%E5%85%A5%E6%8A%80%E8%A1%93&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;開始資料讀取之前，我們先瞭解一下大名鼎鼎的 Ajax 是什麼吧！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ajax 即「Asynchronous JavaScript and XML」（非同步的JavaScript與XML技術）&lt;/strong&gt;，基本上的核心概念就是&lt;strong&gt;追求提升使用者的體驗&lt;/strong&gt;，為了達成這個目的而有動態傳輸的做法。&lt;/p&gt;
&lt;p&gt;Ajax 最大的特色就是可以直接動態傳送、接收資料。相較之下，如果是傳統的網頁技術，Server 在接受指令之後，處理完成後還要再重新導向另一個頁面。&lt;/p&gt;
&lt;p&gt;除此之外也還有其他的好處：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提升使用者體驗，減少頁面跳轉時產生的落差&lt;/li&gt;
&lt;li&gt;節省網路流量，不傳送重複的版面資訊&lt;/li&gt;
&lt;li&gt;能達到跨平台、跨網域、跨瀏覽器互動的可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而 JSON 因小巧與瀏覽器內建快速解析支援，因此較適用於網路資料傳輸領域，是目前常應用在 Ajax 的資料傳輸格式。&lt;/p&gt;
&lt;h2 id=&quot;%E5%88%A9%E7%94%A8-ajax-%E8%AE%80%E5%8F%96%E8%B3%87%E6%96%99&quot;&gt;利用 Ajax 讀取資料 &lt;a class=&quot;direct-link&quot; href=&quot;#%E5%88%A9%E7%94%A8-ajax-%E8%AE%80%E5%8F%96%E8%B3%87%E6%96%99&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;接下來讓我們利用 &lt;code&gt;jQuery.ajax&lt;/code&gt; 來讀取放在 Json data file 中的資料，範例如下：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;$&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; dataurl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// &quot;data.json&quot;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;dataType&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    rlist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;    &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;token comment&quot;&gt;// 負責更新資料的 update function&lt;/span&gt;&lt;br&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$.ajax()&lt;/code&gt; 當中的參數說明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;url (String)：指定要進行呼叫的位址。&lt;/li&gt;
&lt;li&gt;dataType (String)：返回的資料類型 - xml, html, script, json, jsonp, text。&lt;br&gt;
不設定的話 jQuery 會幫你猜返回的內容格式是什麼。&lt;/li&gt;
&lt;li&gt;success：請求成功時執行函式。&lt;/li&gt;
&lt;li&gt;error：請求失敗時執行函式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;瞭解這些以後，基本上我們就可以利用後端 API 輸出的 JSON string 去處理並呈現網頁上的資料囉！&lt;/p&gt;

		</content>
	</entry>
</feed>
