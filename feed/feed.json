{
  "version": "https://jsonfeed.org/version/1",
  "title": "Fran",
  "home_page_url": "https://frannn.dev",
  "feed_url": "https://frannn.dev/feed/feed.json",
  "description": "一隻野生的前端工程師。相信每一行程式碼都是改變世界的力量。",
  "author": {
    "name": "Fran",
    "url": ""
  },
  "items": [{
      "id": "https://frannn.dev/posts/6468559b/",
      "url": "https://frannn.dev/posts/6468559b/",
      "title": "JSON &amp; AJAX 基本觀念與實作",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>之前在學校課程中實作資料庫內容的呈現時，是利用 PHP + MySQL 做資料的傳遞，然而在前後端分離的工作模式之中，只要前端從後端 API 那裡接到產出的資料，就可以直接執行頁面上的資料呈現與處理。</p>\n<p>本文所要實作的內容如下：</p>\n<ul>\n<li>建構 <strong>JSON data file</strong> 存放預設資料</li>\n<li>透過 <strong>jQuery 語法 ( Ajax )</strong> 讀取資料</li>\n</ul>\n<p>也就是說著重在前端接取資料並呈現的部分，不包含後端產生 JSON data file 的工作。</p>\n<h2 id=\"%E4%BB%80%E9%BA%BC%E6%98%AF-json\">什麼是 JSON <a class=\"direct-link\" href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-json\">#</a></h2>\n<p><img src=\"https://i.imgur.com/N4d8OPG.png\" alt=\"\"><br>\n<strong>JSON（JavaScript Object Notation）</strong> 是一種輕量級的資料交換語言，後端透過資料庫整理成線上 JSON 格式 ，提供給前端使用，我們可以再經由 jQuery 去存取。</p>\n<p>JSON 支援的資料型態有 string, number, array, object 等等，主要的宣告與 Javascript 無異，只是有些細節要注意：</p>\n<ul>\n<li>名稱為字串，必須用成對雙引號 “” 包括</li>\n<li>值可以是雙引號包括的字串、數字、true、false、null、物件或者是陣列。</li>\n<li>不支援 JavaScript 的 Date、Error、規則表示式或函式表示。</li>\n</ul>\n<h2 id=\"%E5%BB%BA%E7%AB%8B-json-data-file\">建立 JSON data file <a class=\"direct-link\" href=\"#%E5%BB%BA%E7%AB%8B-json-data-file\">#</a></h2>\n<p>首先，我想建立一個存有餐廳名稱的物件陣列，可以每次自動讀取我喜歡的餐廳。<br>\n所以我準備了一個 JSON 檔案<code>data.json</code>，其內容如下：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span> <br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"西堤牛排\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"欣葉日本料理\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"屯京拉麵\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"一番地壽喜燒\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"銀湯匙\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"原燒\"</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">]</span></code></pre>\n<p>在我們開始著手讀取 JSON data file 之前，還有兩個不可不知的函數：</p>\n<ul>\n<li><strong>JSON.stringify()</strong></li>\n<li><strong>JSON.parse()</strong></li>\n</ul>\n<h3 id=\"javascript-variable-to-json-string\">JavaScript variable to JSON string <a class=\"direct-link\" href=\"#javascript-variable-to-json-string\">#</a></h3>\n<p>利用 <code>JSON.stringify()</code> 函數，我們可以把 JavaScript variable 轉換成 JSON 所表示的 string，範例如下：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> rlist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"西堤牛排\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"欣葉日本料理\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"屯京拉麵\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"一番地壽喜燒\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"銀湯匙\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"原燒\"</span><span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">var</span> jsonText <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>rlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> jsonText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span></code></pre>\n<h3 id=\"json-string-to-javascript-variable\">JSON string to JavaScript variable <a class=\"direct-link\" href=\"#json-string-to-javascript-variable\">#</a></h3>\n<p>利用 <code>JSON.parse()</code> 函數，我們可以把 JSON string 轉換成 JavaScript 中可以運用的物件，範例如下：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jsonText <span class=\"token operator\">=</span> <span class=\"token string\">'[{\"name\":\"西堤牛排\"},{\"name\":\"欣葉日本料理\"},{\"name\":\"屯京拉麵\"},{\"name\":\"一番地壽喜燒\"},{\"name\":\"銀湯匙\"},{\"name\":\"原燒\"}]'</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">var</span> rlist <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jsonText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> rlist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// object</span></code></pre>\n<h2 id=\"ajax-%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%BC%89%E5%85%A5%E6%8A%80%E8%A1%93\">Ajax 非同步載入技術 <a class=\"direct-link\" href=\"#ajax-%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%BC%89%E5%85%A5%E6%8A%80%E8%A1%93\">#</a></h2>\n<p>開始資料讀取之前，我們先瞭解一下大名鼎鼎的 Ajax 是什麼吧！</p>\n<p><strong>Ajax 即「Asynchronous JavaScript and XML」（非同步的JavaScript與XML技術）</strong>，基本上的核心概念就是<strong>追求提升使用者的體驗</strong>，為了達成這個目的而有動態傳輸的做法。</p>\n<p>Ajax 最大的特色就是可以直接動態傳送、接收資料。相較之下，如果是傳統的網頁技術，Server 在接受指令之後，處理完成後還要再重新導向另一個頁面。</p>\n<p>除此之外也還有其他的好處：</p>\n<ul>\n<li>提升使用者體驗，減少頁面跳轉時產生的落差</li>\n<li>節省網路流量，不傳送重複的版面資訊</li>\n<li>能達到跨平台、跨網域、跨瀏覽器互動的可能</li>\n</ul>\n<p>而 JSON 因小巧與瀏覽器內建快速解析支援，因此較適用於網路資料傳輸領域，是目前常應用在 Ajax 的資料傳輸格式。</p>\n<h2 id=\"%E5%88%A9%E7%94%A8-ajax-%E8%AE%80%E5%8F%96%E8%B3%87%E6%96%99\">利用 Ajax 讀取資料 <a class=\"direct-link\" href=\"#%E5%88%A9%E7%94%A8-ajax-%E8%AE%80%E5%8F%96%E8%B3%87%E6%96%99\">#</a></h2>\n<p>接下來讓我們利用 <code>jQuery.ajax</code> 來讀取放在 Json data file 中的資料，範例如下：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> dataurl<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// \"data.json\"</span><br>  <span class=\"token literal-property property\">dataType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token function-variable function\">error</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    rlist <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span><br>    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 負責更新資料的 update function</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>$.ajax()</code> 當中的參數說明：</p>\n<ul>\n<li>url (String)：指定要進行呼叫的位址。</li>\n<li>dataType (String)：返回的資料類型 - xml, html, script, json, jsonp, text。<br>\n不設定的話 jQuery 會幫你猜返回的內容格式是什麼。</li>\n<li>success：請求成功時執行函式。</li>\n<li>error：請求失敗時執行函式。</li>\n</ul>\n<p>瞭解這些以後，基本上我們就可以利用後端 API 輸出的 JSON string 去處理並呈現網頁上的資料囉！</p>\n",
      "date_published": "2017-03-31T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/c606cc8a/",
      "url": "https://frannn.dev/posts/c606cc8a/",
      "title": "Gulp 建立自己的自動化程序",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>在進行網頁開發的時候，過程中可能有許多問題需要處理，以我的開發習慣來舉例：</p>\n<ul>\n<li>編譯 SASS, Pug</li>\n<li>壓縮 <code>.css</code>, <code>.js</code> 或圖檔</li>\n<li>修改完成之後要不斷 F5 重整頁面</li>\n<li>諸如此類…</li>\n</ul>\n<p>雖然很多工具都可以完成各別的功能，但這樣在開發的過程中反而顯得相當沒效率，這時候我們就可以利用 <a href=\"http://gulpjs.com/\">Gulp</a> 來協助我們建立自己的自動化程序。</p>\n<h2 id=\"%E5%AE%89%E8%A3%9D%E5%85%A8%E5%9F%9F-gulp\">安裝全域 Gulp <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D%E5%85%A8%E5%9F%9F-gulp\">#</a></h2>\n<p>Gulp 是 Node.js 的套件，所以必須先安裝 Node.js 才可以安裝。</p>\n<p>檢查 npm 版本，3.0.2 以上才可順利安裝 Gulp</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> --version</code></pre>\n<p>安裝全域 Gulp</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> gulp --global</code></pre>\n<h2 id=\"%E5%AE%89%E8%A3%9D-gulp-%E5%A5%97%E4%BB%B6\">安裝 Gulp 套件 <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-gulp-%E5%A5%97%E4%BB%B6\">#</a></h2>\n<p>首先要進行專案初始化，在專案資料夾底下輸入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init</code></pre>\n<p>安裝所要使用的套件，會產生一個 <code>node_modules</code> 資料來存放所有套件</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> gulp gulp-sass gulp-pug gulp-uglify gulp-imagemin gulp-connect gulp-livereload -save-dev</code></pre>\n<p>我個人常用的套件有下面這些：</p>\n<ul>\n<li>gulp-sass：CSS preprocessor，內建 CSS 檔案壓縮</li>\n<li>gulp-pug：HTML 的模板，原名是 Jade</li>\n<li>gulp-uglify：JavaScript 混淆與檔案壓縮</li>\n<li>gulp-imagemin：自動壓縮圖檔，支援 PNG, JPEG, GIF 和 SVG</li>\n<li>gulp-connect：在本地建立起網頁伺服器</li>\n<li>gulp-livereload：以伺服器方式打開網頁，搭配 <a href=\"https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei\">chrome 插件</a>自動刷新頁面</li>\n</ul>\n<h2 id=\"%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B\">資料夾結構 <a class=\"direct-link\" href=\"#%E8%B3%87%E6%96%99%E5%A4%BE%E7%B5%90%E6%A7%8B\">#</a></h2>\n<p>在使用 Gulp 時，資料夾結構會影響到 Gulp 配置檔（<code>gulpfile.js</code>）的部分。</p>\n<p>以下是我的資料夾結構配置：</p>\n<pre class=\"language-text\"><code class=\"language-text\">|- src/    #開發時的專案檔案資料夾<br>    |- images/<br>    |- index.js<br>    |- style.sass<br>    |- index.pug<br>|- dist/    #最終專案匯出的資料夾<br>    |- images/<br>    |- index.js<br>    |- style.css<br>    |- index.html<br>|- gulpfile.js<br>|- package.json<br>|- node_modules/</code></pre>\n<h2 id=\"%E5%BB%BA%E7%AB%8B-gulpfile.js\">建立 gulpfile.js <a class=\"direct-link\" href=\"#%E5%BB%BA%E7%AB%8B-gulpfile.js\">#</a></h2>\n<p>接下來在專案目錄下建立 <code>gulpfile.js</code>，這裡就不贅述細節，直接附上程式碼。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// import plugin</span><br><span class=\"token keyword\">var</span> gulp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    sass <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-sass'</span><span class=\"token punctuation\">)</span><br>    pug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-pug'</span><span class=\"token punctuation\">)</span><br>    uglify <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-uglify'</span><span class=\"token punctuation\">)</span><br>    imagemin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-imagemin'</span><span class=\"token punctuation\">)</span><br>    connect <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-connect'</span><span class=\"token punctuation\">)</span><br>    livereload <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gulp-livereload'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// file paths</span><br><span class=\"token keyword\">const</span> stylePath <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">src</span><span class=\"token operator\">:</span> <span class=\"token string\">'src/*.sass'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">dest</span><span class=\"token operator\">:</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> htmlPath <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">src</span><span class=\"token operator\">:</span> <span class=\"token string\">'src/*.pug'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">dest</span><span class=\"token operator\">:</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> scriptPath <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">src</span><span class=\"token operator\">:</span> <span class=\"token string\">'src/*.js'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">dest</span><span class=\"token operator\">:</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> imagePath <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">src</span><span class=\"token operator\">:</span> <span class=\"token string\">'src/images/**'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">dest</span><span class=\"token operator\">:</span> <span class=\"token string\">'dist/images'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// default</span><br>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sass'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'images'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'server'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'watch'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// gulp-connect</span><br>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  connect<span class=\"token punctuation\">.</span><span class=\"token function\">server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>    <span class=\"token literal-property property\">root</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span><br>    <span class=\"token literal-property property\">livereload</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// gulp-sass</span><br>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sass'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span>stylePath<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><br>          <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">sass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// compile sass into CSS</span><br>          <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span>stylePath<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>          <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>connect<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// gulp-pug</span><br>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pug'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span>htmlPath<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">pug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// compile pug into HTML</span><br>      <span class=\"token literal-property property\">pretty</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span>htmlPath<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>connect<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// gulp-uglify</span><br>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span>scriptPath<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">uglify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// minify JavaScript</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span>scriptPath<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>connect<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// gulp-imagemin  </span><br>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'images'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> gulp<span class=\"token punctuation\">.</span><span class=\"token function\">src</span><span class=\"token punctuation\">(</span>imagePath<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">imagemin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// minify images</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">dest</span><span class=\"token punctuation\">(</span>imagePath<span class=\"token punctuation\">.</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// watch</span><br>gulp<span class=\"token punctuation\">.</span><span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token string\">'watch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  gulp<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>htmlPath<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'pug'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  gulp<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>stylePath<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sass'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  gulp<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>scriptPath<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  gulp<span class=\"token punctuation\">.</span><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>imagePath<span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'images'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"%E5%9F%B7%E8%A1%8C-gulp\">執行 gulp <a class=\"direct-link\" href=\"#%E5%9F%B7%E8%A1%8C-gulp\">#</a></h2>\n<p>輸入 <code>gulp</code> 就可以開始執行我們的自動化流程了！</p>\n<p>每當有新專案時，只要複製前個專案的 <code>package.json</code> 和 <code>gulpfile.js</code> 再執行 <code>npm install</code> 就可以了。</p>\n<p>我也把模板放上了 <a href=\"https://github.com/frantw/GulpTemplate\">Github</a>，日後也可以直接 fork 下來。</p>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料 <a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a></h2>\n<ul>\n<li><a href=\"https://www.gitbook.com/book/kejyuntw/gulp-learning-notes/details\">gulp 學習筆記</a></li>\n<li><a href=\"https://qq7886.gitbooks.io/gulp-beginner/content/\">Gulp 基礎入門 - 2017</a></li>\n<li><a href=\"http://www.oxxostudio.tw/articles/201503/gulp-4-scss-sass.html\">Gulp 學習 - 建立 SCSS/SASS 編輯環境</a></li>\n</ul>\n",
      "date_published": "2017-04-15T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/2bb3134/",
      "url": "https://frannn.dev/posts/2bb3134/",
      "title": "HTML5 的資料屬性 (data-* attribute)",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>常常在 html 之中看到形如 <code>data-* attribute </code> 的資料屬性，以下面這段程式碼為例：</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>controls<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">data-uid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>${session_user.id}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>like_post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>s_${post.favorite}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">void</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>do pif-like<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-function</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>like<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>${_(\"like\")}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">void</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>undo pif-like<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-function</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>unlike<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>${_(\"unlike\")}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>這段程式碼之中，有的元素被賦予了 <code>data-uid</code> 的屬性，有的則是被賦予了 <code>data-function</code> 的屬性。</p>\n<p>然而如果你直接 google  <code>data-uid</code> 或是 <code>data-function</code> 卻也查不太到這個屬性，這到底是什麼？又有什麼意義或用途呢？</p>\n<h2 id=\"html5-%E4%B8%AD%E7%9A%84-data-*-attribute\">HTML5 中的 data-* attribute <a class=\"direct-link\" href=\"#html5-%E4%B8%AD%E7%9A%84-data-*-attribute\">#</a></h2>\n<p><strong>HTML5</strong> 中的 <strong><code>data-* attribute</code></strong> 事實上是一種自定義的屬性，讓我們可以上所有 HTML 元素之中嵌入自定義的屬性，而之所以會有這個自定義屬性的出現，不只是為了方便 programer 能理解，同時最後也能再經由 JavaScript / jQuery 去存取。</p>\n<p>data-* attribute 屬性包含兩個部分：</p>\n<ul>\n<li>屬性名稱不能包含任何大寫字母，同時在前綴字 <strong>data-</strong> 之後則必須至少要有一個字</li>\n<li>屬性值則可以是任何的字串</li>\n</ul>\n<p>由於這是一個自定義名稱，所以當我們想去 google  <code>data-uid</code> 或是 <code>data-function</code> 也就會找不到答案。</p>\n<h2 id=\"%E5%88%A9%E7%94%A8-javascript-%E4%BE%86%E5%8F%96%E5%80%BC\">利用 JavaScript 來取值 <a class=\"direct-link\" href=\"#%E5%88%A9%E7%94%A8-javascript-%E4%BE%86%E5%8F%96%E5%80%BC\">#</a></h2>\n<p>當我們想取得 data-* attribute 的屬性值時，我們可以利用 JavaScript 的 <code>dataset</code> 物件來存取。</p>\n<p>以前面的程式碼為例，假如我們想取得 <code>#like_post</code> 之中的 <code>data-function</code> ，可以寫成這樣：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ele <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'like_post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <br><span class=\"token keyword\">var</span> func <span class=\"token operator\">=</span> ele<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>function<span class=\"token punctuation\">;</span></code></pre>\n<p>如果考慮瀏覽器相容性，也可以利用 <code>getAttribute</code> 去操作，然而速度與可讀性上還是 <code>dataset</code> 較佳。</p>\n<h2 id=\"%E5%88%A9%E7%94%A8-jquery-%E4%BE%86%E5%8F%96%E5%80%BC\">利用 jQuery 來取值 <a class=\"direct-link\" href=\"#%E5%88%A9%E7%94%A8-jquery-%E4%BE%86%E5%8F%96%E5%80%BC\">#</a></h2>\n<p>利用 jQuery 更是方便，使用內建的 <code>.data()</code> 就能夠存取我們想要的屬性值了，能寫成這樣：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ele <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'like_post'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <br><span class=\"token keyword\">var</span> func <span class=\"token operator\">=</span> ele<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>是不是相當的方便呢？只要能善用 <strong><code>data-* attribute </code></strong> ，就能夠幫助我們更有效率地去存取這些值。</p>\n",
      "date_published": "2017-07-08T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/2b10bcfa/",
      "url": "https://frannn.dev/posts/2b10bcfa/",
      "title": "淺談 Polling, Comet, Websocket",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>現在需要做即時回應與更新的網站已是愈來愈多，大至 Facebook、Twitter，小至即時聊天室的實作等等，在以前使用者只能靠著重新載入網頁才能獲得最新的資訊，但是這樣不但很浪費時間，也會佔用很多不必要的網路資源，並不是一個好的方式。</p>\n<p>現在要實作這樣的功能，當然不能不知道一些<strong>網路推播技術 Internet Push technology</strong>——對這個名詞很陌生嗎？讓我們來看看<a href=\"https://zh.wikipedia.org/wiki/%E6%8E%A8%E9%80%81%E6%8A%80%E6%9C%AF\">維基百科</a>的說明：</p>\n<blockquote>\n<p><strong>推播技術</strong>，是一種基於 Internet 通訊方式的伺服器推播，其中要求通訊的請求是由發布者或中央伺服器發起。與 pull/get 形成對比，資訊傳輸的相應一般由接收者或用戶端發起。<br>\n推動服務通常是基於提前的資訊預設定上。也就是所謂的 publish/subscribe 模型，客戶通過訂閱由伺服器提供各種資訊的頻道，不論何時都可以在其中一個頻道得到新的內容，同樣伺服器通過推播把資訊傳遞給相應的用戶端。</p>\n</blockquote>\n<h2 id=\"polling-%E8%BC%AA%E8%A9%A2\">Polling 輪詢 <a class=\"direct-link\" href=\"#polling-%E8%BC%AA%E8%A9%A2\">#</a></h2>\n<p>先來談談傳統的 <strong>Polling 輪詢技術</strong>，基本上原理很簡單，就是每隔一段固定時間就自動送出 Request 給伺服器，去跟伺服器要資料就對了！</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>      $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"server\"</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// Do something to update your view</span><br><br>        <span class=\"token comment\">// Setup the next poll recursively</span><br>        <span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">dataType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>它有以下幾個特點：</p>\n<ul>\n<li>容易實作</li>\n<li>沒有跨瀏覽器的問題</li>\n<li>不需要特殊伺服器做配合</li>\n</ul>\n<p>但也有致命的缺點：</p>\n<ul>\n<li>沒效率</li>\n<li>浪費頻寬</li>\n</ul>\n<p>這個做法是最老舊的方式，如果你已經事先知道伺服器上資料更新的頻率或時間，那麼也許用這樣的方式去做資料的同步更新。<br>\n但現在許多的網頁應用程式上並不是這樣，你通常不會知道伺服器上的資料何時會更新，在伺服器沒有新資料時，瀏覽器如果也送出 Request，就會造成浪費網路資源的狀況。而 Comet 的出現解決了 Polling 這樣的弊端。</p>\n<h2 id=\"comet\">Comet <a class=\"direct-link\" href=\"#comet\">#</a></h2>\n<p><strong>Comet</strong> 在英文中也就是彗星的意思，顧名思義發出的 Request 會像彗星的尾巴般，將 Request 拉長，讓伺服器可以想傳資料就傳，不需要等客戶端先送請求伺服器再回傳，<strong>讓伺服器實時地將更新的資訊傳送到用戶端</strong>。</p>\n<p>Comet 原先的精神是發出 Request 後不馬上結束，但這種做法卻引申出另一個問題那就是他會把傳統的 Web 伺服器（例如 Apache）的連線給佔住。所以 Comet 的技術得配合 <strong>Non-Blocking IO</strong> 的 Web 伺服器才能非同步處理。</p>\n<p>後來發展出改良式的 Comet，伺服器會發一個長時間等待的 Request、當伺服器有資料 Response 時立刻斷掉、接著再發一個新的 Request。</p>\n<p>這種改良式的 Comet 主要有兩種實作方式：</p>\n<ul>\n<li>\n<p><strong>Long Polling 長時間輪詢</strong><br>\nLong Polling 的原理是瀏覽器發出一個 Request，而伺服器讓這個 Request 持續開啟一段時間，若在這時間間隔內伺服器有資料就會回傳給客戶端，如果沒有則超時後伺服器會關上 Request。瀏覽器收到回應後，才會再重新發出一個 Request。</p>\n<p><img src=\"https://i.imgur.com/bijGnVj.png\" alt=\"\"></p>\n<p>與 Polling 的不同之處就在於它是比較有效率的、可以等到 timeout 或拿到資料時再重新發、因此減少不必要的流量浪費。但是，這種情況下當傳送的訊息相當龐大時，可能會造成傳送不完全，使得控制失靈。</p>\n</li>\n<li>\n<p><strong>Streaming 串流</strong><br>\nStreaming 的原理則是讓伺服器與客戶端建立起一條持續的連線，為了使連線不中斷，伺服器每隔一段時間會發送 Response 給客戶端，確保連線不中斷，在 Streaming 中使用隱藏的 <strong>iframe tag</strong>，伺服器將資料傳入 iframe，交給其中的 javascript 去執行頁面的更新。</p>\n<p><img src=\"https://i.imgur.com/GzYQEuM.png\" alt=\"\"></p>\n<p>使用 Streaming 有一些缺點，由於他是建立在 HTTP 協定上的一種傳輸機制，訊息會被包裝起來，所以可能會因為 <strong>代理伺服器（proxy）</strong> 或 <strong>防火牆（firewall）</strong> 將其中的資料存放在 <strong>緩衝區 （Buffer）</strong> 中，造成傳送上的延遲，因此許多使用串流的 Comet 實作會在偵測到有代理伺服器的狀況時，改用長時間輪詢的方式處理。</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/t6HiEi8.png\" alt=\"\"></p>\n<p>瞭解 Comet 的原理後，我們其實可以發現 Comet 的最大瓶頸在於控制連線生命週期上需要反覆發出請求，而導致效能會較差，然而 <strong>WebSocket</strong> 的出現卻解決了這個問題，讓效能不會卡在連線生命週期，增強了資料傳輸的效率。</p>\n<h2 id=\"websocket\">WebSocket <a class=\"direct-link\" href=\"#websocket\">#</a></h2>\n<p><strong>WebSocket</strong> 是定義在 HTML5 標準中的一個新的網頁傳輸方式，可在一條連線上提供<strong>全雙工、雙向的資料傳輸</strong>。在這樣的標準下你可以很容易實作一個兼具可擴充性與即時性的網頁應用程式。</p>\n<p>同時因為 WebSocket 提供瀏覽器一個 <strong>原生（native）</strong> 的 socket，所以直接解決了 Comet 架構很容易出錯的問題，而在整個架構的複雜度上也會比傳統的做法簡單很多。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2017/bg2017051502.png\" alt=\"\"></p>\n<p>簡單來說就是利用了新的協定建立了雙向的通道：當通道建立起來之後，Browser 可以隨時丟訊息給 Server、Server 可以隨時丟訊息給瀏覽器。唯一的小缺點就是可能有一些瀏覽器相容性的問題必須要解決，IE10 以前的版本並不支援。</p>\n<p>在使用前，需要建立一個 WebSocket 物件。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://server'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello WebSocket.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>WebSocket 可以選擇 <strong>ws</strong> 或是 <strong>wss</strong> 通訊協定。</p>\n<ul>\n<li>ws 就相當於一般的 http</li>\n<li>wss 則相當於 https，需要伺服器可以支援</li>\n</ul>\n<p>操作上十分單純，以 <code>send()</code> 送出訊息，而以 <code>onmessage</code> 事件接收訊息。<br>\n呼叫 <code>close()</code> 即可結束連線。這中間無法改變通訊的 url。</p>\n<p>比起前端的使用操作，在後端、伺服器上實作 WebSocket Protocol 倒是複雜多了。這部分就不多贅述。</p>\n<p>總而言之，透過 WebSocket 建立永久連線，這種開放式連線可以讓客戶端和伺服器端之間隨時雙向交換資料，因此可降低延遲時間，改善資源使用效率，必定會是未來的潮流和趨勢。</p>\n",
      "date_published": "2017-07-31T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/3b1c3cbc/",
      "url": "https://frannn.dev/posts/3b1c3cbc/",
      "title": "什麼是 SSH？設定 Sublime 同步遠端檔案",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>在開始介紹 SFTP 以前，我們要先聊聊 <strong>SSH (Secure Shell)</strong> 協定。沒聽過 SSH 嗎？</p>\n<p>那你或許有聽過 <strong>Telnet</strong>，沒錯！就是廣大鄉民們平常用來上 PTT 的連線協定。<br>\nTelnet 易用，速度又快，只要執行 Telnet 程式來連線到遠端伺服器，使用者輸入帳密後便可以遠端控制主機。</p>\n<p>但是由於 Telnet 傳輸的資料並未加密，所以容易遭到竊取，後來 SSH 橫空出世，SSH 預設是以金鑰為基礎來驗證及加密傳輸，也可以省去輸入帳號密碼的步驟，大家也就多改用較為安全的 SSH。</p>\n<h2 id=\"ssh%EF%BC%88secure-shell%EF%BC%89\">SSH（Secure Shell） <a class=\"direct-link\" href=\"#ssh%EF%BC%88secure-shell%EF%BC%89\">#</a></h2>\n<p>接下來我們進一步介紹 SSH 協定的運作原理：</p>\n<ol>\n<li>靠加密編碼的演算法，產生一組很長又混亂的字串及檔案</li>\n<li>這組資料分別為<strong>私鑰 (private key)</strong> 與<strong>公鑰 (public key)</strong></li>\n<li>接著<strong>將公鑰傳至想要可以免帳號密碼登入的主機上</strong></li>\n<li>登入主機進行驗證後，主機就會認為你是經過驗證的使用者，就可以登入囉。</li>\n</ol>\n<h2 id=\"%E5%9C%A8-osx-%E8%88%87-linux-%E7%92%B0%E5%A2%83%E4%B8%8B%E7%94%A2%E7%94%9F-ssh-key\">在 OSX 與 Linux 環境下產生 SSH key <a class=\"direct-link\" href=\"#%E5%9C%A8-osx-%E8%88%87-linux-%E7%92%B0%E5%A2%83%E4%B8%8B%E7%94%A2%E7%94%9F-ssh-key\">#</a></h2>\n<p>由於 OS X 跟 Linux 都是 Unix-Like 系統，所以產生的方式都一樣。<br>\n步驟如下：</p>\n<ol>\n<li>使用內建的終端機</li>\n<li><code>ssh-keygen</code> 建立 ssh key</li>\n<li><code>ls -al</code> 會看到生成了兩個檔案：<code>id_rsa.pub</code> <code>id_rsa</code><br>\n也就是你所持有的公鑰與私鑰</li>\n<li>把 <code>id_rsa.pub</code> 的內容加入 server 端的 <code>~/.ssh/authorized_keys</code></li>\n<li>建立連線 <code>ssh USER@SSH_SERVER</code></li>\n</ol>\n<h2 id=\"%E5%9C%A8-windows-%E7%92%B0%E5%A2%83%E4%B8%8B%E7%94%A2%E7%94%9F-ssh-key\">在 Windows 環境下產生 SSH key <a class=\"direct-link\" href=\"#%E5%9C%A8-windows-%E7%92%B0%E5%A2%83%E4%B8%8B%E7%94%A2%E7%94%9F-ssh-key\">#</a></h2>\n<p>在 Windows 中有兩種類型的程式可以支援 SSH：</p>\n<ul>\n<li><strong>OpenSSH</strong> - 安裝完 git 會自動安裝</li>\n<li><strong>PuTTY</strong></li>\n</ul>\n<p>使用 <strong>OpenSSH</strong> 的步驟如下：</p>\n<ol>\n<li>使用 PowerShell</li>\n<li>安裝 git 會順便安裝 OpenSSH</li>\n<li>先建立 .ssh 的資料夾<br>\n通常安裝 git 的時候在產生 github_rsa 的時候就已經建好了</li>\n<li><code>ssh-keygen</code> 建立 ssh key</li>\n<li><code>ls</code> 會看到生成了兩個檔案：<code>id_rsa.pub</code> <code>id_rsa</code></li>\n<li>把 <code>id_rsa.pub</code> 的內容加入 server 端的 <code>~/.ssh/authorized_keys</code></li>\n<li>建立連線 <code>ssh USER@SSH_SERVER</code></li>\n</ol>\n<p>雖然可以順利的手動連線，但是很遺憾的，<strong>OpenSSH</strong> 的公鑰/私鑰的格式和 Linux 環境之下是不同的，由於我們之後還想要使用 <strong>SFTP</strong>，為了避免在後續操作會導致 <code>Sublime SFTP Connection timeout</code>，那就必須利用 <strong>puttygen.exe</strong> 對公鑰/私鑰進行格式轉換。</p>\n<p>這樣做實在太麻煩了，不如我們就直接使用 <strong>puttygen.exe</strong> 來生成金鑰吧：</p>\n<ol>\n<li>使用 PowerShell</li>\n<li>下載 <strong>puttygen.exe</strong>，打開之後點選 Generate<br>\n滑鼠在 key 區空白位置晃動，可加快生成隨機數</li>\n<li>在 key comment 填寫備註</li>\n<li>在 key passphras 填寫 key 的密碼，如同前面步驟，也可以選擇不設置</li>\n<li>把上方框框中的內容，也就是公鑰複製到 server 端的 <code>/.ssh/authorized_keys</code> 之中</li>\n<li>點擊 puttygen.exe 中的 Save private key，保存私鑰 <strong>id_rsa.ppk</strong></li>\n<li>建立連線 <code>ssh USER@SSH_SERVER</code></li>\n</ol>\n<h2 id=\"%E4%BD%BF%E7%94%A8-sublime-sftp-%E5%90%8C%E6%AD%A5%E6%AA%94%E6%A1%88\">使用 Sublime SFTP 同步檔案 <a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8-sublime-sftp-%E5%90%8C%E6%AD%A5%E6%AA%94%E6%A1%88\">#</a></h2>\n<blockquote>\n<p>註：本文撰寫於 2017/08，我後來跳槽使用 VSCode。<br>\n官方直接支援 SSH 連線到伺服器進行開發，我認為方便多了。</p>\n</blockquote>\n<p>來到本文的正題，也就是如何在 <a href=\"https://www.sublimetext.com/3\">Sublime Text3</a> 上借助 <a href=\"https://wbond.net/sublime_packages/sftp\">SFTP</a> 這個套件來幫助我們更加快速與便利地去建立 SSH 連線和管理檔案：</p>\n<ul>\n<li><strong>安裝 SFTP</strong><br>\n如同其他套件，利用 <code>package control install package</code> 輸入 <code>sftp</code> 後就會自動下載</li>\n<li><strong>配置文件</strong><br>\n在第一次執行之前，我們必須設定配置文件 <code>sftp-sonfig.json</code><br>\n簡單介紹幾個選項</li>\n<li>連線設定\n<ul>\n<li><code>type</code> 有 sftp, ftp, ftps 等連線可選，在這裡我們選擇 <code>sftp</code></li>\n<li><code>host</code> SSH_SERVER</li>\n<li><code>user</code> USER</li>\n<li><code>password</code> 預設沒有使用的話，註解就好</li>\n<li><code>port</code> 沒有指定的話，註解就好</li>\n<li><code>ssh_key_file</code> 在 windows 環境中，設定成剛才儲存的 <strong>id_rsa.ppk</strong> 的路徑，<br>\n例如 <code>&quot;C:\\/Users\\/username\\/.ssh\\/id_rsa.ppk&quot;</code></li>\n</ul>\n</li>\n<li>同步設定\n<ul>\n<li><code>save_before_upload</code> 上傳前，local 自動存檔</li>\n<li><code>sync_down_on_open</code> local 開啟檔案時，自動從遠端同步（保留 local 原 code）</li>\n<li><code>sync_skip_deletes</code> 同步時，跳過刪除的檔案</li>\n<li><code>sync_same_age</code> 時間戳相同的檔案一併同步</li>\n<li><code>confirm_downloads</code> 下載時不要詢問</li>\n<li><code>confirm_sync</code> 同步時不要詢問</li>\n<li><code>confirm_overwrite_newer</code> 覆寫時不要詢問</li>\n</ul>\n</li>\n<li>同步檔案\n<ul>\n<li><code>remote_path</code> 遠端同步的資料夾</li>\n<li><code>ignore_regexes</code> 同步資料夾下忽略的檔案</li>\n</ul>\n</li>\n<li><strong>進行連線</strong><br>\n儲存配置文件後，即可在目錄按下滑鼠右鍵直接操作<br>\n<img src=\"http://i.imgur.com/6iF3MY7.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料 <a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a></h2>\n<ul>\n<li><a href=\"http://blog.itist.tw/2015/03/login-ssh-server-without-username-and-password.html\">別讓 MIS 不開心，免密碼直接登入遠端的 SSH Server</a></li>\n<li><a href=\"https://kknews.cc/other/y8k2a2k.html\">SublimeText3中使用SFTP編輯遠程伺服器文件</a></li>\n</ul>\n",
      "date_published": "2017-08-23T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/20d7c148/",
      "url": "https://frannn.dev/posts/20d7c148/",
      "title": "我在社群網路公司實習的日子",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>今年四月，我投遞出人生的第一份履歷。</p>\n<p>我使用該公司的社群網路服務已有近七年之久，於是當他們釋出前端工程師的實習職位，考慮不過半天、回過神來我已將履歷投至對方信箱——也很幸運地，在經過篩選與面試後，我獲得了暑期實習的合作機會。</p>\n<p>經過一段時間沈澱之後，我想我是該好好寫篇文章，分享我在短短兩個月的實習過程之中的所見所學。</p>\n<h2 id=\"%E6%83%B3%E5%83%8F%E8%88%87%E7%8F%BE%E5%AF%A6\">想像與現實 <a class=\"direct-link\" href=\"#%E6%83%B3%E5%83%8F%E8%88%87%E7%8F%BE%E5%AF%A6\">#</a></h2>\n<blockquote>\n<p>我所期望的實習型態是圍繞著特定專案的核心概念，再以實踐專案中的每個功能、使用者經驗優化為目標，去摸索與學習。</p>\n<p>學生時代比較多是個人專案的獨立作業，專案規模較小型、缺乏有制度的組織規劃，所以希望能在實習期間更加瞭解或是涉身經歷這些大型專案的開發流程，增加大型專案前後端的合作經驗。技術層面則希望能先紮穩原生 JavaScript 的觀念再學習 Webpack、ES6 或其他現代框架，以理解背後目的和提升品質為前提去精進自我能力。</p>\n</blockquote>\n<p>以上是我在實習前對工作型態的期許，然而在面試時前輩也跟我大致做了說明：</p>\n<ul>\n<li>新技術如 Webpack / ES6 等等，公司在三年內大概都不會考慮投入專案\n<ul>\n<li>考量瀏覽器相容性問題</li>\n<li>團隊人力不足以兼顧專案的重構與維護</li>\n</ul>\n</li>\n<li>撇開新技術不談，由於公司的專案已發展九年之久，可能會遇到以下情形\n<ul>\n<li>開發初期不是非常注重 software engineering principles，導致專案結構有些鬆散</li>\n<li>當然也有些 legacy code 和稀泥</li>\n</ul>\n</li>\n<li>公司在這段實習期間可以提供\n<ul>\n<li>前端部分今年初做了許多 refactoring，可以給予 follow up / study</li>\n<li>能直接投入大型專案的開發流程，累積經驗與學習</li>\n<li>由於從事社群網路服務，公司與用戶間的交流相當直接開放，團隊也對於使用者經驗也有扎實的心得</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E6%AD%A3%E5%BC%8F%E4%B8%8A%E8%B7%AF\">正式上路 <a class=\"direct-link\" href=\"#%E6%AD%A3%E5%BC%8F%E4%B8%8A%E8%B7%AF\">#</a></h2>\n<p>我所負責的工作內容是與團隊中另一位後端實習工程師，一同開發 <strong>Bookmark feature</strong>，也就是讓使用者可以自由儲存他感興趣的 post 內容，提供更加便利的方式以再次瀏覽，同時也必須整合原有的專案結構去增加新 UI 、加入整個新功能。</p>\n<p>實習初期主要花了一些時間去瞭解網站的專案架構，有些頭緒後才開始涉身投入開發過程。</p>\n<h4 id=\"%E6%8E%A5%E8%A7%B8%E7%9A%84%E6%96%B0%E4%BA%8B%E7%89%A9\">接觸的新事物 <a class=\"direct-link\" href=\"#%E6%8E%A5%E8%A7%B8%E7%9A%84%E6%96%B0%E4%BA%8B%E7%89%A9\">#</a></h4>\n<ul>\n<li>MVC 架構\n<ul>\n<li>Mako<br>\nPython 模板</li>\n<li>LESS<br>\nCSS 預處理器（寫過 SASS 所以上手很快）</li>\n<li>Handlebars.js<br>\nJavaScript 模板引擎</li>\n<li>RESTful API<br>\n與後端工程師溝通、分工合作</li>\n</ul>\n</li>\n<li>Git<br>\n雖用過 github 此類遠端儲存庫，然而在這之前並沒有多人開發的版本控制經驗<br>\n有些情況下可以下一些特別的 git 指令，只能說真的沒用過不會知道啊XD</li>\n<li>i18n<br>\n作為一個國際化的社群網站，多國語言翻譯是一定要的啦</li>\n</ul>\n<h2 id=\"%E6%80%9D%E6%83%B3%E8%A1%9D%E6%93%8A\">思想衝擊 <a class=\"direct-link\" href=\"#%E6%80%9D%E6%83%B3%E8%A1%9D%E6%93%8A\">#</a></h2>\n<p>作為一個新鮮人，在實際投入業界以後，我開始對於過去在學校的所見所聞有了更加深刻的體會，同時也接收了一些未曾想過的開發新觀點。</p>\n<h4 id=\"%E5%BE%9E%E4%BD%9C%E6%A5%AD%E5%88%B0%E7%94%A2%E5%93%81\">從作業到產品 <a class=\"direct-link\" href=\"#%E5%BE%9E%E4%BD%9C%E6%A5%AD%E5%88%B0%E7%94%A2%E5%93%81\">#</a></h4>\n<p>在校作業往往有明確的要求與規範，然而實際開發新產品、新功能時，一切都從零開始。</p>\n<p>成為開發者的同時，讓我比以前更加在意程式效能。雖然我不是後端、不負責資料庫的架構設計，但是掌握過去所學的核心科目（資料結構、演算法），確實對於寫好程式碼有極大幫助，至少會養成習慣去分析並且選擇最佳解決方法。</p>\n<p>僅僅是功能寫好是遠遠不夠的，其中一個感受深刻的部分是<strong>資訊安全層面</strong>的考量，這次開發新功能我也對 CSRF、XSS 等攻擊手法做了不少功課，這些也都是在校時期較少接觸的部分。</p>\n<h4 id=\"%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E6%9E%B6%E6%A7%8B%E5%8F%AF%E8%AE%80%E6%80%A7\">提高程式碼的架構可讀性 <a class=\"direct-link\" href=\"#%E6%8F%90%E9%AB%98%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E6%9E%B6%E6%A7%8B%E5%8F%AF%E8%AE%80%E6%80%A7\">#</a></h4>\n<p>實習之中隨著元件越加越多，程式碼也被我越改越亂，當我意識到的同時已然變成了 <a href=\"https://en.wikipedia.org/wiki/Spaghetti_code\">Spaghetti code</a>。</p>\n<p>只好捧著程式碼去向前輩討教，也好好重新檢視了自己的 coding style——主要是疏於注意重複性程式碼，導致寫出維護性與可讀性不佳的程式碼。在撰寫起初也許不認為這段 code 包成 function 會有多大的效益，但是隨著程式越改越長，如果能好好管理、組織程式結構，積少成多下來會帶來可觀的影響。</p>\n<h4 id=\"%E6%89%93%E9%80%A0%E6%9C%80%E4%BD%B3%E7%9A%84%E4%BD%BF%E7%94%A8%E8%80%85%E9%AB%94%E9%A9%97\">打造最佳的使用者體驗 <a class=\"direct-link\" href=\"#%E6%89%93%E9%80%A0%E6%9C%80%E4%BD%B3%E7%9A%84%E4%BD%BF%E7%94%A8%E8%80%85%E9%AB%94%E9%A9%97\">#</a></h4>\n<p>就如同前面所說的，僅僅是功能寫好是遠遠不夠的，尤其前端工程師必須扛起整個網頁與使用者互動的門面，也開始讓我更常思考——要怎麼樣設計界面和規劃每個元件的事件，才能讓使用者容易上手、便於使用。我想這個部分我還需要多加琢磨。</p>\n<h2 id=\"%E5%BE%8C%E8%A8%98\">後記 <a class=\"direct-link\" href=\"#%E5%BE%8C%E8%A8%98\">#</a></h2>\n<blockquote>\n<p>&quot;Tell me and I forget, Teach me and I remember, Involve me and I learn.&quot; - Benjamin Franklin</p>\n</blockquote>\n<p>這段話可作為我這段日子以來的最佳寫照。兩個月的實習過得比想像中快，我也學到超乎原先預期的東西和觀念。</p>\n<p>同時我也有感於一天只有二十四小時真的好不夠，開始工作的每一天，往往覺得自己越是學習越是不足，還有好多新事物在等著我去探索，也是和這個部落格的標題有所呼應吧。</p>\n<p>最後很幸運地，原先團隊並沒有打算招收新的正職工程師，然而在這段期間經過公司的評估後，卻開給了我正職<strong>前端工程師</strong>的 offer。很高興獲得團隊的肯定，期許自己能在工作過程中學習更多，未來我也會好好全力以赴。</p>\n",
      "date_published": "2017-09-24T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/cb4a7f47/",
      "url": "https://frannn.dev/posts/cb4a7f47/",
      "title": "資工系學士畢業新鮮人的自白",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<blockquote>\n<p>當初應屆推本校資工所都沒上<br>\n我很煩惱是不是該繼續往資工這條路走 -- by young60509</p>\n</blockquote>\n<p>上週在批踢踢軟體版看到網友  young60509 發表的文章，<a href=\"https://www.ptt.cc/bbs/Soft_Job/M.1507876000.A.433.html\">[請益] 該不該往資工走下去...</a> 作為同屆畢業生我看了也難免有感而發。</p>\n<p>本文並不會告訴大家，我在資工系修過什麼課、做了什麼事、遇到什麼人、學到什麼樣的東西，主要是想說說就讀資工系的我，甫畢業之初的一些看法。</p>\n<h2 id=\"%E9%97%9C%E6%96%BC%E7%A0%94%E7%A9%B6%E6%89%80%E6%88%96%E5%B0%B1%E6%A5%AD\">關於研究所或就業 <a class=\"direct-link\" href=\"#%E9%97%9C%E6%96%BC%E7%A0%94%E7%A9%B6%E6%89%80%E6%88%96%E5%B0%B1%E6%A5%AD\">#</a></h2>\n<p>應該很多人畢業之後都會考慮要不要繼續往研究所進修，或是乾脆地投入職場。雖然我在校內也看過許多不假思索、二話不說就直接推甄研究所的人，你問他日後要往哪個領域走，選這個領域跟你日後職涯規劃有什麼關聯，他可能也回答不出所以然，不過我還是鼓勵大家在校時期多發掘自己的興趣。</p>\n<p>瞭解自己的興趣，你才能更加具體去考量自己的職涯規劃。<br>\n如果想做<strong>演算法</strong>或<strong>圖學</strong>等偏重理論的領域，那當然要唸研究所。但如果你是想要走強調業界實務應用的領域，像是網頁工程師好了，那就要想一想是要做<strong>應用系統研究</strong>、<strong>使用者經驗</strong>還是別的什麼相關領域，才能對你的職涯規劃有幫助。</p>\n<p>事實上，我看到的學長姐還是有很大部分畢業之後的職位與在校研究領域完全無關的，晉升台積電、聯發科等等電子大廠居多。當然，我一點也不否定向錢看齊的想法，只是如此一來相當於在研究所的經驗變成一種純粹的職前訓練，訓練吸收知識跟解決問題的邏輯能力，但你的研究本身卻不見得能幫助掌握日後工作的相關技術，這是比較可惜的一點。</p>\n<p>另外作為應屆畢業生，我也驗證一下<strong>校內推甄資工所要成績30%會不會上</strong>這個說法，答案是<strong>不一定</strong>，3X% 落榜的大有人在，而更加具體來說：<strong>更加注重業外表現</strong>，只有成績達標是有些勉強的。</p>\n<h2 id=\"%E9%97%9C%E6%96%BC%E8%87%AA%E5%AD%B8%E8%83%BD%E5%8A%9B%E4%BB%A5%E5%8F%8A%E8%88%88%E8%B6%A3\">關於自學能力以及興趣 <a class=\"direct-link\" href=\"#%E9%97%9C%E6%96%BC%E8%87%AA%E5%AD%B8%E8%83%BD%E5%8A%9B%E4%BB%A5%E5%8F%8A%E8%88%88%E8%B6%A3\">#</a></h2>\n<p><a href=\"https://www.ptt.cc/bbs/Soft_Job/M.1507876000.A.433.html\">[請益] 該不該往資工走下去...</a>  這篇文章中樓主自己提到覺得自學能力差，不適合往資工領域發展，我認為更加精確的說法是：<strong>自主學習程式語言差</strong>。</p>\n<p>無論就讀研究所或是直接就業，求財求生存的能力都跟你該領域的自學能力脫不了關係。這又回到了上面提到的興趣問題，如果在大學時期其實就能找到自己的興趣，並且在相關技術鑽研、做點 side project，我覺得是非常很有幫助的。也許你當時的興趣在日後無法學以致用，但以這份熱情去推動自身能力還是相當管用的。</p>\n<blockquote>\n<p>ku399999: 學得慢又如何 是不是真慢都不知道 人生是長跑 持續學習努力絕對強過一狗票人</p>\n</blockquote>\n<p>原文中網友 ku399999 這句話我也相當認同。自學這件事情不管是不是要走軟體業，都會一輩子跟著你。這不是難不難的問題，只是你願不願意花心力去適應而已。不怕做不好，先做再說吧！</p>\n<p>最後的最後，想記錄一句我最近也很喜歡的話。</p>\n<blockquote>\n<p>&quot;I'm a slow walker, but I never walk backwards.&quot; - Abragam Lincoln</p>\n</blockquote>\n",
      "date_published": "2017-10-19T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/9d63e457/",
      "url": "https://frannn.dev/posts/9d63e457/",
      "title": "善用 Rebase 的 Git 工作流程",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>簡單介紹了 Merge 和 Rebase 的差異，並且以合併後的結果線圖來作比較。<br>\n在多人協作的專案場景，能好好善用 Rebase 的話，絕對能省去不少麻煩事！</p>\n<h2 id=\"%E5%88%86%E6%94%AF%E7%9A%84%E5%90%88%E4%BD%B5\">分支的合併 <a class=\"direct-link\" href=\"#%E5%88%86%E6%94%AF%E7%9A%84%E5%90%88%E4%BD%B5\">#</a></h2>\n<p>完成作業的 Topic 分支，最終都會合併到 Integration 分支。<br>\n合併分支有兩種方法：使用 <strong>merge</strong> 或 <strong>rebase</strong>。<br>\n兩者都是合併歷史記錄，但是根據使用的方法合併後的分支歷史記錄有很大的差別。</p>\n<p><img src=\"https://i.imgur.com/MucvWQq.png\" alt=\"\"></p>\n<h3 id=\"merge\">Merge <a class=\"direct-link\" href=\"#merge\">#</a></h3>\n<p>修改內容的歷史記錄會維持原狀，但是合併後的歷史紀錄會變得更複雜。<br>\n<img src=\"https://i.imgur.com/fZnV9YR.png\" alt=\"\"></p>\n<p>Git 在做 merge 時，會自動判斷現在的狀況是否適合是使用 <strong>fast-forward</strong>，或是我們可以透過加上 <code>--ff</code> 或是 <code>--no-ff</code> 來強制設定是否使用 fast-forward，差別如下：<br>\n<img src=\"https://i.imgur.com/vjc4D9q.png\" alt=\"\"></p>\n<p><code>--no-ff</code> 會多出一個 merge commit，而 <code>--ff</code> 會直接視為 master 分支上多出的 commit。<br>\n可視需求決定要使用哪種。</p>\n<h3 id=\"rebase\">Rebase <a class=\"direct-link\" href=\"#rebase\">#</a></h3>\n<p>修改內容的歷史記錄會接在要合併的分支後面，合併後的歷史記錄會比較清楚簡單，但是，會比使用 merge 更容易發生衝突。<br>\n<img src=\"https://i.imgur.com/XXoH6Nr.png\" alt=\"\"></p>\n<p><img src=\"https://i.imgur.com/8NqcY1V.png\" alt=\"\"></p>\n<h2 id=\"%E5%A4%9A%E4%BA%BA%E5%8D%94%E4%BD%9C%E7%9A%84-git-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\">多人協作的 Git 工作流程 <a class=\"direct-link\" href=\"#%E5%A4%9A%E4%BA%BA%E5%8D%94%E4%BD%9C%E7%9A%84-git-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\">#</a></h2>\n<p>具體來說，如果我們要將 feature branch 合併進 master</p>\n<ul>\n<li>\n<p>先切換到 feature branch，update 之後把遠端的 master 分支 rebase 進來<br>\n<code>git checkout branch-name</code><br>\n<code>git remote update</code><br>\n<code>git rebase origin/master</code></p>\n</li>\n<li>\n<p>切換到本地 master，當然要先確認本地 master 與遠端同步<br>\n<code>git checkout master</code><br>\n<code>git merge --ff origin/master</code></p>\n</li>\n<li>\n<p>把 feature branch 給 merge 進來 master，同時要保留新增功能用的commit<br>\n<code>git merge --no-ff branch-name</code></p>\n</li>\n<li>\n<p>將本地 master 推上遠端<br>\n<code>git push origin master</code></p>\n</li>\n</ul>\n<p>原理其實並不難，但是在多人協作的專案開發時，如果能善用 Rebase 的話，有時候能幫助你省去一些意想不到的麻煩！</p>\n",
      "date_published": "2017-11-01T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/dc7de635/",
      "url": "https://frannn.dev/posts/dc7de635/",
      "title": "淺談 AMP (Accelerated Mobile Pages)",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>網站速度、內容品質，這些都是 SEO的排名因素，同時也跟用戶體驗息息相關。而 Google 在<a href=\"https://googleblog.blogspot.tw/2015/10/introducing-accelerated-mobile-pages.html\">2015 年正式發佈</a>其獨有的 <strong>AMP</strong> 框架，中文為 <strong>加速版行動網頁</strong> 。</p>\n<p>AMP是 Google 獨有的網頁框架，用來使行動裝置網頁能快速載入。如果你有架設 AMP框架，促進使用者體驗優化，也許會讓該頁面的 rankng 提升 ，同時這個框架也能夠非常有效的提升用戶體驗，未來 AMP將有可能會越來越被重視、且也有可能在搜尋排名中佔有更強的影響力。</p>\n<p><a href=\"https://www.ampproject.org/docs/tutorials/create\">Google 官方網站</a>上也一步步演示了要如何架設 AMP 網站，主要可分為三大部分</p>\n<ul>\n<li>AMP HTML</li>\n<li>AMP JS</li>\n<li>AMP Cache</li>\n</ul>\n<h2 id=\"amp-html\">AMP HTML <a class=\"direct-link\" href=\"#amp-html\">#</a></h2>\n<p>必須按照其規格撰寫：</p>\n<ul>\n<li>以 <code>&lt;!doctype html&gt;</code> 開頭</li>\n<li>其中第一個  tag 須為 <code>&lt;html ⚡&gt;</code> 或 <code>&lt;html amp&gt;</code> 表示為 AMP 網頁</li>\n<li>必須包含 <code>&lt;head&gt;</code> 與 <code>&lt;body&gt;</code></li>\n<li>在 <code>&lt;head&gt;</code> 內必須以 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 作為第一個 tag</li>\n<li>在 <code>&lt;head&gt;</code> 內必須包含 <code>&lt;script async src=&quot;https://cdn.ampproject.org/v0.js&quot;&gt;&lt;/script&gt;</code> tag 以引入 AMP JS</li>\n<li>在 <code>&lt;head&gt;</code> 內必須包含 <code>&lt;link rel=&quot;canonical&quot; href=&quot;$SOME_URL&quot;&gt;</code> 其中 <code>$SOME_URL</code> 指向原本的非 AMP 網頁</li>\n<li>在 <code>&lt;head&gt;</code> 內必須包含 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1&quot;&gt;</code> 並且建議加入 <code>initial-scale=1</code></li>\n<li>在 <code>&lt;head&gt;</code> 內必須包含 <a href=\"https://www.ampproject.org/docs/reference/spec/amp-boilerplate\">AMP Boilerplate Code</a></li>\n</ul>\n<p>一個頁面可使用唯一一個 <code>&lt;style amp-custom&gt;</code> tag 來自訂 style，然而有些 css 屬性是禁用的，但更加上了一些額外的屬性幫助我們排版，可見<a href=\"https://www.ampproject.org/docs/guides/responsive_amp\">相關規範</a>。</p>\n<p>而 HTML tags 也多以 AMP HTML tags 予以取代，像是 <code>&lt;img&gt;</code> 以 <code>&lt;amp-img&gt;</code> 替代，等等<a href=\"https://www.ampproject.org/zh_cn/docs/reference/components\">其他 component</a>，這部分在下個段落會再細談。</p>\n<h2 id=\"amp-js\">AMP JS <a class=\"direct-link\" href=\"#amp-js\">#</a></h2>\n<p>為了有效管理資源載入並提供客製化標籤，所以僅能使用 AMP 的元件，不允許使用任何第三方的外連 js file 或是 inline script，也就是說你只能使用 AMP 規範提供的 <a href=\"https://www.ampproject.org/zh_cn/docs/reference/components\">Component 元件</a> 去完成網頁的行為，或者 iframe 一個非 AMP 頁面進來。</p>\n<p>AMP 規範所提供 Component 大略可分為以下數類：</p>\n<ul>\n<li><a href=\"https://www.ampproject.org/docs/reference/components#ads-and-analytics\">Ads &amp; analytics</a></li>\n<li><a href=\"https://www.ampproject.org/docs/reference/components#dynamic-content\">Dynamic content</a></li>\n<li><a href=\"https://www.ampproject.org/docs/reference/components#layout\">Layout</a></li>\n<li><a href=\"https://www.ampproject.org/docs/reference/components#media\">Media</a></li>\n<li><a href=\"https://www.ampproject.org/docs/reference/components#presentation\">Presentation</a></li>\n<li><a href=\"https://www.ampproject.org/docs/reference/components#social\">Social</a></li>\n</ul>\n<h2 id=\"amp-cache\">AMP Cache <a class=\"direct-link\" href=\"#amp-cache\">#</a></h2>\n<p>Google AMP Cache 會驗證你的網站是否為 AMP 網頁，如果網站符合其規範，Search Result 便會出現 AMP Cache 的結果，提供快取好的 AMP HTML 網頁。</p>\n<p>同時這個搜尋結果會出現在一個新的區塊 <strong>Top Stories 版位</strong>，只有支援 AMP 的網頁才會出現，所以支援 AMP 網站等同於讓你的網頁多了一次機會出現在 Google search result 。</p>\n<p><img src=\"http://www.thesempost.com/wp-content/uploads/2016/02/amp-demo2-576x1024.png\" alt=\"\"></p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\">總結 <a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a></h2>\n<p>AMP 最大優點當然就是頁面的加載速度的顯著提升，在 Google 的搜尋結果更會多出一個 Top Stories 版位。</p>\n<p>然而其諸多限制也帶來一些困擾，例如廣告投放、外站圖源、用戶登入問題，這些都只能依賴 AMP 規範提供的 Component 去完成，當然也不能設計一些太過複雜的介面。基於這些限制，開發者是否要引入該框架技術，就勢必得再多加思量了。</p>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料 <a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a></h2>\n<ul>\n<li><a href=\"https://blog.lalacube.com/archives/2101/accelerated-mobile-pages-amp-%E5%AF%A6%E6%88%B0%E5%AE%88%E5%89%87\">Accelerated Mobile Pages (AMP) 實戰守則</a></li>\n<li><a href=\"http://tedshd.logdown.com/posts/1460247-amp-accelerated-mobile-pages\">AMP - Accelerated Mobile Pages 研究筆記</a></li>\n</ul>\n",
      "date_published": "2017-12-10T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/7694b685/",
      "url": "https://frannn.dev/posts/7694b685/",
      "title": "Vue.js 新手上路",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>在開始學習今天的主題之前，我們要來先討論一下：<strong>為什麼要學框架（Framework）？</strong><br>\n因為很潮正夯特流行嗎？因為業界好找工作嗎？又有什麼是只用 jQuery 辦不到的事情嗎？</p>\n<p>簡單來說，<strong>jQuery</strong> 是<strong>以 DOM 元素來觸發功能</strong>，能幫助我們更簡單的實現網頁上的資料互動及事件處理方法，同時也簡化了許多 AJAX 的操作方法，是設計動畫效果的絕佳利器。</p>\n<p>然而 <strong>框架（Framework）</strong> 包括你聽過的三神獸 <strong>Vue</strong>, <strong>Angular</strong>, <strong>React</strong>，都是<strong>以資料來驅動功能</strong>，適合用來撰寫一些以資料為主體的網頁以及 SPA，能幫助我們更加簡潔地去處理資料邏輯。</p>\n<h2 id=\"%E9%80%B2%E5%85%A5-vue.js-%E4%B8%96%E7%95%8C\">進入 Vue.js 世界 <a class=\"direct-link\" href=\"#%E9%80%B2%E5%85%A5-vue.js-%E4%B8%96%E7%95%8C\">#</a></h2>\n<p>讓我們先寫一個簡單的  <strong>Vue 建構式（Vue Vonstructor）</strong> 來建立 view model ：</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  <span class=\"token literal-property property\">el</span><span class=\"token operator\">:</span> <span class=\"token string\">'.app'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 要綁定的 DOM element，即作用範圍</span><br>  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 資料綁定</span><br>  \t<span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">,</span> <br>  \t<span class=\"token literal-property property\">users</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span><br>        <span class=\"token literal-property property\">isActive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 當資料改變時，對應更新的變動值</span><br>  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 可以定義在元件或樣板內使用的 method</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"%E8%B3%87%E6%96%99%E7%B6%81%E5%AE%9A-data-binding\">資料綁定 Data Binding <a class=\"direct-link\" href=\"#%E8%B3%87%E6%96%99%E7%B6%81%E5%AE%9A-data-binding\">#</a></h2>\n<h4 id=\"data-%E7%9A%84%E4%BD%9C%E7%94%A8\">data 的作用 <a class=\"direct-link\" href=\"#data-%E7%9A%84%E4%BD%9C%E7%94%A8\">#</a></h4>\n<ul>\n<li>儲存元件內部狀態或資料</li>\n<li>和 v-model 合作實現雙向綁定</li>\n</ul>\n<p>利用 Mustache 的雙括號語法以及 <strong>模板語法</strong> 可以直接將 data 的值置入</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"v-bind\">v-bind <a class=\"direct-link\" href=\"#v-bind\">#</a></h4>\n<p>雙括號語法不能直接寫入 html 的屬性之中，需使用 <code>v-bind</code> 語法作屬性綁定，縮寫為 <code>:</code></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{ active: isActive }<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userItem<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in users<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"%E5%85%B6%E4%BB%96%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95\">其他模板語法 <a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96%E6%A8%A1%E6%9D%BF%E8%AA%9E%E6%B3%95\">#</a></h4>\n<ul>\n<li><strong>v-if</strong> , <strong>v-else-if</strong>, <strong>v-else</strong><br>\n形如 <code>v-if=&quot;boolean&quot;</code> ,  <code>v-else-if=&quot;boolean&quot;</code>  ,  <code>v-else</code><br>\n類似 <a href=\"http://handlebarsjs.com/\">Handlebars.js</a> 中的 {{#if boolean}} ,  {{else}}</li>\n<li><strong>v-show</strong><br>\n形如 <code>v-show=&quot;boolean&quot;</code><br>\n類似 <code>v-if</code>，不過會保留 DOM 元素本身，只是改變 <code>display: none</code></li>\n<li><strong>v-for</strong><br>\n形如 <code>v-for=&quot;item in array&quot;</code><br>\n類似 <a href=\"http://handlebarsjs.com/\">Handlebars.js</a> 中的 {{#each item}}</li>\n</ul>\n<h2 id=\"%E5%B1%AC%E6%80%A7%E8%A8%88%E7%AE%97-computed-propertries\">屬性計算 Computed Propertries <a class=\"direct-link\" href=\"#%E5%B1%AC%E6%80%A7%E8%A8%88%E7%AE%97-computed-propertries\">#</a></h2>\n<p>我們可以直接利用 <strong>computed</strong> 來幫助我們 <strong>處理雙括號表達式的資料邏輯</strong></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 當資料改變時，對應更新的變動值</span><br>  <span class=\"token function-variable function\">userNum</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n<p><strong>computed</strong> 有以下特點</p>\n<ul>\n<li>function 本身無法帶入外部參數</li>\n<li>具有資料緩存的功能，不會每次都重新渲染<br>\n當使用的 data 中的對應值變動，<strong>computed</strong> 裡的值<strong>才會自動更新</strong></li>\n</ul>\n<h2 id=\"methods-%E8%88%87%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86\">Methods 與事件處理 <a class=\"direct-link\" href=\"#methods-%E8%88%87%E4%BA%8B%E4%BB%B6%E8%99%95%E7%90%86\">#</a></h2>\n<h4 id=\"methods\">methods <a class=\"direct-link\" href=\"#methods\">#</a></h4>\n<p>我們可以在 <strong>methods</strong> 裡面定義可被 vue 物件呼叫的 function</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 可以定義在元件或樣板內使用的 method</span><br>    <span class=\"token function-variable function\">addFollow</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>      <span class=\"token comment\">// ...</span><br>    <span class=\"token punctuation\">}</span></code></pre>\n<p>而在 function 裡呼叫的 this 會自動綁定為呼叫這個 function 的物件<br>\n同時必須注意的是，也就<strong>不能使用 ES6 中的箭頭函數</strong>來定義 method function</p>\n<h4 id=\"v-on\">v-on <a class=\"direct-link\" href=\"#v-on\">#</a></h4>\n<p>使用 <code>v-on</code> 語法作事件處理的綁定，縮寫為 <code>@</code></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{ active: isActive }<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userItem<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item in users<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item.id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">void</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>setFollow(item)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Follow<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>再去呼叫我們在 <strong>methods</strong> 中所定義的 function</p>\n<h2 id=\"%E9%9B%99%E5%90%91%E7%B6%81%E5%AE%9A\">雙向綁定 <a class=\"direct-link\" href=\"#%E9%9B%99%E5%90%91%E7%B6%81%E5%AE%9A\">#</a></h2>\n<h4 id=\"v-model\">v-model <a class=\"direct-link\" href=\"#v-model\">#</a></h4>\n<p><code>v-model</code> 可以幫助我們實現雙向綁定，也就是說<strong>去動態同步更改 data 的資料</strong>，在表單呈現上特別好用<br>\n限用於<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>和<code>&lt;textarea&gt;</code></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"todos-with-vue.js\">Todos with Vue.js <a class=\"direct-link\" href=\"#todos-with-vue.js\">#</a></h2>\n<p>利用前面所提及的各種方法，實作出一個簡單的 todo list</p>\n<iframe height='400' scrolling='no' title='todos with vue.js' src='//codepen.io/veru/embed/JMMXxQ/?height=400&theme-id=0&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/veru/pen/JMMXxQ/'>todos with vue.js</a> by Veru (<a href='https://codepen.io/veru'>@veru</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<ul>\n<li>實作功能\n<ul>\n<li>可新增/刪除 todo</li>\n<li>可將 todo 標示完成</li>\n<li>顯示未完成的 todo 數量</li>\n<li>可切換不同分頁：全部/未完成/已完成</li>\n<li>快捷鍵：完成所有 todo/刪除已完成 todo</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">參考資料 <a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a></h2>\n<ul>\n<li><a href=\"https://cn.vuejs.org/v2/guide/\">Vue.js 官方文件</a></li>\n<li><a href=\"https://www.slideshare.net/kurotanshi/vuejs-62131923\">第一次用 Vue.js 就愛上</a></li>\n<li><a href=\"https://cythilya.github.io/2017/05/21/vue-study-note/\">Summer 的 Vue.js 學習筆記總整理</a></li>\n</ul>\n",
      "date_published": "2018-02-03T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/f1f89997/",
      "url": "https://frannn.dev/posts/f1f89997/",
      "title": "正則表達式 Regular Expression 與深入應用",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>在資料驗證時，常常必須進行字串比對的工作，我們能藉由 <strong>正則表達式（Regular Expression）</strong> 來判斷是否字串具有符合的格式。</p>\n<p>善用<strong>正則表達式</strong>能幫助我們用更加簡潔的程式碼去驗證字串，再利用 String 中的 <code>match()</code> 或 <code>replace()</code> 等方法對字串做更進一步的處理。</p>\n<h2 id=\"%E5%BB%BA%E7%AB%8B%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F\">建立正則表達式 <a class=\"direct-link\" href=\"#%E5%BB%BA%E7%AB%8B%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F\">#</a></h2>\n<p>在 JavaScript 中，我們有兩種方式可以建立正則表達式：</p>\n<ul>\n<li>建立字面值</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">JavaScript</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>建立 RegExp 物件</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>如果是不變的值，使用字面值來建立會具有較好的效能。</p>\n<h2 id=\"%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E5%85%83\">正則表達式中的特殊字元 <a class=\"direct-link\" href=\"#%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E5%85%83\">#</a></h2>\n<p>正則表達式由數個簡易字元組成，下面列出在正則表達式中個人比較常利用的特殊字元。</p>\n<h3 id=\"%E4%B8%80%E8%88%AC%E5%B8%B8%E8%A6%8B\">一般常見 <a class=\"direct-link\" href=\"#%E4%B8%80%E8%88%AC%E5%B8%B8%E8%A6%8B\">#</a></h3>\n<ul>\n<li><code>\\</code>：跳脫特殊字元（如 <code>\\.</code> 找 &quot;.&quot; 或是 <code>\\/</code> 找 &quot;/&quot;）</li>\n<li><code>.</code>：任意字元</li>\n<li><code>^</code>：字元的開頭</li>\n<li><code>$</code>：字元的結尾</li>\n<li><code>[abc]</code> ：比對是否為中括號中的 a 或 b 或 c</li>\n<li><code>[^abc]</code>：不是中括號中的 a 或 b 或 c 的任何字元</li>\n<li><code>[a-z]</code> ：抓任何小寫 a-z 之間的字元</li>\n<li><code>[a-zA-Z]</code> ：抓任何小寫 a-z 和大寫 A-Z 之間字元</li>\n<li><code>[0-9]</code>：數字字元</li>\n<li><code>|</code>：OR</li>\n<li><code>()</code>：群組</li>\n</ul>\n<h3 id=\"%E6%8C%87%E5%AE%9A%E5%8C%B9%E9%85%8D%E5%AD%97%E5%85%83\">指定匹配字元 <a class=\"direct-link\" href=\"#%E6%8C%87%E5%AE%9A%E5%8C%B9%E9%85%8D%E5%AD%97%E5%85%83\">#</a></h3>\n<p>前面我們曾提及一種特殊字元，也就是反斜線。<br>\n反斜線 <code>\\</code> 在前可表示<strong>轉義</strong> (escaping) ，將其後的特殊字元視為一般字元。<br>\n如果要表示的字串中含有 <code>/</code> 字元時，就必須寫作 <code>/\\//</code>。</p>\n<p>但別把跳脫字元和下面這類型的特殊字元混淆了。</p>\n<ul>\n<li><code>\\d</code>：匹配任何數字字元</li>\n<li><code>\\D</code>：匹配任何不是數字字元</li>\n<li><code>\\w</code> ：匹配所有文字字元 + 底線，其實等於 <code>[a-z\\dA-Z_]</code></li>\n<li><code>\\W</code>：匹配所有非文字字元（標點符號、特殊字元等）</li>\n<li><code>\\s</code>：匹配空格字元</li>\n<li><code>\\S</code>：匹配任何<strong>非空格字元</strong></li>\n<li><code>\\b</code>：在邊界的字元, 如 <code>hello</code> 會得到 [&quot;h&quot;, &quot;o&quot;]</li>\n</ul>\n<h3 id=\"%E6%8C%87%E5%AE%9A%E5%8C%B9%E9%85%8D%E6%AC%A1%E6%95%B8\">指定匹配次數 <a class=\"direct-link\" href=\"#%E6%8C%87%E5%AE%9A%E5%8C%B9%E9%85%8D%E6%AC%A1%E6%95%B8\">#</a></h3>\n<p>以下字元<strong>只會針對前一個位置的匹配規則作用</strong></p>\n<ul>\n<li><code>*</code>：0 或更多</li>\n<li><code>+</code>：1 或更多</li>\n<li><code>?</code>：0 或 1 次</li>\n<li><code>{m}</code>：m 次</li>\n<li><code>{n,}</code>：最少 n 次</li>\n<li><code>{m,n}</code>：m 到 n 次</li>\n<li><code>{m, n}?</code>：從 m 號到 n 次，取匹配最少次的</li>\n</ul>\n<h3 id=\"flags-%E6%97%97%E6%A8%99\">flags 旗標 <a class=\"direct-link\" href=\"#flags-%E6%97%97%E6%A8%99\">#</a></h3>\n<p>正則表達式可以設定不同的甚至是多個 <strong>flag</strong> 來改變預設規則。</p>\n<ul>\n<li><code>/.../i</code>：不區分大小寫</li>\n<li><code>/.../g</code>：<strong>全局匹配模式</strong>，得以重複匹配多次，否則預設固定回傳第一個結果</li>\n</ul>\n<h2 id=\"%E5%AF%A6%E9%9A%9B%E6%92%B0%E5%AF%AB%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F\">實際撰寫正則表達式 <a class=\"direct-link\" href=\"#%E5%AF%A6%E9%9A%9B%E6%92%B0%E5%AF%AB%E6%AD%A3%E5%89%87%E8%A1%A8%E9%81%94%E5%BC%8F\">#</a></h2>\n<p>下面以幾個例子說明該如何撰寫正則表達式。</p>\n<h3 id=\"%E7%AF%84%E4%BE%8B%E4%B8%80%EF%BC%9A%E6%89%8B%E6%A9%9F%E8%99%9F%E7%A2%BC\">範例一：手機號碼 <a class=\"direct-link\" href=\"#%E7%AF%84%E4%BE%8B%E4%B8%80%EF%BC%9A%E6%89%8B%E6%A9%9F%E8%99%9F%E7%A2%BC\">#</a></h3>\n<ul>\n<li>撰寫思維：判斷是不是十位數數字所組成</li>\n<li>正則表達式：<code>[0-9]{10}</code></li>\n</ul>\n<h3 id=\"%E7%AF%84%E4%BE%8B%E4%BA%8C%EF%BC%9Aemail\">範例二：email <a class=\"direct-link\" href=\"#%E7%AF%84%E4%BE%8B%E4%BA%8C%EF%BC%9Aemail\">#</a></h3>\n<ul>\n<li>撰寫思維：以 <code>@</code> 為中點，可以把字串切分成前半部和後半部\n<ul>\n<li>前半部以任意文字字元和 <code>-</code> 組成任意長度</li>\n<li>後半部以任意文字字元和 <code>.</code> 組成任意長度</li>\n</ul>\n</li>\n<li>正則表達式：\n<ol>\n<li>先以 <code>[\\w\\-]</code> 表達任意文字字元或 <code>-</code> 的字元</li>\n<li>加上加號 <code>[\\w\\-]+</code> 取取符合規則的一個或多個字元</li>\n<li>後半部如法炮製出 <code>[\\w\\-].</code></li>\n<li>最後加上中間的 <code>@</code> 並以括號包成群組，得到 <code>([\\w\\-]+@[\\w\\.]+)</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"%E7%AF%84%E4%BE%8B%E4%B8%89%EF%BC%9A%E4%B8%8D%E7%A2%BA%E5%AE%9A%E5%A6%82%E4%BD%95%E5%88%86%E9%9A%94%E7%9A%84%E6%89%8B%E6%A9%9F%E8%99%9F%E7%A2%BC\">範例三：不確定如何分隔的手機號碼 <a class=\"direct-link\" href=\"#%E7%AF%84%E4%BE%8B%E4%B8%89%EF%BC%9A%E4%B8%8D%E7%A2%BA%E5%AE%9A%E5%A6%82%E4%BD%95%E5%88%86%E9%9A%94%E7%9A%84%E6%89%8B%E6%A9%9F%E8%99%9F%E7%A2%BC\">#</a></h3>\n<ul>\n<li>撰寫思維：手機號碼可能以分隔線 <code>-</code> 或是空白字元分隔<br>\n一樣先拆成三個部分，各自檢查是否符合規則</li>\n<li>正則表達式：\n<ol>\n<li>先以 <code>\\d{4}</code> 表達四位數字字元如 <code>0912</code></li>\n<li>後面可能用空格或是 <code>-</code> 隔開，所以變成 <code>\\d{4}[\\s\\-]?</code></li>\n<li>如法炮製其他部分，得到 <code>\\d{4}[\\s\\-]?\\d{3}[\\s\\-]?\\d{3}</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"%E5%85%B6%E4%BB%96%E5%B8%B8%E8%A6%8B%E5%AF%A6%E4%BE%8B\">其他常見實例 <a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96%E5%B8%B8%E8%A6%8B%E5%AF%A6%E4%BE%8B\">#</a></h3>\n<p>以下實例會以字面值，也就是兩個 <code>/</code> 包裹字元的形式來表示。</p>\n<table>\n<thead>\n<tr>\n<th>RegExp</th>\n<th>說明</th>\n<th>範例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>/^\\d{4}-\\d{2}-\\d{2}$/</code></td>\n<td>西元生日格式</td>\n<td>&quot;1996-08-06&quot;</td>\n</tr>\n<tr>\n<td><code>/^[A-Z]\\d{9}$/</code></td>\n<td>身分證字號</td>\n<td>&quot;A123456789&quot;</td>\n</tr>\n<tr>\n<td><code>/^09\\d{8}$/</code></td>\n<td>手機號碼</td>\n<td>&quot;0912345678&quot;</td>\n</tr>\n<tr>\n<td><code>/^[^aeiou]*$/</code></td>\n<td>不包含小寫母音的字串</td>\n<td>&quot;hEllO&quot;,&quot;ApplE&quot;</td>\n</tr>\n<tr>\n<td><code>/^.*@gmail\\.com$/</code></td>\n<td>gmail 信箱</td>\n<td>&quot;<a href=\"mailto:test@gmail.com\">test@gmail.com</a>&quot;</td>\n</tr>\n<tr>\n<td><code>/^[0-9\\+\\-\\*\\/]*$/</code></td>\n<td>四則運算算式</td>\n<td>&quot;1+2*3&quot;</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"%E5%AF%A6%E9%9A%9B%E6%87%89%E7%94%A8\">實際應用 <a class=\"direct-link\" href=\"#%E5%AF%A6%E9%9A%9B%E6%87%89%E7%94%A8\">#</a></h2>\n<p>接下來介紹一些常用的方法，如 RegExp 的 <code>test()</code> 和 <code>exec()</code> 方法，或是 String 的 <code>match()</code> 和 <code>replace()</code> 方法。</p>\n<p>這些只是個人比較常用到的，實際上還有其他可搭配應用的方法，有興趣可以再參閱其他技術文件。</p>\n<h3 id=\"regexp.prototype.test()\">RegExp.prototype.test() <a class=\"direct-link\" href=\"#regexp.prototype.test()\">#</a></h3>\n<p>語法形如 <code>regexObj.test(str)</code><br>\n對正則表達式檢查某個字串是否匹配其規則，並回傳 <code>true</code> 或 <code>false</code>。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">han</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hannah1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span><br><br><span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">nan</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hannah1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre>\n<h3 id=\"regexp.prototype.exec()\">RegExp.prototype.exec() <a class=\"direct-link\" href=\"#regexp.prototype.exec()\">#</a></h3>\n<p>語法形如 <code>regexObj.exec(str)</code><br>\n對正則表達式連續檢查字串的匹配結果，回傳符合結果的陣列或是 <code>null</code>。</p>\n<p>每次執行會把成功匹配的末位紀錄在 <code>regexObj.lastIndex</code> 中，做為下一次匹配開始的位置。並且可搭配<strong>全局匹配模式</strong>和 <code>()</code> <strong>群組</strong>的特殊字元來使用，能得到更進一步分組的結果陣列。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(foo)([\\w]+)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'table football, foosball'</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">var</span> array<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>array <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> re<span class=\"token punctuation\">.</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><span class=\"token comment\">// Array [\"football\", \"foo\", \"tball\"] 14</span><br><span class=\"token comment\">// Array [\"foosball\", \"foo\", \"sball\"] 24</span></code></pre>\n<p>以第一次 <code>console.log</code> 的結果陣列 <code>array</code> 為例，這個結果陣列會有以下屬性：</p>\n<table>\n<thead>\n<tr>\n<th>屬性</th>\n<th>說明</th>\n<th>實例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[0]</td>\n<td>匹配的全部字串</td>\n<td>&quot;football&quot;</td>\n</tr>\n<tr>\n<td>[1], ..., [n]</td>\n<td>括號中的分組匹配字串</td>\n<td>[1] = &quot;foo&quot; </br> [2] = &quot;tball&quot;</td>\n</tr>\n<tr>\n<td>index</td>\n<td>匹配到的字串起點位於原始字串的索引值</td>\n<td>6</td>\n</tr>\n<tr>\n<td>input</td>\n<td>原始字串值</td>\n<td>&quot;table football, foosball&quot;</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"string.prototype.match()\">String.prototype.match() <a class=\"direct-link\" href=\"#string.prototype.match()\">#</a></h3>\n<p>語法形如 <code>str.match(regexp)</code></p>\n<p>對一個字串判斷是否符合正則表達式的結果，會回傳匹配字串或 <code>null</code>。<br>\n如果是<strong>全局匹配模式</strong>，則會回傳匹配字串之結果陣列。此結果陣列的格式與 <code>RegExp.prototype.exec()</code> 相同。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[ABC]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"A\", \"B\", \"C\", \"a\", \"b\", \"c\"]</span><br><br><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\d]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span><br><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"\"]</span></code></pre>\n<h3 id=\"string.prototype.replace()\">String.prototype.replace() <a class=\"direct-link\" href=\"#string.prototype.replace()\">#</a></h3>\n<p>語法形如 <code>str.replace(regexp|substr, newSubstr|function)</code></p>\n<p>對一個字串與 <code>pattern</code> 比對，這個 <code>pattern</code> 可以是字串也可以是正則表達式，再以 <code>replacement</code> 取代吻合處，此處的 <code>replacement</code> 則可以是字串或函式。<br>\n並且可搭配<strong>群組</strong>的特殊字元來使用，能指定一個字串為參數，形如 <code>$n</code>，代表第 <code>n</code> 項的分組匹配字串。</p>\n<p>必須注意的是，<strong><code>replace()</code> 方法並不會改變原有字串</strong>。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">=</span> <span class=\"token string\">'We wish you a merry xmas! We wish you a merry xmas!'</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">xmas</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Christmas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// We wish you a merry Christmas! We wish you a merry xmas!</span><br><br><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'John Smith'</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\w+)\\s(\\w+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'$2, $1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// Smith, John</span></code></pre>\n<h2 id=\"%E7%B5%90%E8%AA%9E\">結語 <a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a></h2>\n<p>字串比對和資料驗證等問題算是很容易接觸到的狀況，利用正則表達式我們就能夠更簡單去驗證其格式的正確性。</p>\n<p>初次接觸確實會讓人覺得簡直像是無字天書，但實際搞懂每個特殊字元的對應意義，日後無論是要自己撰寫規則還是檢閱他人的驗證規則，其實也不是這麼困難的事。</p>\n",
      "date_published": "2018-06-20T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/350dd70b/",
      "url": "https://frannn.dev/posts/350dd70b/",
      "title": "Hexo + GitHub Actions 打造自動部署",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>這篇文章的出現，要從兩年前開始說起，那時候的我才剛開始摸 <a href=\"https://hexo.io/zh-tw/index.html\">Hexo</a>。<br>\n當時的我比起其他平台，像是 Wordpress / Medium / Logdown 等等諸如此類，更喜歡 markdown 寫作方式，所以興致沖沖地架了個部落格。</p>\n<p>但是理想很豐滿，現實總是骨感——很快地，過了大約一年左右便很少更新，敵擋不過自己的惰性。</p>\n<p>畢竟靜態網頁的佈署步驟太麻煩，必須滿足本地端有 Hexo 檔案的前提，我偏偏又喜歡用 <a href=\"https://hackmd.io/\">HackMD</a> 撰寫，一來一往之間步驟太過繁複。久而久之，這段時間我傾向於使用 HackMD 整理個人筆記，懶得發表技術文章到 blog 上。</p>\n<p>直到我注意到 GitHub 推出 <strong>CI/CD 服務</strong>，能幫助我解決這個麻煩！趁這個機會我打算順便打理 Hexo 架構，把菜鳥時期我搭建的部落格重新打掉，在 2020 前夕超進化！</p>\n<h2 id=\"%E4%BB%80%E9%BA%BC%E6%98%AF-hexo\">什麼是 Hexo <a class=\"direct-link\" href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-hexo\">#</a></h2>\n<p>想進一步瞭解更多，可以看看中文的 <a href=\"https://hexo.io/zh-tw/docs/\">Hexo官方文件</a>。</p>\n<blockquote>\n<p>Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown（或其他渲染引擎）解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。</p>\n</blockquote>\n<p>Hexo 使用 Node.js 搭建，速度快且免費，操作也相對簡單，更是支持 Markdown ，也有不少第三方外掛系統。</p>\n<h2 id=\"%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8-hexo\">開始使用 Hexo <a class=\"direct-link\" href=\"#%E9%96%8B%E5%A7%8B%E4%BD%BF%E7%94%A8-hexo\">#</a></h2>\n<h3 id=\"%E6%BA%96%E5%82%99%E5%B7%A5%E4%BD%9C-for-windows\">準備工作 for Windows <a class=\"direct-link\" href=\"#%E6%BA%96%E5%82%99%E5%B7%A5%E4%BD%9C-for-windows\">#</a></h3>\n<p>事前需要先安裝以下軟體</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/\">Node.js</a></li>\n<li><a href=\"https://desktop.github.com/\">Github</a>\n<ul>\n<li>當然你必須先擁有屬於自己的 github 帳號</li>\n<li>登入 Github 之後，點選右上角 Create repository<br>\nRepository name 必須是 <code>github帳號.github.io</code> 並選擇 Public</li>\n</ul>\n</li>\n</ul>\n<p>安裝好上述軟體後，就可以打開 Shell 鍵入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli</code></pre>\n<p>透過 npm 就可以順利完成 Hexo 的安裝了</p>\n<h3 id=\"%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%AE%89%E8%A3%9D\">初始化和安裝 <a class=\"direct-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%AE%89%E8%A3%9D\">#</a></h3>\n<p>接下來，我們要進行初始化和安裝，在 Shell 鍵入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">hexo init<br><span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n<p>跑完後，會在該資料夾底下新增所需要的檔案：</p>\n<pre class=\"language-text\"><code class=\"language-text\">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</code></pre>\n<p>等它跑完就可以開始寫新文章、架 blog 了，初步的建置就是如此簡單！</p>\n<h3 id=\"%E5%BB%BA%E7%AB%8B%E6%96%B0%E6%96%87%E7%AB%A0\">建立新文章 <a class=\"direct-link\" href=\"#%E5%BB%BA%E7%AB%8B%E6%96%B0%E6%96%87%E7%AB%A0\">#</a></h3>\n<p>在 Shell 鍵入以下訊息</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">hexo new <span class=\"token string\">\"postName\"</span>  <span class=\"token comment\"># 建立一個新的文章</span></code></pre>\n<p>新文章的格式是 markdown，可以到 <code>source/_post/postName.md</code> 去修改</p>\n<h3 id=\"%E9%A0%90%E8%A6%BD-blog\">預覽 blog <a class=\"direct-link\" href=\"#%E9%A0%90%E8%A6%BD-blog\">#</a></h3>\n<p>在 Shell 鍵入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">hexo g <span class=\"token comment\"># (也可以打 hexo generate) 產生 blog</span><br>hexo s <span class=\"token comment\"># (也可以打 hexo server)   讓 blog 可在 local 端檢視</span></code></pre>\n<p>在 <code>http://localhost:4000</code> 就可以看見剛剛建好的 blog</p>\n<h3 id=\"%E4%BD%BF%E7%94%A8-hexo-deploy-%E9%83%A8%E7%BD%B2\">使用 Hexo Deploy 部署 <a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8-hexo-deploy-%E9%83%A8%E7%BD%B2\">#</a></h3>\n<p>先安裝 hexo-deployer-git</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save</code></pre>\n<p>接下來打開資料夾中的 <code>_config.yml</code> 編輯 <code>deploy:</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">deploy:<br>  type: <span class=\"token function\">git</span><br>  repo: https://github.com/你的 github 帳號/你的專案名稱.git<br>  branch: master</code></pre>\n<p>完成設定以後，就可以發佈 blog 了</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">hexo deploy <span class=\"token comment\"># (也可以打 hexo d) 發佈 blog</span></code></pre>\n<p>發布之後，到專案的 <strong>Settings</strong> 啟用 <strong>GitHub Pages</strong><br>\n<strong>Source</strong> 的欄位就選剛才填的 deploy branch</p>\n<p><img src=\"https://i.imgur.com/wp4Qu8P.png\" alt=\"\"></p>\n<p>等一段時間後，就會顯示啟用，就可以從 <code>http://github帳號.github.io</code> 連上 blog，完成初步工作！</p>\n<p>到這個階段其實已經可以利用 <code>hexo</code> 基本指令在本地端架 blog 了，只是為了完成自動化部署，我又加入了 CI/CD 流程！</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8-github-actions-%E5%AF%A6%E7%8F%BE-ci%2Fcd\">使用 GitHub Actions 實現 CI/CD <a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8-github-actions-%E5%AF%A6%E7%8F%BE-ci%2Fcd\">#</a></h2>\n<h3 id=\"%E4%BB%80%E9%BA%BC%E6%98%AF-ci%2Fcd\">什麼是 CI/CD <a class=\"direct-link\" href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-ci%2Fcd\">#</a></h3>\n<blockquote>\n<p>CI（Continuous integration）為「持續性整合」，目的是讓專案能夠在每一次的變動中都能通過一些檢驗來確保專案品質。 CD（Continuous Deployment）則為「自動化部署」，讓專案能夠自動在每次變動後能以最新版本呈現。</p>\n</blockquote>\n<p>事實上在業界應用中，可做的多了，像是：環境建置、單元測試、日誌紀錄、產品部署，可以簡化開發流程。<br>\n而在 Hexo 的 blog 架設過程中，我們也能用它來達成自動部署！</p>\n<p><strong>GitHub Actions</strong> 是由 GitHub 提供的 CI/CD 服務，用於在 GitHub 建置、測試、封裝、發佈或部署任何專案。並可藉此建置端對端（end-to-end）CI/CD 功能。</p>\n<p>Hexo 所提供的指令 <code>hexo generate</code> 其實是幫我們產生靜態網頁檔案，也就是 <code>public</code> 資料夾的內容。<br>\n同時 <code>hexo deploy</code> 則將 <code>public</code> 資料夾中的內容推送到 <code>_config.yml</code> 中指定的遠端專案的分支中，並 <strong>完全覆蓋</strong> 當下分支的已有內容。</p>\n<p>因此我們的目的其實是要把這份運用 Hexo 框架的原始碼資料夾推送到 GitHub 的另一個專案分支上，並藉由 GitHub 所提供的 CI/CD 服務幫我們進行產生靜態網頁檔案，再推送到指定專案分支，也就是我們現在建立起 GitHub Pages 的專案上。</p>\n<h3 id=\"%E6%8A%8A-hexo-%E5%8E%9F%E5%A7%8B%E7%A2%BC%E6%8E%A8%E9%80%81%E5%88%B0-github\">把 Hexo 原始碼推送到 GitHub <a class=\"direct-link\" href=\"#%E6%8A%8A-hexo-%E5%8E%9F%E5%A7%8B%E7%A2%BC%E6%8E%A8%E9%80%81%E5%88%B0-github\">#</a></h3>\n<p>首先要把 Hexo 真正的 source code 推送到 GitHub 上建立一個新專案。<br>\n記得將這個專案設為 <strong>Private</strong>，不公開他人瀏覽。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> init<br><span class=\"token function\">git</span> <span class=\"token function\">add</span> --all<br><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"First commit\"</span><br><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/你的 github 帳號/新專案名稱.git<br><span class=\"token function\">git</span> push -u origin master</code></pre>\n<h3 id=\"%E5%BB%BA%E7%AB%8B-ssh-key\">建立 SSH Key <a class=\"direct-link\" href=\"#%E5%BB%BA%E7%AB%8B-ssh-key\">#</a></h3>\n<p>在執行 Github Actions 的過程中，為了讓這段程式也可以把靜態網頁推送到原先我們所建立的專案上，必須建立一個 SSH Key 給它使用。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">ssh-keygen -f github-deploy-key <span class=\"token comment\"># 然後三次 Enter</span></code></pre>\n<ul>\n<li>\n<p>原始碼專案<br>\n到 <strong>Settings</strong> 的 <strong>Secrets</strong> 去 Add a new secret</p>\n<ul>\n<li>Name 輸入 <code>HEXO_DEPLOY_PRI</code></li>\n<li>Value 填上私鑰 <code>github-actions-deploy</code> 的內容</li>\n</ul>\n</li>\n<li>\n<p>靜態網頁專案<br>\n到 <strong>Settings</strong> 的 <strong>Deploy keys</strong></p>\n<ul>\n<li>Title 輸入 <code>HEXO_DEPLOY_PUB</code></li>\n<li>Key 填上公鑰 <code>github-actions-deploy.pub</code> 的內容</li>\n<li>勾選 Allow write access</li>\n</ul>\n</li>\n</ul>\n<p>再打開資料夾中的 <code>_config.yml</code> 編輯 <code>deploy:</code>，要改成 ssh 連線才可以順利部署</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">deploy:<br>  type: <span class=\"token function\">git</span><br>  repo: git@github.com:你的github帳號/你的靜態網頁專案名稱.git<br>  branch: master</code></pre>\n<p>記得要 commit 後推送到專案上</p>\n<h3 id=\"%E8%A8%AD%E5%AE%9A-github-actions\">設定 GitHub Actions <a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A-github-actions\">#</a></h3>\n<p>回到原始碼專案，到 <strong>Actions</strong> 右上角選擇 <strong>Set up a workflow yourself</strong></p>\n<p>我的 <code>main.yml</code> 設定如下</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy Blog<br><br><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>push<span class=\"token punctuation\">]</span><br><br><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest<br><br>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span><br>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout<br>      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v1<br>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js 10.x<br>      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1<br>      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>        <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10.x\"</span><br>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Hexo env<br>      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span><br>        <span class=\"token key atrule\">HEXO_DEPLOY_PRI</span><span class=\"token punctuation\">:</span> $<br>      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"><br>        # set up private key for deploy<br>        mkdir -p ~/.ssh/<br>        echo \"$HEXO_DEPLOY_PRI\" > ~/.ssh/id_rsa<br>        chmod 600 ~/.ssh/id_rsa<br>        ssh-keyscan github.com >> ~/.ssh/known_hosts<br>        git config --global user.name '使用者帳號'<br>        git config --global user.email '使用者信箱'<br>        # install dependencies<br>        npm i -g hexo-cli<br>        npm i</span><br>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy<br>      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"><br>        # generate and depoly<br>        hexo g -d</span></code></pre>\n<p>把 <code>main.yml</code> 推上 <code>workflows/</code> 後，再一次回到 Actions 確認 workflows</p>\n<p><img src=\"https://i.imgur.com/BVXrSPn.png\" alt=\"\"></p>\n<p>本地端檔案也要記得同步 <code>main.yml</code> 建立時推上去的 commit</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote update<br><span class=\"token function\">git</span> pull</code></pre>\n<h3 id=\"blog-%E8%AE%8A%E6%9B%B4%E7%94%9F%E6%95%88\">blog 變更生效 <a class=\"direct-link\" href=\"#blog-%E8%AE%8A%E6%9B%B4%E7%94%9F%E6%95%88\">#</a></h3>\n<p>每次要更動 blog 內容，像是發文或更改佈景等操作都要記得推上去</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><br><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"變更內容\"</span><br><span class=\"token function\">git</span> push origin master</code></pre>\n<p>Github Actions 就會幫我們自動執行後續動作</p>\n<h3 id=\"%E5%82%99%E4%BB%BD%E5%8E%9F%E5%A7%8B%E7%A2%BC\">備份原始碼 <a class=\"direct-link\" href=\"#%E5%82%99%E4%BB%BD%E5%8E%9F%E5%A7%8B%E7%A2%BC\">#</a></h3>\n<p>既然都把原始碼 git 上去了，以後如果要在其他電腦架 blog，只需要</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone git@github.com:你的github帳號/你的原始碼專案名稱.git<br><span class=\"token builtin class-name\">cd</span> 你的原始碼專案名稱<br><span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre>\n<p>順手完成了備份動作，是不是一石二鳥呢！</p>\n<h3 id=\"%E7%B7%9A%E4%B8%8A%E7%99%BC%E6%96%87\">線上發文 <a class=\"direct-link\" href=\"#%E7%B7%9A%E4%B8%8A%E7%99%BC%E6%96%87\">#</a></h3>\n<p>現在讓我們試著用 GitHub 直接線上發文<br>\n到專案原始碼底下的 <code>source/_posts</code> 選擇右上角 <strong>Create new file</strong></p>\n<p><img src=\"https://i.imgur.com/snIwAWC.png\" alt=\"\"></p>\n<p><code>file name</code> 即為<code>文章標題.md</code>，內容要調整成 hexo 文章格式</p>\n<p><img src=\"https://i.imgur.com/aB8fkjX.png\" alt=\"\"></p>\n<p>然後選擇 <strong>Commit new file</strong><br>\n如此以來就真正實現我想要的線上發布功能了！大功告成！</p>\n<h2 id=\"%E8%B8%A9%E5%9D%91%E7%B6%93%E6%AD%B7\">踩坑經歷 <a class=\"direct-link\" href=\"#%E8%B8%A9%E5%9D%91%E7%B6%93%E6%AD%B7\">#</a></h2>\n<h3 id=\"%E6%9B%B4%E6%94%B9%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C\">更改佈景主題 <a class=\"direct-link\" href=\"#%E6%9B%B4%E6%94%B9%E4%BD%88%E6%99%AF%E4%B8%BB%E9%A1%8C\">#</a></h3>\n<p>在 <a href=\"https://hexo.io/themes/\">Hexo Themes</a> 中尋找你喜歡的佈景主題並保存到 <code>themes</code> 下<br>\n之後打開 <code>_config.yml</code>，找到 <code>theme:</code> 修改成佈景名稱，也就是資料夾的對應名稱</p>\n<p>如果是 git clone 下來的主題<br>\n為了得以順利執行 actions，必須先將 <code>themes</code> 底下的 <code>/.git</code> 刪除，然後加入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> <span class=\"token function\">add</span> .<span class=\"token punctuation\">\\</span>themes<span class=\"token punctuation\">\\</span>主題名稱<span class=\"token punctuation\">\\</span><br><span class=\"token function\">git</span> <span class=\"token function\">add</span> -f .<span class=\"token punctuation\">\\</span>themes<span class=\"token punctuation\">\\</span>主題名稱<span class=\"token punctuation\">\\</span>_config.yml</code></pre>\n<h3 id=\"%E8%A8%AD%E5%AE%9A%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%9F%9F%E5%90%8D\">設定自定義域名 <a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%9F%9F%E5%90%8D\">#</a></h3>\n<p>重點同樣是域名服務商的設定，設定好之後記得要在 <code>source</code> 底下保存一個 <code>CNAME</code> 推上去<br>\n才不會每次 push 後自訂域名設定都被覆蓋</p>\n",
      "date_published": "2019-12-22T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/d22e4c38/",
      "url": "https://frannn.dev/posts/d22e4c38/",
      "title": "什麼是 SSL？透過 Cloudflare 來啟用 HTTPS",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>當你使用 Chrome 瀏覽器時，是否曾留意過網址列出現的「<strong>不安全</strong>」？</p>\n<p>尤其辛辛苦苦架好網站，甚至加上自訂域名，卻看到那幾個字，顯得格外刺眼——為什麼會出現所謂的不安全警示呢？</p>\n<p>這是因為 Google 鼓勵網站加上 SSL 憑證，那些能以 HTTPS 加密通訊協定存取的網站，就會加上綠色鎖頭字樣！甚至還列入了搜尋演算法的指標中，影響 SEO 排名。</p>\n<p>重點來了，所謂的 SSL 憑證到底是什麼？</p>\n<h2 id=\"ssl---secure-sockets-layer%EF%BC%88%E9%80%9A%E8%A8%8A%E5%AE%89%E5%85%A8%E5%8D%94%E5%AE%9A%EF%BC%89\">SSL - Secure Sockets Layer（通訊安全協定） <a class=\"direct-link\" href=\"#ssl---secure-sockets-layer%EF%BC%88%E9%80%9A%E8%A8%8A%E5%AE%89%E5%85%A8%E5%8D%94%E5%AE%9A%EF%BC%89\">#</a></h2>\n<p>SSL 的原文是 <strong>Secure Sockets Layer</strong>，聽起來好像很複雜，其實本意是為了保護使用者的個人資料、聯絡方式、付款資訊不被第三方所攔截的技術。</p>\n<p><img src=\"https://i.imgur.com/DLeBOxF.png\" alt=\"\"></p>\n<p>運作原理就是在瀏覽器拜訪網站時，會向對應的伺服器要求建立安全連線，這部分會協議使用的加密演算法或是密鑰交換演算法等機制，協議出一份密鑰來認證。</p>\n<p>同時為了真正確保協議過程中的安全，除了協議的內容，伺服器還要回傳 <strong>CA（Certificate Authority，數位憑證）</strong>，這是第三方的認證，來讓使用者端確認不是冒用身分。</p>\n<p>協議完成後，就可以按照協議進行加密、傳送資料了！經過加密的資料，即使第三方有心人士竊取到資料，也會因為缺少解密金鑰而無法得到正確訊息，只能看到亂碼。</p>\n<p>在原本的 HTTP 協定中加入 SSL 憑證的通訊安全協定，就是 HTTPS 協定。</p>\n<p><img src=\"https://i.imgur.com/0gXpLaO.png\" alt=\"\"></p>\n<h2 id=\"%E7%94%A8-cloudflare-%E5%8A%A0%E4%B8%8A-ssl-%E6%86%91%E8%AD%89\">用 Cloudflare 加上 SSL 憑證 <a class=\"direct-link\" href=\"#%E7%94%A8-cloudflare-%E5%8A%A0%E4%B8%8A-ssl-%E6%86%91%E8%AD%89\">#</a></h2>\n<p>我們可以使用 Cloudflare 的 DNS 代管服務，來免費使用 SSL 憑證。<br>\n只要將網域設為代管後，就能掛上 SSL 加密連線，擁有綠色鎖頭。</p>\n<p>讓我們先申請 Cloudflare 服務吧！首先要讓 Cloudflare 來解析域名。</p>\n<h3 id=\"%E7%94%B3%E8%AB%8B-dns-%E8%A8%97%E7%AE%A1\">申請 DNS 託管 <a class=\"direct-link\" href=\"#%E7%94%B3%E8%AB%8B-dns-%E8%A8%97%E7%AE%A1\">#</a></h3>\n<p>註冊/登入後，點選 <strong>Add Site</strong>。</p>\n<p><img src=\"https://i.imgur.com/h8u5R9K.png\" alt=\"\"></p>\n<p>選擇免費方案，就可以使用 SSL 憑證囉。</p>\n<p><img src=\"https://i.imgur.com/7J9KkvS.png\" alt=\"\"></p>\n<p>解析後可能會有一些錯誤訊息，這部分通常與域名服務商中的 DNS 設定有關。<br>\n我的域名服務商是 <strong>Google Domains</strong>，後面會以 Google Domains 作為操作示範。</p>\n<p>幾個常見錯誤訊息如下：</p>\n<ul>\n<li>\n<p>An MX record was not found for your root domain. An MX record is required for mail to reach <code>@自訂域名</code> addresses.<br>\n如果有設定自訂電子郵件地址，自訂紀錄就必須設定 MX，沒設定可忽略。</p>\n</li>\n<li>\n<p>An A, AAAA or CNAME record was not found for the www subdomain. The <code>自訂域名</code> subdomain will not resolve.<br>\n代表沒設定 A 或 CNAME，必須填齊。</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/AkGyFNQ.png\" alt=\"\"></p>\n<p>由於我是使用 Github Pages，所以指向的 IP 是以下四組。</p>\n<pre class=\"language-text\"><code class=\"language-text\">185.199.108.153<br>185.199.109.153<br>185.199.110.153<br>185.199.111.153</code></pre>\n<h3 id=\"%E8%A8%AD%E5%AE%9A%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8\">設定名稱伺服器 <a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A%E5%90%8D%E7%A8%B1%E4%BC%BA%E6%9C%8D%E5%99%A8\">#</a></h3>\n<p>接下來要把域名服務商的名稱伺服器，改成<strong>使用自訂名稱伺服器</strong>。</p>\n<p><img src=\"https://i.imgur.com/FWNNm2g.png\" alt=\"\"></p>\n<p>填上 Cloudflare 所給的兩組名稱伺服器，儲存後回到 Cloudflare 去 Re-check。</p>\n<p>更新可能要很久，過一段時間再回來確認吧。<br>\n生效後，就會看到出現啟用狀態，代表 DNS 託管設定完成。</p>\n<p><img src=\"https://i.imgur.com/pCic5BS.png\" alt=\"\"></p>\n<h3 id=\"%E5%95%9F%E7%94%A8-ssl-%E6%86%91%E8%AD%89\">啟用 SSL 憑證 <a class=\"direct-link\" href=\"#%E5%95%9F%E7%94%A8-ssl-%E6%86%91%E8%AD%89\">#</a></h3>\n<p>接下來終於可以使用 SSL 憑證了！點開 <strong>SSL/TLS</strong> 來確認吧。</p>\n<p><img src=\"https://i.imgur.com/faoEwGd.png\" alt=\"\"></p>\n<p>Cloudflare 通常會自動使用 SSL 憑證，設定是 Fiexible，代表確實運作中，看見網址列出現鎖頭就完成了。</p>\n<ul>\n<li><strong>Off</strong><br>\n未啟用 SSL</li>\n<li><strong>Flexible</strong><br>\nCloudflare 會透過 HTTP 存取伺服器，再透過 HTTPS 跟使用者連線，所以使用者可以透過 HTTPS 連線到網站</li>\n<li><strong>Full</strong><br>\nCloudflare 會透過 HTTPS 存取伺服器，同時也透過 HTTPS 跟使用者連線</li>\n<li><strong>Full (Strict)</strong><br>\n強制使用 HTTPS 連線，但 Cloudflare 會檢查第三方是不是信任憑證（不可自簽）</li>\n</ul>\n<p><img src=\"https://i.imgur.com/lZKA0k5.png\" alt=\"\"></p>\n<h3 id=\"%E8%A8%AD%E5%AE%9A%E8%87%AA%E5%8B%95%E8%B7%B3%E8%BD%89\">設定自動跳轉 <a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A%E8%87%AA%E5%8B%95%E8%B7%B3%E8%BD%89\">#</a></h3>\n<p>最後要確保網站的所有訪問都是基於 HTTPS 協定，所以要讓 HTTP 自動跳轉到 HTTPS。</p>\n<p>點開 <strong>SSL/TLS</strong> 底下的 <strong>Edge Certificates</strong> 分頁，找到 <strong>Always Use HTTPS</strong> 並打開。</p>\n<p><img src=\"https://i.imgur.com/GjEQVnW.png\" alt=\"\"></p>\n<p>這樣即使使用者在網址列輸入的是 HTTP，也會自動跳轉囉！</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\">結語 <a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a></h2>\n<p>現在網站擁有 SSL 憑證了，原理是透過握手技術（<strong>Handshake</strong>）以及<strong>公私鑰加密</strong>，來達成資料加密的連線。不僅是安全，對於 SEO 也有優勢。</p>\n<p>這之中利用了 <strong>Cloudflare</strong> 代管 DNS，提供免費的 <strong>SSL 憑證服務</strong>。<br>\n事實上 Cloudflare 能做到的可不只這樣，光是免費方案就提供了基本的<strong>安全防護</strong>、<strong>網站加速</strong>等其他功能，日後也可按需求付費升級。</p>\n<p>我自己比較常用到的是這些：</p>\n<ul>\n<li><strong>Analytics</strong> 以檢視網站分析</li>\n<li><strong>Speed</strong> 啟用 <strong>Auto Minify</strong></li>\n<li><strong>Page Rules</strong> 自訂頁面規則</li>\n</ul>\n<p>你的網站還沒有 SSL 憑證嗎？不如現在就試試看吧！</p>\n",
      "date_published": "2019-12-23T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/f6df526e/",
      "url": "https://frannn.dev/posts/f6df526e/",
      "title": "2021 年初前端工程師求職心得",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>去年九月，我離開了人生的第一份工作。</p>\n<p>趁著這幾個月好好休息充電、去考汽車駕照、寫些自己喜歡的 project、靜下來思考未來職涯規劃等等。<br>\n直到十二月多開始閒得有些發慌，才又打定主意回歸求職市場。</p>\n<p>實際上這是我第一次如此認真準備面試，總體來說我很喜歡這種「費盡心思去爭取機會」的過程，也想寫下現在的自己在求職方面是如何思考。</p>\n<h2 id=\"%E5%80%8B%E4%BA%BA%E8%83%8C%E6%99%AF\">個人背景 <a class=\"direct-link\" href=\"#%E5%80%8B%E4%BA%BA%E8%83%8C%E6%99%AF\">#</a></h2>\n<p><strong>本科系學士</strong>畢業，上一份（也是第一份）工作經歷三年<br>\n公司規模偏小，我主要負責產品維護、程式碼重構<br>\n在職期間也為團隊導入新技術框架，主導過大型專案</p>\n<p>想換工作的最大推力當然是想脫離舒適圈<br>\n<strong>比起追求漂亮的薪資，我比較在意新的工作能帶給自己什麼</strong></p>\n<h2 id=\"%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\">事前準備 <a class=\"direct-link\" href=\"#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\">#</a></h2>\n<p>投履歷前最好瞭解一下這間公司在做什麼產業<br>\n（順便一提，如果找不到什麼資訊那大概就是博弈了）</p>\n<p>再多方瞭解一下各式各樣的資訊，無論是面試心得或工作心得等等<br>\n我自己比較常透過這幾個網站汲取資訊：</p>\n<ul>\n<li><a href=\"https://www.qollie.com/\">求職天眼通: ಠ_ಠ Qollie</a></li>\n<li><a href=\"https://www.goodjob.life/\">GoodJob 職場透明化運動</a></li>\n<li><a href=\"https://interview.tw/\">面試趣: 找工作前的第一站</a></li>\n</ul>\n<p>如何準備技術問題在此不多談<br>\n這部分我主要參考網路上的面試心得和問題集，一些參考連結放在最後</p>\n<p>原則上<strong>不建議硬背答案，最好去思考如何用自己的話解釋概念</strong><br>\n實際面試時才不會一時卡詞，忘記自己說到哪裡，直接當在原地</p>\n<h3 id=\"%E8%87%AA%E6%88%91%E5%88%86%E6%9E%90-%26-%E5%BC%B1%E9%BB%9E%E6%87%89%E5%B0%8D\">自我分析 &amp; 弱點應對 <a class=\"direct-link\" href=\"#%E8%87%AA%E6%88%91%E5%88%86%E6%9E%90-%26-%E5%BC%B1%E9%BB%9E%E6%87%89%E5%B0%8D\">#</a></h3>\n<p>除此之外我評估自己大概有幾點弱項，或說是可能被其他人比下去的地方：</p>\n<ul>\n<li>沒什麼在寫 Side project</li>\n<li>沒什麼在刷題</li>\n<li>議程或技術研討會的參與次數不多</li>\n</ul>\n<p>再進一步分析，如何利用自己的優勢個別擊破</p>\n<h4 id=\"%E6%B2%92%E4%BB%80%E9%BA%BC%E5%9C%A8%E5%AF%AB-side-project\">沒什麼在寫 Side project <a class=\"direct-link\" href=\"#%E6%B2%92%E4%BB%80%E9%BA%BC%E5%9C%A8%E5%AF%AB-side-project\">#</a></h4>\n<p>儘管下班後我還是會寫程式，但都屬於自娛娛人或是揣摩新技術的摸索居多，我對於這些專案的完成度能不能為自己的能力加分是比較存疑的</p>\n<p>既然如此，<strong>我採取的方針是用工作上的實際成果去說服面試官</strong><br>\n拿出大型專案說明自己是如何設計與實作，引導對方往預想的方向進一步提問，就成功一半了</p>\n<p>以我個人經驗來說，最常被詢問的果然是「你怎麼去重構」、「怎麼樣設計架構」、「過程中解決什麼困難」諸如此類的問題</p>\n<p>但作品集留白實在就太難看了！<br>\n所以我自己還是花了點時間做好一個完成度比較高的專案</p>\n<h4 id=\"%E6%B2%92%E4%BB%80%E9%BA%BC%E5%9C%A8%E5%88%B7%E9%A1%8C\">沒什麼在刷題 <a class=\"direct-link\" href=\"#%E6%B2%92%E4%BB%80%E9%BA%BC%E5%9C%A8%E5%88%B7%E9%A1%8C\">#</a></h4>\n<p>現在面試有 Codility 測驗的公司越來越多了<br>\n這部分說真的讓我很挫折，缺乏刷題的經驗真的是硬傷<br>\n短期間之內也不太可能大量刷題，彌補弱勢<br>\n<strong>想嘗試大公司的話，建議把經典題目都刷過會比較好</strong></p>\n<p>但是時光不能倒流，也只能掌握基本的解題模式，臨機應變<br>\n<strong>看懂題目後，我會先審視 edge cases 再構思如何撰寫</strong><br>\n枚舉 test case 檢查自己的思路有無疏漏是很重要的一部分</p>\n<h4 id=\"%E8%AD%B0%E7%A8%8B%E6%88%96%E6%8A%80%E8%A1%93%E7%A0%94%E8%A8%8E%E6%9C%83%E7%9A%84%E5%8F%83%E8%88%87%E6%AC%A1%E6%95%B8%E4%B8%8D%E5%A4%9A\">議程或技術研討會的參與次數不多 <a class=\"direct-link\" href=\"#%E8%AD%B0%E7%A8%8B%E6%88%96%E6%8A%80%E8%A1%93%E7%A0%94%E8%A8%8E%E6%9C%83%E7%9A%84%E5%8F%83%E8%88%87%E6%AC%A1%E6%95%B8%E4%B8%8D%E5%A4%9A\">#</a></h4>\n<p>或許是疫情的關係，這部分大概不會列為扣分項，只是滿足條件會成為加分項<br>\n雖然就我個人情況而言也是疫情衝擊和荷包考量才降低誘因……</p>\n<p>無論如何，只要<strong>證明給面試官看自己是有在注意新技術趨勢</strong>就好<br>\n不管是透過各種自學管道、參與線上的技術社團的討論，或是撰寫技術部落格<br>\n面試官真正在意的還是對方是否願意自學，展現出充沛的好奇心</p>\n<h2 id=\"%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97\">面試心得 <a class=\"direct-link\" href=\"#%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97\">#</a></h2>\n<p>我應該是屬於面試比較密集的類型（跟身邊的人相比）<br>\n找工作的時間也很緊湊，我在一月中放出履歷，後面兩個禮拜密集安排面試，到第三個禮拜只剩下一些公司的二面流程，並且做出最後的決定</p>\n<p>最後去的公司從第一次面試到二次面談，收到錄取通知並回覆，這之間的時間甚至不超過一星期，仔細想想還真是挺倉促的</p>\n<p>這段時間我大概投了二十間公司上下，還有一些是透過求職網主動聯繫的<br>\n實際面試的公司有 9 間，其中 7 間 offer get，1 間婉拒二面，1 間感謝信</p>\n<p>每天都要面試，甚至上下午要趕場真的超級累！<br>\n<strong>建議安排面試最多一面一休</strong>，比較好補足前一天自己面試不足的部分<br>\n最好把自己最嚮往的公司面試往後安排，就能利用這之前的機會練習</p>\n<p>一開始面試當然多少會緊張，但到了後期心裡都會有個答案<br>\n我就算遇到沒想過的問題，也還是會思考一下、先告訴對方我的猜想<br>\n如果能和對方進行更深入的討論，那就再好不過了</p>\n<p><strong>面試是雙向往來，不光是公司面試求職者，求職者也在面試公司</strong><br>\n對方是如何思考、過程中討論什麼技術、技術詢問的深度到哪、團隊工作流程如何進行等諸如此類，就是場雙方互相打量的角力賽</p>\n<p>瞭解公司文化，談完工作內容，那麼就剩下討論薪水問題了<br>\n根據我自己的經驗，倒是沒什麼遇到開出預期薪資，對方下殺的情況<br>\n如果職缺預期就是不給這麼高的薪資，那也只會直接打槍你，不會再特別多談</p>\n<p>而要如何求出求職市場給自己的價位，也只能在面試過程中慢慢摸索──<br>\n<strong>薪水真的是靠人談出來的</strong>。</p>\n<h2 id=\"%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C\">常見問題 <a class=\"direct-link\" href=\"#%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C\">#</a></h2>\n<h4 id=\"%E6%8A%80%E8%A1%93%E9%83%A8%E5%88%86\">技術部分 <a class=\"direct-link\" href=\"#%E6%8A%80%E8%A1%93%E9%83%A8%E5%88%86\">#</a></h4>\n<p>我主要參考了這些<br>\n也不用翻太久以前的文章，否則參考價值不大</p>\n<ul>\n<li><a href=\"https://h5bp.org/Front-end-Developer-Interview-Questions/translations/chinese-traditional/\">前端工程師面試問題集</a></li>\n<li><a href=\"https://medium.com/@emmashih/2019%E5%B9%B4-%E9%9D%9E%E6%9C%AC%E7%A7%91%E8%BD%89%E8%81%B7%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB-862feac4734a\">2019年非本科轉職前端工程師經驗分享</a></li>\n<li><a href=\"https://medium.com/@innie902/2020-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97-e9f25211cc14\">2020 前端工程師面試心得</a></li>\n<li><a href=\"https://medium.com/@indigoichigo2019/2020%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6%E5%B0%8F%E8%A8%98-d24747ae284f\">2020前端工程師面試小記</a></li>\n<li><a href=\"https://medium.com/@wei30172/2020%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%9D%A2%E8%A9%A6%E5%95%8F%E9%A1%8C%E5%BD%99%E6%95%B4%E5%8F%8A%E5%BF%83%E5%BE%97%E5%88%86%E4%BA%AB-a1cb9fa504ca\">2020前端工程師面試問題彙整及心得分享</a></li>\n<li><a href=\"https://www.php.cn/toutiao-415463.html\">2021 前端面試題匯總（主要為 Vue）</a></li>\n</ul>\n<p>其實看來看去就會發現都是類似的題型<br>\n重點還是要去真正深入理解問題背後的觀念<br>\n如果能搭配實際上工作情境碰到的問題去深入討論會更好</p>\n<h4 id=\"%E4%BA%BA%E6%A0%BC%E7%89%B9%E8%B3%AA-%26-%E5%B7%A5%E4%BD%9C%E7%B6%93%E9%A9%97\">人格特質 &amp; 工作經驗 <a class=\"direct-link\" href=\"#%E4%BA%BA%E6%A0%BC%E7%89%B9%E8%B3%AA-%26-%E5%B7%A5%E4%BD%9C%E7%B6%93%E9%A9%97\">#</a></h4>\n<p>我自己常遇到的大概是這些問題</p>\n<ul>\n<li>自我介紹</li>\n<li>有什麼優缺點</li>\n<li>為什麼要換工作</li>\n<li>之前的工作內容 / 工作流程</li>\n<li>開發上遇過的難題 / 最後如何解決</li>\n<li>為什麼會知道這間公司 / 怎麼會想來</li>\n<li>對新工作有什麼期望</li>\n<li>未來職涯規劃 / 對自己有什麼想像</li>\n<li>對這間公司有什麼問題</li>\n</ul>\n<p>想像自己就是個推銷員，你本身同時又是產品<br>\n去思考要如何好好說一個故事包裝自己，同時展現自信與良好溝通能力</p>\n<p>不過也別太浮誇，誠實回答，臨機應變即可<br>\n在這個階段尋求共識，確認雙方價值觀才是最重要的</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\">總結 <a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a></h2>\n<p>回顧這段時間以來的面試，從一開始每天心情都像是在坐雲霄飛車，到最後放寬心，能冷靜地同時與好幾個資歷深厚的主管交談。自己真的是最能體會到自己的成長的人。</p>\n<p>如果要用一句話說明我這段時間以來的體悟，只能說：<br>\n<strong>過去的積累或許當下感受不出什麼，也許會在意想不到的時候反饋而來。</strong></p>\n<p>像是被不同的面試官誇獎 Side project 成果，或是被同齡層的工程師說了：我有看你的技術部落格喔！本來都只是一個人默默苦幹，一回頭卻無意間收穫他人的肯定，這感覺真的很奇妙。</p>\n<p>但我還是有很多的不足之處。<br>\n如果時光能倒退，我肯定會想<strong>更用心經營技術部落格，更認真刷題</strong>。<br>\n或許走在技術路上，永遠也不會覺得自己是準備好的，或是真正足夠的。</p>\n<p>新工作報到，這才是迎來新挑戰啊。</p>\n",
      "date_published": "2021-02-08T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/27fd8f25/",
      "url": "https://frannn.dev/posts/27fd8f25/",
      "title": "如何修改 GitHub 上已存在之 Repo 名稱",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>在 GitHub 上已有遠端 Repository 時，也許會事後反悔、想修改 Repo 名稱</p>\n<p>在這裡筆記一下這種情形下的標準做法，避免影響到既有存在於遠端上的專案</p>\n<h2 id=\"%E4%BF%AE%E6%94%B9%E9%81%A0%E7%AB%AF-repo-%E5%90%8D%E7%A8%B1\">修改遠端 Repo 名稱 <a class=\"direct-link\" href=\"#%E4%BF%AE%E6%94%B9%E9%81%A0%E7%AB%AF-repo-%E5%90%8D%E7%A8%B1\">#</a></h2>\n<p>以 GitHub 為例，先進入遠端 Repo 的設定頁面：</p>\n<pre class=\"language-text\"><code class=\"language-text\">https://github.com/<github 帳號>/<repo 名稱>/settings</code></pre>\n<p><img src=\"https://i.imgur.com/lwnPIZC.png\" alt=\"\"></p>\n<ol>\n<li>把 <strong>Repository name</strong> 欄位改成新的 Repo 名稱</li>\n<li>確認新名稱可以使用，會跳出 <code>&lt;新名稱&gt; is available</code> 的訊息</li>\n<li>點擊 <strong>Rename</strong> 更新 Repo 名稱</li>\n</ol>\n<h2 id=\"%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E7%AB%AF%E7%9A%84%E9%81%A0%E7%AB%AF-repo-%E4%BD%8D%E7%BD%AE\">更新本地端的遠端 Repo 位置 <a class=\"direct-link\" href=\"#%E6%9B%B4%E6%96%B0%E6%9C%AC%E5%9C%B0%E7%AB%AF%E7%9A%84%E9%81%A0%E7%AB%AF-repo-%E4%BD%8D%E7%BD%AE\">#</a></h2>\n<p>GitHub 更新 Repo 名稱後，複製新的遠端伺服器網址，格式如下：</p>\n<pre class=\"language-text\"><code class=\"language-text\">git@github.com:<github 帳號>/<repo 名稱>.git</code></pre>\n<p><img src=\"https://i.imgur.com/3GvHuQr.gif\" alt=\"\"></p>\n<p>切換到本地端資料夾，打開終端機輸入指令</p>\n<ol>\n<li>使用 <strong><code>git remote set-url</code></strong> 指令，更改遠端伺服器網址</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote set-url origin git@github.com:<span class=\"token operator\">&lt;</span>github 帳號<span class=\"token operator\">></span>/<span class=\"token operator\">&lt;</span>repo 名稱<span class=\"token operator\">></span>.git</code></pre>\n<ol start=\"2\">\n<li>使用 <strong><code>git remote -v</code></strong> 指令，確認遠端伺服器網址</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> remote -v</code></pre>\n<p>如此一來便大功告成</p>\n",
      "date_published": "2021-02-14T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/56efe959/",
      "url": "https://frannn.dev/posts/56efe959/",
      "title": "macOS 打造前端開發環境",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>最近剛拿到新的 MacBook Pro，早忘了幾年前安裝環境究竟處理過什麼細節<br>\n有些參考資料又比較過時，因此決定把這次安裝的程序和設定的細節記錄下來</p>\n<p>以下所使用的是 macOS Big Sur 11.2.1 的 MacBook Pro (13-inch, 2020)</p>\n<h2 id=\"%E5%AE%89%E8%A3%9D-homebrew\">安裝 Homebrew <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-homebrew\">#</a></h2>\n<p><a href=\"https://brew.sh/index_zh-tw.html\">Homebrew</a> 是 Mac 系統中的套件管理工具<br>\n利用 Homebrew 能讓我們不必藉由 App Store 或官網下載安裝檔就能取得許多軟體</p>\n<p>在終端機輸入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">/bin/bash -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class=\"token variable\">)</span></span>\"</span></code></pre>\n<p>後面會盡可能利用 <code>brew</code> 指令來安裝軟體，加快效率</p>\n<h2 id=\"%E5%AE%89%E8%A3%9D-xcode-command-line-tool\">安裝 Xcode Command Line Tool <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-xcode-command-line-tool\">#</a></h2>\n<p>Command Line Tools 是在 Xcode 中的一款工具，在 macOS 中，有許多的工具或是語言都會依賴這個命令列開發者工具</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">xcode-select --install</code></pre>\n<h2 id=\"%E5%AE%89%E8%A3%9D-nvm\">安裝 NVM <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-nvm\">#</a></h2>\n<p>在安裝開發前端必備的 <strong>Node.js</strong> 以前，先讓我們來安裝 <a href=\"https://github.com/nvm-sh/nvm\">NVM</a>，英文全名是 Node Version Manager</p>\n<p>NVM 的用途如同英文全名，便是用來管理 Node 版本的工具。因為在不同的專案之間，我們可能必須要切換不同版本的運行環境，這時 NVM 便能幫助我們輕鬆切換</p>\n<p>在終端機輸入以下指令來安裝</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh <span class=\"token operator\">|</span> <span class=\"token function\">bash</span></code></pre>\n<p>安裝完再輸入下面的指令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NVM_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.nvm\"</span><br><span class=\"token punctuation\">[</span> -s <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>. <span class=\"token string\">\"<span class=\"token variable\">$NVM_DIR</span>/nvm.sh\"</span>  <span class=\"token comment\"># This loads nvm</span></code></pre>\n<p>這會把 NVM 的 Repo 資料夾複製到 <code>~/.nvm</code><br>\n然後將 source line 加進 profile 設定檔中（ <code>~/.bash_profile</code> 、 <code>~/.zshrc</code> 、 <code>~/.profile</code> 或 <code>~/.bashrc</code> ）</p>\n<h2 id=\"%E9%80%8F%E9%81%8E-nvm-%E5%AE%89%E8%A3%9D-node.js\">透過 NVM 安裝 Node.js <a class=\"direct-link\" href=\"#%E9%80%8F%E9%81%8E-nvm-%E5%AE%89%E8%A3%9D-node.js\">#</a></h2>\n<p>JavaScript 通常是執行在瀏覽器的環境中，而 <a href=\"https://nodejs.org/en/\">Node.js</a> 能讓我們在後端（脫離瀏覽器環境的情況）中建立起能執行 JavaScript 的環境</p>\n<ul>\n<li>\n<p>使用 NVM 安裝最新版本的 Node.js</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">nvm <span class=\"token function\">install</span> <span class=\"token function\">node</span></code></pre>\n</li>\n<li>\n<p>或安裝最新 LTS 版本的 Node.js</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">nvm <span class=\"token function\">install</span> --lts</code></pre>\n</li>\n<li>\n<p>或安裝指定的 Node.js 版本</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">nvm <span class=\"token function\">install</span> <span class=\"token number\">12.16</span>.3</code></pre>\n</li>\n<li>\n<p>需要切換當前使用版本</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">nvm use <span class=\"token number\">12</span></code></pre>\n</li>\n<li>\n<p>要查看目前是使用哪個版本</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">nvm current</code></pre>\n</li>\n</ul>\n<h2 id=\"%E5%AE%89%E8%A3%9D-npm\">安裝 NPM <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-npm\">#</a></h2>\n<p>其實在我們安裝 Node.js 時，通常都會附帶安裝 <a href=\"https://www.npmjs.com/\">NPM</a>，英文全名為 Node Package Manager</p>\n<p>NPM 是套件管理工具，能幫助我們管理專案的安裝套件，做到自動下載和版本控制等等的事情</p>\n<p>雖然剛才已經順帶安裝了，但我想指定使用特定版本的 NPM</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -g npm@6.14.4</code></pre>\n<p>這裡使用了縮寫 <code>i</code> 表示 <code>install</code>，<code>-g</code> 則是 <code>--global</code> 的縮寫，代表全域安裝，而不只是安裝在目前的專案目錄裡</p>\n<h2 id=\"%E5%AE%89%E8%A3%9D-wget\">安裝 wget <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-wget\">#</a></h2>\n<p><a href=\"https://www.gnu.org/software/wget/\">wget</a> 和前面我們所用到的 curl 指令，兩者都是 Linux 中用來下載檔案的<br>\n只不過在 macOS 中並沒有預設安裝 wget，但未來我們可能還是有機會用上</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token function\">wget</span></code></pre>\n<h2 id=\"%E5%AE%89%E8%A3%9D-git\">安裝 Git <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-git\">#</a></h2>\n<p><a href=\"https://git-scm.com/\">Git</a> 是一種版本控制系統<br>\n其實 MacOS 預設是有安裝 Git 的，只是有版本過舊的可能</p>\n<p>確認目前的 Git 版本</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> --version </code></pre>\n<p>需要的話，重新安裝 Git 來取得最新版本</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/git/git</code></pre>\n<p>記得設定 <code>git config</code> 的識別資料，這樣每次 Git 的提交才會標註上你的資訊</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"John Doe\"</span><br><span class=\"token function\">git</span> config --global user.email johndoe@example.com</code></pre>\n<p>確認 <code>git config</code> 的資訊</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --list</code></pre>\n<h2 id=\"%E5%AE%89%E8%A3%9D-iterm2\">安裝 iTerm2 <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-iterm2\">#</a></h2>\n<p>比起原生終端機，我個人還是喜歡使用 <a href=\"https://iterm2.com/\">iTerm2</a></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> iterm2</code></pre>\n<p>接下來設定顏色樣式，到 <a href=\"https://iterm2colorschemes.com/\">Iterm2-color-schemes</a> 挑一個喜歡的顏色組合吧！</p>\n<p>滑鼠右鍵、另存連結，存下 <code>.itermcolors</code> 檔案，再回到 iTerm2 中依序點擊</p>\n<pre class=\"language-text\"><code class=\"language-text\">Preferences → Profiles → Colors → Color Presets... → Import...</code></pre>\n<p>選擇剛才下載的 <code>.itermcolors</code> 檔案（我使用的是 <a href=\"https://raw.githubusercontent.com/mbadolato/iTerm2-Color-Schemes/master/schemes/Brogrammer.itermcolors\">Brogrammer</a>）</p>\n<h2 id=\"%E5%AE%89%E8%A3%9D-zsh\">安裝 zsh <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-zsh\">#</a></h2>\n<p>Zsh 又稱為 Z shell，和常聽到的 Bash 類似，都是一種 shell 工具<br>\n從 macOS Catalina（10.15）版本後，是使用 Zsh 作為預設 shell</p>\n<p>如果是以前的系統版本，會需要再手動安裝</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token function\">zsh</span></code></pre>\n<p>確認是否安裝成功</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">zsh</span> --version</code></pre>\n<h2 id=\"%E5%AE%89%E8%A3%9D-zimfw\">安裝 zimfw <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-zimfw\">#</a></h2>\n<p><a href=\"https://zimfw.sh/\">Zim</a> 是一個管理 zsh 組態設定的框架</p>\n<p>以前我使用的其實是另一個叫做 <a href=\"https://ohmyz.sh/\">oh-my-zsh</a> 的老牌框架，但是 oh-my-zsh 比較肥一些</p>\n<p>直到後來我發現了 Zim，一些我常用的功能在 Zim 之中也都有，<a href=\"https://github.com/zimfw/zimfw/wiki/Speed\">速度</a>又相較 oh-my-zsh 快上不少，所以就改用這個</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh <span class=\"token operator\">|</span> <span class=\"token function\">zsh</span></code></pre>\n<h2 id=\"%E5%AE%89%E8%A3%9D-powerlevel10k\">安裝 Powerlevel10k <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-powerlevel10k\">#</a></h2>\n<p><a href=\"https://github.com/romkatv/powerlevel10k\">Powerlevel10k</a> 是一個 Zsh 外觀主題，還有方便的自動設定介面</p>\n<p>要搭配 Zim 安裝，可以輸入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> ~/.zimrc</code></pre>\n<p>把 <code>zmodule steeef</code> 這行改成 <code>zmodule romkatv/powerlevel10k</code></p>\n<p>儲存退出後，回到終端機輸入</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">zimfw <span class=\"token function\">install</span><br><span class=\"token builtin class-name\">source</span> ~/.zshrc</code></pre>\n<p><code>source ~/.zshrc</code> 會重新載入配置文件，當然也能直接重新啟動終端機重載</p>\n<p>重載後便會進入 Powerlevel10k 的自動設定介面</p>\n<p><img src=\"https://i.imgur.com/nPErbkB.png\" alt=\"\"></p>\n<p>如果沒有的話，先重開終端機，再輸入設定指令</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">p10k configure</code></pre>\n<p>理論上在過程中會自動安裝我們所需要的 powerline 字體 - Meslo Nerd Font</p>\n<p>要回到 iTerm2 中確認字型是 <code>MesloLGS NF</code> 並設定字體大小，依序點選</p>\n<pre class=\"language-text\"><code class=\"language-text\">Preferences → Profiles → Text</code></pre>\n<h2 id=\"%E5%AE%89%E8%A3%9D-vscode\">安裝 VSCode <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-vscode\">#</a></h2>\n<p>程式碼編輯器 <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>，吃飯工具相信不用多做解釋</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask visual-studio-code</code></pre>\n<p>再打開 VSCode 按下 Command + Shift + P，安裝 Shell 指令 <code>code</code></p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Install <span class=\"token string\">'code'</span> <span class=\"token builtin class-name\">command</span> <span class=\"token keyword\">in</span> <span class=\"token environment constant\">PATH</span> <span class=\"token builtin class-name\">command</span></code></pre>\n<p><code>code</code> 指令能讓我們在終端機快速用 VSCode 打開檔案或資料夾</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">code file_or_folder_name</code></pre>\n<p>設定預設終端機和字體，在 VSCode 依序點擊</p>\n<pre class=\"language-text\"><code class=\"language-text\">Preferences → Settings → Features → Terminal </code></pre>\n<ol>\n<li>將 <code>OsxExec</code> 的欄位設定成 <code>iTerm.app</code></li>\n<li>將 <code>Font Family</code> 的欄位設定成 <code>MesloLGS NF</code></li>\n</ol>\n<h2 id=\"%E5%AE%89%E8%A3%9D%E5%85%B6%E4%BB%96%E7%A8%8B%E5%BC%8F\">安裝其他程式 <a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D%E5%85%B6%E4%BB%96%E7%A8%8B%E5%BC%8F\">#</a></h2>\n<p>到這裡為止，其實已經能滿足大部分的開發需求了<br>\n再來就是安裝一些瀏覽器或是其他工作上可能需要的工具</p>\n<ul>\n<li>安裝 <a href=\"https://www.google.com/chrome/\">Google Chrome</a><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask google-chrome</code></pre>\n</li>\n<li>安裝 <a href=\"https://www.mozilla.org/firefox/\">Mozilla Firefox</a><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask firefox</code></pre>\n</li>\n<li>安裝 <a href=\"https://www.microsoft.com/edge\">Microsoft Edge</a><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask microsoft-edge</code></pre>\n</li>\n<li>安裝 <a href=\"https://www.docker.com/\">Docker</a><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask <span class=\"token function\">docker</span></code></pre>\n</li>\n<li>安裝 <a href=\"https://tmux.github.io/\">tmux</a><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> tmux</code></pre>\n</li>\n<li>安裝 <a href=\"https://github.com/sharkdp/bat\">bat</a>，記得在 <code>~/.zshrc</code> 中加入 <code>alias cat=&quot;bat&quot;</code><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> bat</code></pre>\n</li>\n<li>安裝 <a href=\"https://the.exa.website/\">exa</a>，記得在 <code>~/.zshrc</code> 中加入 <code>alias ls=&quot;exa&quot;</code><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> exa</code></pre>\n</li>\n<li>安裝 <a href=\"https://folivora.ai/\">BetterTouchTool</a><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask bettertouchtool</code></pre>\n</li>\n<li>安裝 <a href=\"https://git-fork.com/\">Fork</a><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask fork</code></pre>\n</li>\n<li>安裝 <a href=\"https://github.com/jinfeihan57/p7zip\">p7zip（7-Zip）</a><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> p7zip</code></pre>\n</li>\n<li>安裝 <a href=\"https://slack.com/\">Slack</a>（順便一提，我使用的是 <a href=\"https://slackthemes.net/#/convoy\">Convoy</a> 這個顏色主題）<pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> --cask slack</code></pre>\n</li>\n</ul>\n<h2 id=\"%E7%B5%90%E8%AA%9E\">結語 <a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a></h2>\n<p>雖然上面洋洋灑灑列了一大篇，但其實還有其他的眉眉角角，比如說</p>\n<ul>\n<li>設定 SSH 金鑰，可以參考我之前寫的另一篇<a href=\"https://blog.wjhuang.com/posts/83ff426e/#%E5%9C%A8-OSX-%E8%88%87-Linux-%E7%92%B0%E5%A2%83%E4%B8%8B%E7%94%A2%E7%94%9F-SSH-key\">文章</a></li>\n<li>安裝 VSCode 的擴充套件</li>\n<li>安裝 Chrome 的擴充功能</li>\n<li>……</li>\n</ul>\n<p>還有許多小工具能幫助開發體驗更加美好，這些就留待未來有機會再補充囉！</p>\n",
      "date_published": "2021-02-27T00:00:00-00:00"
    },{
      "id": "https://frannn.dev/posts/82901432/",
      "url": "https://frannn.dev/posts/82901432/",
      "title": "離開 Hexo，使用 Eleventy 架設部落格",
      "content_html": "<h2 id=\"%E5%89%8D%E8%A8%80\">前言 <a class=\"direct-link\" href=\"#%E5%89%8D%E8%A8%80\">#</a></h2>\n<p>從今年年初便知道 <a href=\"https://www.11ty.dev/\">Eleventy</a> 這樣的一套 Static Site Generator，經過一番評估之後，最近終於趁著空閒的空檔，選擇 <a href=\"https://www.11ty.dev/\">Eleventy</a> 作為新的技術框架，並以 <a href=\"https://github.com/google/eleventy-high-performance-blog\">eleventy-high-performance-blog</a> 作為基底，架置了新的部落格，和過去所使用的 <a href=\"https://hexo.io/zh-tw/\">Hexo</a> 框架說掰掰。</p>\n<p>在這裡紀錄一些個人的使用心得，也讓其他想嘗試 <a href=\"https://www.11ty.dev/\">Eleventy</a> 這套工具的人可以作為參考。</p>\n<h2 id=\"%E7%82%BA%E4%BB%80%E9%BA%BC%E4%B8%8D%E7%94%A8-hexo%EF%BC%9F\">為什麼不用 Hexo？ <a class=\"direct-link\" href=\"#%E7%82%BA%E4%BB%80%E9%BA%BC%E4%B8%8D%E7%94%A8-hexo%EF%BC%9F\">#</a></h2>\n<p>過去我使用 <a href=\"https://hexo.io/zh-tw/\">Hexo</a> 架置部落格也有好幾年，事實上作為新手架置部落格的選擇來說，還是一個很不錯的選擇。</p>\n<p>我認為 <a href=\"https://hexo.io/zh-tw/\">Hexo</a> 有以下的優點：</p>\n<ul>\n<li>基於 Node.js 撰寫，在本地編譯建置靜態頁面，有一定 SEO 優勢</li>\n<li>開源社群十分活躍，你幾乎不需要自己重造輪子</li>\n<li>基於以上，有豐富的漂亮主題與外掛</li>\n<li>中文文件、網路資源多，學習成本低</li>\n</ul>\n<p>但是，基於以上的優點……菜鳥時期的我也犯下了一些錯誤：</p>\n<ul>\n<li>套用了漂亮的主題，卻未著重效能</li>\n<li>使用第三方外掛，實際上未必需要那麼強大的自定義功能，增加程式複雜度</li>\n<li>使用第三方套件並未積極更新最新版本，間接導致損失了可能的效能改進或延伸出資安問題</li>\n</ul>\n<p><img src=\"https://i.imgur.com/PgaB6fJ.png\" alt=\"舊桌機版網頁 Lighthouse 表現\"></p>\n<blockquote>\n<p>過去我所使用的是 <a href=\"https://github.com/ppoffice/hexo-theme-icarus\">hexo-theme-icarus</a> 這個主題，利用 Lighthouse 量測，在桌機上的表現還不算太差，但還有改善空間</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/BD0Bwpm.png\" alt=\"舊手機版網頁 Lighthouse 表現\"></p>\n<blockquote>\n<p>然而透過 Lighthouse 量測，在手機上的表現是顯而易見的差強人意</p>\n</blockquote>\n<p>其實後來想想，我真的需要這個主題之中的每一個功能嗎？答案當然是否定的。</p>\n<p>對於自己的部落格，我的要求也和以前的我有所不同：</p>\n<ul>\n<li>效能優化擺在第一順位考量，不需要太浮誇的功能，越簡潔越好</li>\n<li>比起過於笨重的第三方套件，還不如不要，我可以自己動手</li>\n<li>基於前者，要容易按照我自己的需求客製化，框架架構不要太複雜</li>\n</ul>\n<p>釐清自己的需求與目的後，開始研究不同技術與工具評估，透過 Huli 的這篇文章（<a href=\"https://blog.huli.tw/2021/08/22/eleventy-over-hexo/\">除了 hexo，也可以考慮用 eleventy 來寫技術部落格</a>）我得知了 <a href=\"https://github.com/google/eleventy-high-performance-blog\">eleventy-high-performance-blog</a> 這個 template repo。</p>\n<h2 id=\"%E9%97%9C%E6%96%BC-eleventy-high-performance-blog\">關於 eleventy-high-performance-blog <a class=\"direct-link\" href=\"#%E9%97%9C%E6%96%BC-eleventy-high-performance-blog\">#</a></h2>\n<p><a href=\"https://github.com/google/eleventy-high-performance-blog\">eleventy-high-performance-blog</a> 是一套由 google 工程師所建置的開源部落格模板，以打造高速效能為重點，這個模板已經建構好一套相對完整的架構，包含：</p>\n<ul>\n<li><strong>圖片最佳化</strong>（響應式圖片、lazy load、轉換 webp / AVIF 等優化格式）</li>\n<li><strong>CSS / JS minify</strong>（使用 <a href=\"https://rollupjs.org/guide/en/\">rollup.js</a>、<a href=\"https://purgecss.com/\">PurgeCSS</a> 等工具）</li>\n<li><strong>基本 SEO 建設</strong>（HTML 語意化、meta tag、Sitemap 等等）</li>\n<li>考量 <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility\">Web Accessibility（a11y）</a></strong> 而實作</li>\n<li>導入了 <a href=\"https://mochajs.org/\">mocha</a>，有一套<strong>基本的測試架構</strong>，CI 階段可整合測試</li>\n</ul>\n<p>專案架構也清晰精簡，易於改動維護，可以說是麻雀雖小，五臟俱全！</p>\n<p>非要雞蛋裡挑骨頭的話，這個模板未經修改、直接建置的 <a href=\"https://eleventy-high-performance-blog-sample.industrialempathy.com/\">Demo site</a> 看起來確實是比 Hexo 社群那些酷酷的主題要來得精簡許多……</p>\n<p>但是，正如這個專案的 README 所說：</p>\n<blockquote>\n<p>Knock yourself out. This is a template repository.</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/2v7qWrx.png\" alt=\"接受挑戰\"></p>\n<p><strong>Ok，我接受這個挑戰！</strong></p>\n<h2 id=\"%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E5%8C%96%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84%E5%BF%83%E8%B7%AF%E5%88%86%E4%BA%AB\">架設個人化部落格的心路分享 <a class=\"direct-link\" href=\"#%E6%9E%B6%E8%A8%AD%E5%80%8B%E4%BA%BA%E5%8C%96%E9%83%A8%E8%90%BD%E6%A0%BC%E7%9A%84%E5%BF%83%E8%B7%AF%E5%88%86%E4%BA%AB\">#</a></h2>\n<p>開始改造的第一步，首要之務當然是：<strong>確立風格，列出需求</strong></p>\n<p>以我的例子來說，參考了一些前輩和同事的技術部落格後，確立自己心有所屬的主題風格後，再將我心中的想像、這其中必備的功能一一列出來：</p>\n<ul>\n<li>留言功能是必備</li>\n<li>文章要有漂亮的封面圖片</li>\n<li>想要深色主題和淺色主題的切換功能</li>\n<li>要有頁面分頁功能（分頁邏輯要和舊站一致）</li>\n<li>文章 link url 的轉換規則需要調整，不直接使用 title 字串（邏輯要和舊站一致，方便我作 301 轉址）</li>\n<li>串接 Google Analytics</li>\n</ul>\n<p>……諸多調整和樣式有關，族繁不及備載。</p>\n<p>總而言之，事前確認越是具體，實作階段也就更明確，避免反覆修改。</p>\n<h3 id=\"color-palette\">Color Palette <a class=\"direct-link\" href=\"#color-palette\">#</a></h3>\n<p>Color Palette 的部分，我則是借助了 <a href=\"http://colormind.io/bootstrap/\">Colormind</a> 這個網站幫我配好合理的網頁配色，實務上再按需求作一些 darken &amp; lighten 色彩轉換。</p>\n<p><img src=\"https://i.imgur.com/ZB4faSz.png\" alt=\"Colormind\"></p>\n<blockquote>\n<p>只需要選好主色，點擊 Generate 便會自動產生合理的網頁配色。當然，你也可以設定副色等等，將其一併納入考量！</p>\n</blockquote>\n<h3 id=\"%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD---giscus\">留言功能 - <a href=\"https://giscus.app/zh-TW\">Giscus</a> <a class=\"direct-link\" href=\"#%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD---giscus\">#</a></h3>\n<p>至於留言功能的部分，本來是在 <a href=\"https://utteranc.es/\">utterances</a> 和 <a href=\"https://jamcomments.com/\">JamComments</a> 之間反覆猶豫，兩者對我來說各有優缺。</p>\n<p>我一直以來都不是很喜歡 <a href=\"https://utteranc.es/\">utterances</a> 這種相依於 GitHub issues 相關 API 的方式，其實使用上並不會造成什麼問題，但對我來說 ...Is this an issue for me?</p>\n<p>心裡總是有種彆扭的感覺在那裡，否則單以功能面來說，<a href=\"https://utteranc.es/\">utterances</a> 絕對是可以滿足我的需求。</p>\n<p>反過來說，<a href=\"https://jamcomments.com/\">JamComments</a> 這個第三方服務雖然看起來和 Eleventy 有不錯的支援性，甚至文件上也提供了<a href=\"https://jamcomments.com/docs/integrations/eleventy/\">官方外掛</a>，但是對我而言，網站所相依的第三方服務，當然還是能少一個是一個。</p>\n<p>直到我在 SNS 上偶然看見有人推薦 <a href=\"https://giscus.app/zh-TW\">Giscus</a> 這個工具，完美解除了我上述的疑慮！</p>\n<p><a href=\"https://giscus.app/zh-TW\">Giscus</a> 其實是受到 <a href=\"https://utteranc.es/\">utterances</a> 啟發，但不同的是，背後所使用的是 GitHub Discussions 相關 API。</p>\n<p>當然這套工具也支援多樣的主題樣式設定，支援多語言，還可以讓我透過 <code>window.postMessage</code> 等方式對 giscus iframe 做更進一步的動態互動。</p>\n<p>文件很清楚，串接過程中也沒遇到什麼問題，是一套我會想強力推薦給大家的留言系統工具！</p>\n<h3 id=\"ci%2Fcd\">CI/CD <a class=\"direct-link\" href=\"#ci%2Fcd\">#</a></h3>\n<p>在本地環境弄得差不多了，下一步開始著手調整 CI/CD workflow。</p>\n<p>Deploy 部分我就直接使用 GitHub Actions 一口氣處理掉了，覺得自己不太需要用到 <a href=\"https://www.netlify.com/\">Netlify</a> 服務，需要作轉址或是 SSL 憑證則是透過熟悉的 <a href=\"https://www.cloudflare.com/zh-tw/\">Cloudflare</a> 幫忙處理。</p>\n<h4 id=\"ci%2Fcd-flow-%E8%AA%AA%E6%98%8E\">CI/CD flow 說明 <a class=\"direct-link\" href=\"#ci%2Fcd-flow-%E8%AA%AA%E6%98%8E\">#</a></h4>\n<p>基本上常駐的就是三支 branch：</p>\n<ul>\n<li><strong><code>develop</code></strong>：主要開發與測試使用，有異動便會觸發 <code>build &amp; test</code> CI 流程，沒問題再人工手動進 code 到 <code>main</code> branch</li>\n<li><strong><code>main</code></strong>：有異動便會觸發 <code>build &amp; deploy</code> CD 流程，將建置產生的異動自動推上 <code>gh-pages</code> branch</li>\n<li><strong><code>gh-pages</code></strong>：不直接對這個 branch 操作，有異動就會直接觸發 Github 預設的 <code>pages build and deployment</code> workflow，我什麼都不用做 😆</li>\n</ul>\n<h4 id=\"build-%26-deploy-workflow-%E8%A8%AD%E5%AE%9A%E6%AA%94%E7%AF%84%E4%BE%8B\"><code>build &amp; deploy</code> workflow 設定檔範例 <a class=\"direct-link\" href=\"#build-%26-deploy-workflow-%E8%A8%AD%E5%AE%9A%E6%AA%94%E7%AF%84%E4%BE%8B\">#</a></h4>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> build &amp; deploy<br><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span><br>  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">]</span><br><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest<br>    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span><br>      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span><br>        <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>14.x<span class=\"token punctuation\">]</span><br>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2<br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js $<br>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1<br>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> $<br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install dependencies and build<br>        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install <span class=\"token important\">&amp;&amp;</span> npm run build<span class=\"token punctuation\">-</span>ci<br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy<br>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> JamesIves/github<span class=\"token punctuation\">-</span>pages<span class=\"token punctuation\">-</span>deploy<span class=\"token punctuation\">-</span>action@v4<br>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">ssh-key</span><span class=\"token punctuation\">:</span> $<br>          <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> gh<span class=\"token punctuation\">-</span>pages<br>          <span class=\"token key atrule\">folder</span><span class=\"token punctuation\">:</span> _site</code></pre>\n<p>Deploy job 使用了 <a href=\"https://github.com/JamesIves/github-pages-deploy-action\">JamesIves/github-pages-deploy-action</a> 代勞，記得按照<a href=\"https://github.com/JamesIves/github-pages-deploy-action#using-an-ssh-deploy-key-\">文件說明</a>去 Repo Settings 設定 <strong>Deploy key</strong> 和 <strong>Repository secrets</strong>。</p>\n<h3 id=\"%E8%B3%BC%E8%B2%B7%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%9F%9F%E5%90%8D%EF%BC%8C%E8%A8%AD%E5%AE%9A-cloudflare-%E4%BB%A3%E7%AE%A1-dns\">購買自定義域名，設定 Cloudflare 代管 DNS <a class=\"direct-link\" href=\"#%E8%B3%BC%E8%B2%B7%E8%87%AA%E5%AE%9A%E7%BE%A9%E5%9F%9F%E5%90%8D%EF%BC%8C%E8%A8%AD%E5%AE%9A-cloudflare-%E4%BB%A3%E7%AE%A1-dns\">#</a></h3>\n<p>不詳述如何設定自定義域名了，總之買完之後要去域名服務商調整設定，使用 <a href=\"https://www.cloudflare.com/zh-tw/\">Cloudflare</a> 代管 DNS。</p>\n<p>可以參考我過去的這篇文章：<a href=\"https://frannn.dev/posts/d22e4c38/#%E7%94%A8-cloudflare-%E5%8A%A0%E4%B8%8A-ssl-%E6%86%91%E8%AD%89\">什麼是 SSL？透過 Cloudflare 來啟用 HTTPS</a></p>\n<p>光是 <a href=\"https://www.cloudflare.com/zh-tw/\">Cloudflare</a> 的免費方案就提供了許多網站加速、安全防禦服務，我重點設定的項目有這些：</p>\n<ul>\n<li><strong>SSL/TLS 憑證</strong>（一律使用 HTTPS，同時自動改寫）</li>\n<li><strong>Caching</strong>（調整瀏覽器快取 TTL 時間）</li>\n<li><strong>使用 <a href=\"https://support.cloudflare.com/hc/en-us/articles/200168196-Using-Cloudflare-Auto-Minify\">Auto Minify</a></strong></li>\n<li><strong>啟用 Brotli 壓縮</strong></li>\n<li><strong>啟用 <a href=\"https://support.cloudflare.com/hc/en-us/articles/200168056-Understanding-Rocket-Loader\">Rocket Loader</a></strong></li>\n</ul>\n<h3 id=\"%E6%88%90%E6%9E%9C\">成果 <a class=\"direct-link\" href=\"#%E6%88%90%E6%9E%9C\">#</a></h3>\n<p>最後，你現在眼前所看到的這個 blog 便是一切的成果！</p>\n<p><img src=\"https://i.imgur.com/KyKloTT.png\" alt=\"新桌機版網頁 Lighthouse 表現\"></p>\n<blockquote>\n<p>利用 Lighthouse 量測，同一篇文章在桌機上的表現</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/N1hTyGZ.png\" alt=\"新手機版網頁 Lighthouse 表現\"></p>\n<blockquote>\n<p>利用 Lighthouse 量測，同一篇文章在手機上的表現</p>\n</blockquote>\n<p>可以看到，雖然加了一些雜七雜八客製化功能和樣式（甚至是串上了 Google Analytics），但 Lighthouse 還是有很亮眼的表現。</p>\n<p>再進一步比較修改前和修改後，手機版網頁上的各個指標所耗費時間：</p>\n<p><img src=\"https://i.imgur.com/szsJ4v3.png\" alt=\"舊手機版網頁的 Performance\"></p>\n<blockquote>\n<p>Before：<strong>FCP</strong> 時間高達 3.1 秒，<strong>LCP</strong> 時間更需要 9.4 秒，完全就是不合格。</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/bcn8AYg.png\" alt=\"新手機版網頁的 Performance\"></p>\n<blockquote>\n<p>After：<strong>FCP</strong> 時間降至 1.0 秒，<strong>LCP</strong> 時間只需要 1.3 秒，指標一切綠燈！</p>\n</blockquote>\n<p>對於這樣的復仇成果，我個人可以說是相當滿意。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\">總結 <a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a></h2>\n<p>感謝前人指路，讓我發現了一套這麼棒的模板工具！</p>\n<p>過去我是懶人起手，直接交給了 Hexo 社群提供的主題來包辦一切，但是無形之中也因個人掌握不足，間接導致一些額外的效能問題。</p>\n<p>這次基於簡潔的 <a href=\"https://github.com/google/eleventy-high-performance-blog\">eleventy-high-performance-blog</a> 模板工具來開發，客製化個人功能的過程中，每告一段落、完成了一個較大規模的異動調整，我就會停下來檢查一下剛才完成的部分有沒有什麼地方可以再優化。（我個人是花了點心力在確認資源載入的 <code>preload</code> 設定等等）</p>\n<p>與日常的專案開發不同，受限於頻繁的功能迭代有時候很難落實這件事情──然而<strong>頻繁量測，不斷地調整與測試，是提升網頁效能的必經之路</strong>。</p>\n<p>不排斥自己動手來的話，我是很推薦 <a href=\"https://github.com/google/eleventy-high-performance-blog\">eleventy-high-performance-blog</a> 這個模板工具的，還收穫了滿滿的成就感！</p>\n<p>這個部落格的原始碼放在 <a href=\"https://github.com/frantw/eleventy-high-performance-blog\">GitHub</a> 上，如有疑問歡迎在這篇文章底下留言。</p>\n<h3 id=\"%E5%85%B6%E4%BB%96%E5%8F%83%E8%80%83\">其他參考 <a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96%E5%8F%83%E8%80%83\">#</a></h3>\n<ul>\n<li><a href=\"https://blog.huli.tw/2021/08/22/eleventy-over-hexo/\">除了 hexo，也可以考慮用 eleventy 來寫技術部落格</a></li>\n<li><a href=\"https://jason-memo.dev/posts/why-i-leave-medium-and-build-blog-with-eleventy/\">為什麼我離開 Medium 用 eleventy 做一個 blog</a></li>\n</ul>\n",
      "date_published": "2022-08-02T00:00:00-00:00"
    }
  ]
}
